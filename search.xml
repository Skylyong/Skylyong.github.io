<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于编辑距离的文本层次聚类</title>
      <link href="2025/03/06/ji-yu-bian-ji-ju-chi-de-wen-ben-ceng-ci-ju-lei/"/>
      <url>2025/03/06/ji-yu-bian-ji-ju-chi-de-wen-ben-ceng-ci-ju-lei/</url>
      
        <content type="html"><![CDATA[<p>在自然语言处理（NLP）和数据清洗过程中，处理相似文本的聚类问题是一个常见的挑战。例如，在搜索日志、医学术语、客户查询等文本数据中，我们经常会遇到拼写相似或近似表达的词汇。为了更好地对这些数据进行分类和管理，我们可以使用 编辑距离（Levenshtein Distance） 结合 层次聚类（Hierarchical Clustering） 进行文本聚类。</p><p>本文介绍了一种基于 Python 的 编辑距离层次聚类 方法，并提供了一个完整的实现代码。该方法的核心思想是：</p><ul><li><p>计算编辑距离矩阵：通过 Levenshtein 距离衡量文本之间的相似性。</p></li><li><p>层次聚类：使用层次聚类，将相似的文本归类到相同的簇中。</p></li><li><p>排序和输出：按照聚类结果对数据进行排序，并将结果保存为 CSV 文件，便于后续分析。</p></li></ul><br>下面是实现代码:<pre class="line-numbers language-python" data-language="python"><code class="language-python">from scipy.cluster.hierarchy import linkage, fclusterfrom scipy.spatial.distance import pdist, squareformimport Levenshtein  # 用于计算编辑距离import numpy as npimport pandas as pdclass EditDistanceClustering:    def __init__(self, input_csv: str, output_csv: str, column_name: str, threshold: int &#x3D; 5):        &quot;&quot;&quot;        初始化类        :param input_csv: 输入CSV文件路径        :param output_csv: 输出CSV文件路径        :param column_name: 需要聚类的列名        :param threshold: 距离阈值，决定簇的划分        &quot;&quot;&quot;        self.input_csv: str &#x3D; input_csv        self.output_csv: str &#x3D; output_csv        self.column_name: str &#x3D; column_name        self.threshold: int &#x3D; threshold        self.df: pd.DataFrame | None &#x3D; None  # 初始化DataFrame变量        def read_csv(self) -&gt; None:        &quot;&quot;&quot;读取CSV文件到DataFrame中&quot;&quot;&quot;        self.df &#x3D; pd.read_csv(self.input_csv)        def lev_distance(self, s1: str, s2: str) -&gt; int:        &quot;&quot;&quot;        计算两个字符串之间的Levenshtein编辑距离        :param s1: 第一个字符串        :param s2: 第二个字符串        :return: 编辑距离        &quot;&quot;&quot;        return Levenshtein.distance(s1, s2)    def compute_edit_distance_matrix(self) -&gt; np.ndarray:        &quot;&quot;&quot;        计算字符串列表的编辑距离矩阵        :return: 计算得到的编辑距离矩阵（二维数组）        &quot;&quot;&quot;        # 获取指定列的所有字符串并转换为列表        strings: list[str] &#x3D; self.df[self.column_name].astype(str).tolist()        # 将字符串列表转换为NumPy数组，并调整为二维格式        strings_array: np.ndarray &#x3D; np.array(strings).reshape(-1, 1)        # 计算编辑距离矩阵        return squareform(pdist(strings_array, lambda u, v: self.lev_distance(u[0], v[0])))        def cluster_and_sort(self) -&gt; None:        &quot;&quot;&quot;        执行层次聚类，并根据聚类结果排序        &quot;&quot;&quot;        # 计算编辑距离矩阵        distance_matrix: np.ndarray &#x3D; self.compute_edit_distance_matrix()        # 使用层次聚类方法（Ward方法）进行聚类        linkage_matrix: np.ndarray &#x3D; linkage(distance_matrix, method&#x3D;&#39;ward&#39;)        # 根据设定的阈值进行聚类划分        clusters: np.ndarray &#x3D; fcluster(linkage_matrix, self.threshold, criterion&#x3D;&#39;distance&#39;)        # 将簇编号添加到DataFrame中        self.df[&#39;Cluster&#39;] &#x3D; clusters        # 按簇编号排序，并去掉Cluster列        self.df &#x3D; self.df.sort_values(by&#x3D;[&#39;Cluster&#39;]).drop(columns&#x3D;[&#39;Cluster&#39;])        def save_csv(self) -&gt; None:        &quot;&quot;&quot;将处理后的DataFrame保存回CSV文件&quot;&quot;&quot;        self.df.to_csv(self.output_csv, index&#x3D;False, encoding&#x3D;&#39;utf-8-sig&#39;)        def run(self) -&gt; None:        &quot;&quot;&quot;        运行完整的数据处理流程，包括读取CSV、聚类排序、保存CSV        &quot;&quot;&quot;        self.read_csv()        self.cluster_and_sort()        self.save_csv()# 示例用法if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    # 指定输入和输出CSV文件路径以及需要聚类的列    clustering: EditDistanceClustering &#x3D; EditDistanceClustering(        &#39;data&#x2F;second_fine_grained_tasks_new.csv&#39;,         &#39;data&#x2F;second_fine_grained_tasks_new_sorted1.csv&#39;,         &#39;细粒度_任务相关查询&#39;    )    # 运行聚类流程    clustering.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本聚类 编辑距离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ai竞赛平台</title>
      <link href="2025/02/27/ai-jing-sai-ping-tai/"/>
      <url>2025/02/27/ai-jing-sai-ping-tai/</url>
      
        <content type="html"><![CDATA[<p>最近对常见的Ai竞赛平台做了整理，记录如下：</p><ul><li>Kaggle:  <a href="https://www.kaggle.com/">https://www.kaggle.com/</a></li><li>AIcrowd: <a href="https://www.aicrowd.com/">https://www.aicrowd.com/</a></li><li>Codalab :  <a href="https://codalab.lisn.upsaclay.fr/">https://codalab.lisn.upsaclay.fr/</a></li><li>DrivenData: <a href="https://www.drivendata.org/">https://www.drivendata.org/</a></li><li>Grand Challenge: <a href="https://grand-challenge.org/">https://grand-challenge.org/</a></li><li>Topcoder:  <a href="https://www.topcoder.com/challenges">https://www.topcoder.com/challenges</a></li><li>Zindi: <a href="https://zindi.africa/">https://zindi.africa/</a></li><li>天池:  <a href="https://tianchi.aliyun.com/">https://tianchi.aliyun.com/</a></li><li>DataCastle: <a href="http://www.dcjingsai.com/">http://www.dcjingsai.com/</a></li><li>AI Studio:  <a href="https://aistudio.baidu.com/">https://aistudio.baidu.com/</a></li></ul><p>各赛事平台的特点汇总如下：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250228094452.png" alt="image-20250228094442500"></p><p>注： 上面的信息来自于大模型，但对给出的链接做了人工验证，其中除 Topcoder 平台页面显示不全以外，其他平台给出的链接地址均可以正常访问。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日常开发杂记</title>
      <link href="2025/02/19/python-ri-chang-kai-fa-za-ji/"/>
      <url>2025/02/19/python-ri-chang-kai-fa-za-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="mac系统-pandas存储为csv-在excel中打开乱码"><a href="#mac系统-pandas存储为csv-在excel中打开乱码" class="headerlink" title="mac系统 pandas存储为csv 在excel中打开乱码"></a>mac系统 pandas存储为csv 在excel中打开乱码</h1><blockquote><p>在使用pandas存储数据为csv文件后，在excel中打开会出现乱码问题，解决方法如下：<br>指定编码格式为<code>utf-8-sig</code>，即可解决问题。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">df.to_csv(&#39;output.csv&#39;, index&#x3D;False, encoding&#x3D;&#39;utf-8-sig&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="api-调用大模型时，指定返回json格式数据"><a href="#api-调用大模型时，指定返回json格式数据" class="headerlink" title="api 调用大模型时，指定返回json格式数据"></a>api 调用大模型时，指定返回json格式数据</h1><blockquote><p>解决方法如下： 指定 response_format 为 <code>&#123;&quot;type&quot;:&quot;json_object&quot;&#125;</code>，但是这个方法在deepseek中不适用。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">client &#x3D; openai &#x3D; OpenAI(api_key&#x3D;gpt_api_key,        base_url&#x3D;gpt_base_url        )response &#x3D; client.chat.completions.create(                model&#x3D; model,                messages&#x3D;[                    &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;你是一名中医药专家&quot;&#125;,                    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: prompt&#125;                ],                max_tokens&#x3D;2048,                response_format&#x3D;&#123;&quot;type&quot;:&quot;json_object&quot;&#125;            )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> openAi 官方解释：</p><p> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20250219171031.png" alt="image-20250219171024040"></p><p> 参考链接：<a href="https://beta.openai.com/docs/api-reference/completions/create">openai官方文档</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过docker部署doccano标注工具</title>
      <link href="2025/02/12/tong-guo-docker-bu-shu-doccano-biao-zhu-gong-ju/"/>
      <url>2025/02/12/tong-guo-docker-bu-shu-doccano-biao-zhu-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>上半年使用了 <code>doccano</code> 标注工具对命名实体识别任务做了标注，感觉很好用。<br>最近准备将其部署到服务器上，通过 <code>docker</code> 容器的方式进行，以便于以后可以快速部署。</p><p>许久不用也是遇到了不少问题，主要是部署好系统后，上传数据一直转圈，没有反应，后面发现是因为没有启动 <code>doccano task</code>,<br>而task需要和 <code>doccano webserver</code> 一起启动， <code>openai</code> 给我的建议是启动两个 <code>docker</code> 服务，我还是选用了常规的 <code>screen</code> 方式。</p><p>下面是自己编写的可以使用的 <code>docker-compose</code> 文件，记录在此，方便以后调用。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">version: &#39;3.8&#39;services:  doccano:    image: docker-0.unsee.tech&#x2F;python:3.9    container_name: doccano    restart: unless-stopped    volumes:      - .&#x2F;doccano_data:&#x2F;app&#x2F;doccano_data    ports:      - &quot;8000:8000&quot;    environment:      - PIP_NO_CACHE_DIR&#x3D;off    command: &gt;      sh -c &quot;apt-get update &amp;&amp; apt-get install -y screen &amp;&amp;             pip install --no-cache-dir doccano &amp;&amp;             pip install numpy&#x3D;&#x3D;1.24.0 pandas&#x3D;&#x3D;1.5.3 &amp;&amp;             doccano init &amp;&amp;             doccano createuser --username admin --password admin &amp;&amp;             screen -dmS doccano_server doccano webserver --port 8000 &amp;&amp;             screen -dmS doccano_task doccano task &amp;&amp;             tail -f &#x2F;dev&#x2F;null&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker, doccano </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在呈贡的日子——复习资料不见了</title>
      <link href="2025/02/06/zai-cheng-gong-de-ri-zi-fu-xi-zi-liao-bu-jian-liao/"/>
      <url>2025/02/06/zai-cheng-gong-de-ri-zi-fu-xi-zi-liao-bu-jian-liao/</url>
      
        <content type="html"><![CDATA[<p>又翻到了一篇当时的记录，起因是复习资料太多，不方便随身携带，我将书藏在了图书馆的顶楼消防通道（阅览室在二楼，书藏在12楼附近），结果，被保安收走了。还依稀记得，午夜的保安们打着手电筒，在过道、门窗旮旯角、花瓶后面到处翻找考研er书的情节，好一波猫鼠游戏。</p><p>下面是当时的记录：</p><blockquote><p>一早上来图书馆，发现书不见了。从7点多折腾到现在（8:55）才从管理员处拿到了我的复习资料。数了数应该是没有丢失，悬着的一颗心总算放了下来。已经过了早点的时间，早点是吃不成了。</p><p>可是接下来的晚上我应该如何安置我的书呢？住的地方离图书馆近5公里，将全部的书背进背出是断然不行的。</p><p>Plan 1:把书精减一下，每天只带当天要看的书，这样的量现阶段背进背出应该是没有问题的。只是看到一个知识点想要找参考的话，就不能了。也许我可以把书都扫描一下做成电子的，但是阅读体验怎么样呢？会不会很差？扫描也需要很多时间。</p><p>Plan2:继续冒着风险，再想办法找一个更隐蔽的地方，把书藏在图书馆内。优点：轻装出行，不累，方便随时翻阅参考，有紧迫感，有利于保持不放松的复习状态。缺点：风险大，如果再被发现，有可能拿不了书，因为有历史，在保安那里不好交代。</p><p>Plan3:对保安、物业人员进行公关，看能否将书放在其办公室或者工具室。优点：具有2的所有优点，外加零风险。缺点：公关精力耗费大，不一定能成功，从最近的接触下来，感觉难度很大。（这里的工作人员执行收书很彻底，但也并不是没有人情味，还需要一段时间来观察。）</p><p>Plan4:联合学校的同学一起向图书馆领导反映，希望能够放宽收书的条件。这个难度未知，没有尝试过，耗费精力最大。</p><p>Plan5:在就近非图书馆的地方找一个放书点，优点：不用来回搬很多书，有紧迫感。缺点：不够便捷，有丢失找不到的可能。这个需要再考察考察，再具体问题具体分析。</p><p>总记：现阶段先按Plan1执行，看看两周内对复习的影响有多大。同时在今天确认plan2是否可行(是否有更加隐蔽的放书点？）？一周内确认plan5是否可行(是否有离图书馆近的安全可靠的放书点?）两周内确认plan3是否可行(能否公关）？对plan4保持关注。</p></blockquote><p>后记：想起来，当时是暑假，座位有很大余量，不存在占位的问题。一开始保安是允许学生将书放在座位上过夜的，后来似乎是某些学生因为”好”位置一直被别人占用，得不到换位置的机会，就把问题反应给了某领导。领导大为光火，随下令禁止留书过夜，所以出现了前文 “严打”的画面。其实，这位领导，只要是稍微动点脑子，划分出一小块区域，拿几张桌子专门放书就是皆大欢喜的事儿了。</p><p>也是挺怀念，当时一点不内耗，碰到问题积极列计划，想办法的自己。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206170912.png" alt="image-20250206170909967"></p>]]></content>
      
      
      <categories>
          
          <category> 生活情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呈贡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在呈贡的日子——捞鱼河</title>
      <link href="2025/02/06/zai-cheng-gong-de-ri-zi-lao-yu-he/"/>
      <url>2025/02/06/zai-cheng-gong-de-ri-zi-lao-yu-he/</url>
      
        <content type="html"><![CDATA[<p>今日写论文写乏了，就去翻了翻以前记的笔记，翻到了在呈贡学习生活时期的记录。想当初，我为了逃避家人亲戚带来的压力、独自一人去呈贡寻求一片清净之地复习备考，时光匆匆，一晃几年过去了，令人感叹。</p><p>虽看以前记录的文字略显幼稚，但为了保证记录的真实性，我一字不落的照搬了过来，下面是当时的记录：</p><p>不知不觉就到了月末，在呈贡已经快一个月了。最近天天泡图书馆，感觉效率有点下降，而我对除校园之外的周边环境还一无所知，趁着没下雨的周六就出去看了看。</p><p>上午配置好无线AP找了个共享车就骑了出去，没多久（约30分钟）就到了滇池边上的捞鱼河公园。虽然是周末由于随时会下雨的样子，公园里面人不多，很是清静。</p><p>公园依滇池东边的湖岸线而建，因有一条小河在此注入滇池，小河里可以捞到小鱼小虾，因此取名为捞鱼河公园。</p><p>这里种植最多的要数水衫了，大片大片的水衫，行走其中，犹如身在绿海一般，令人心旷神怡。水衫对我而言并不陌生，在平原地区的湖边湿地大多有种植，但是如此密集的水衫林我是第一次见到，觉得很震撼，用密不透光来形容也一点不为过。回来的路上一直在想，在这样密集的树林中，树与树之间为何不会遮挡掉阳光，或者因竞争养料而造成某些树苗死亡呢？</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206142919.png" alt="image-20250206142908312"></p><p> 犹如身处绿海之中 令人心旷神怡（后记：在后来的日子里，这片绿色，时常出现在我的脑子里，在我心中种下了一片绿色之海）</p><p>琢磨来琢磨去，我觉得首先得益于滇池的存在，造就了周边的湿地生态，使得空气能够一直保持很高的湿度，水衫喜水喜湿，这提供了它们必要的生长条件；另外，高原地区不同平原，这里光照充足，昆明更是四季阳光明媚，单位面积上提供了比平原地区更多的光能量，所以水衫如此密集的情况下还能保持很好的长势。</p><p>比起水衫大军，公园中也种植了一些柳树，水衫的挺拔俏丽，柳条可谓千姿百态、婀娜多姿，很多柳树的根须都暴露在外，看起来像老人的胡须，只是颜色是朱红色的，远远看去还有点吓人。</p><p>在林间散落着零星的杂草，北边临近滇池的区域芦苇丛生。另外，自行车道的两边零零散散种植了一些美人蕉。</p><p>为了保护湿地，减少垃圾减轻污染，林区和芦苇荡里禁止设摊开店，栈道或步道上每相隔不远的地方就设了一个垃圾桶。这样的环境引来了不少鸟儿在此安家。水衫林里面，不时会传出猫头鹰的叫声，估计里面住了不少。芦苇和杂草从中，偶尔有野鸟飞出，运气好点的话，还能看到白天鹅在水面划水。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143043.png" alt="image-20250206143039109"></p><p>最西临湖的栈道 能够看到滇池</p><p>公园北的芦苇荡有栈道穿插其中，在最西临湖的栈道上能够欣赏到滇池的美景，很适合情侣约会闲游。公园的最南端是一小块人造砂石滩（公园的地图上叫沙滩，但是地面上铺的砂石粒径已经达到砾石的级别了，磨圆度也很差，我觉得叫砂石滩更为妥当），这里聚集了许多家长和小孩，小孩们或是嬉戏打闹，或是同家长一道眺望远方的湖面；有几个学生模样的女孩，特意化了美美的妆，穿上漂亮的衣服来这里游玩拍照，总之好不惬意。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206150910.png" alt="image-20250206143208654"></p><p>眺望远方（一）</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143304.png" alt="image-20250206143302496"></p><p> 眺望远方（二）</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143405.png" alt="image-20250206143403672"></p><p> 眺望远方（三）</p><p>（由于当时的天气并不好，上面三张照片拍得并不是很满意，后期特效也没法挽救，索性裁剪了一下就贴出了）</p><p>我过去的时候，湖边有一个大叔正蹲坐在自己的小船上，船头散落着一些小鱼，看他一个人。我好奇他的小鱼，就过去跟他聊了聊。原来大叔的鱼是刚从滇池里面捞起来的，这鱼名叫箭鱼，见风就死，不能养。他正在等着游客来买他的鱼。我们聊了不一会儿，就来了一对带小孩的家长来打听他的鱼怎么卖，后续又有不少游客凑了过来，好不热闹。大叔也不用秤，抓起小鱼颠了颠。“一共35块钱” 孩子母亲犹豫了一下，没多说就买了下来，就这样我看他很轻松就完成了一笔交易。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143520.png" alt="image-20250206143517964"></p><p>见风就死的箭鱼</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143601.png" alt="image-20250206143559093"></p><p>凑过来的游客 好不热闹</p><p>然后他又滑着小船向湖面漂去了，只见他在离岸边十多米开外的地方停了下来，然后开始收之前埋好的网。见他一连收了几个网都没啥收获，我有的不耐烦了，就往远处的亭子走去，歇了歇，之后在岸边拍起了湖水。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143701.png" alt="image-20250206143659749"></p><p>正在捕鱼的大叔</p><p>虽然近年来在各方的治理之下，滇池的水质已经有了很大的改善。但是比起我之前见过的一些湖泊来说，还是差了很多，清澈见底更是不能提。也许是因为这里是公园，人的活动比较频繁，所以导致附近区域水质不好，但愿湖中心区域水质更好点。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250206143901.png" alt="image-20250206143754522"></p><p>滇池的水（为了拍出波涛汹涌的感觉，我把镜头放得很低）</p><p>就在我忙于拍照的时候，大叔的船已经再次靠岸了。我赶忙大步走过去，看看他这次收获怎么样。可是还是晚了，等我走到跟前，他的鱼已经被一个中年人全部买了，这次捕上来的全是白鲦，不像上次的箭鱼拿上来就死了，这次的白鲦个个活蹦乱跳，比上次的还多。令我感动惊讶的是这次他一共才买25块钱。我觉得好亏，一打听才知道原来白鲦没有箭鱼值钱。</p><p>大叔很健谈，后面趁他在等游客买鱼的间隙我们又聊了许多。据他说，滇池里面除了上面的箭鱼和白鲦外，还能捕到鲢鱼、鲤鱼、黄颡鱼，其中黄颡鱼卖得最贵。捕鱼也是靠天气吃饭，下雨天风大的时候，一天到晚也网不了几条鱼；晴天风平浪静的时候就比较好网到鱼了，像这样的天气大概1小时左右就能收一次网。我跟他说他这鱼刚捞起来的，比市场上的新鲜，来玩的游客也不太会在意价钱，可以卖贵点。大叔倒是很实在，他说他出去收一波网有多有少，看着差不多的钱就卖了，他因为卖得便宜，有不少回头客嘞。</p><p>在这里捞鱼除了看天气，还得随时注意有关部门的管理人员，如果不幸被逮到一次，六七百块钱就没了，这要好几天才挣得回来。按他的说法就是跟相关人员“打游击”，打好了就能挣钱。我跟他粗略算了一下当天的收入，大概有150左右，如果每天都这样，一个月的收入就在4000上下了。</p><p>除了捕鱼之外，我对他的生活也产生了兴趣。进一步交谈中，了解到由于呈贡新城建设，大叔家已经办理了拆迁补偿手续。政府给了他们每人100平米的回迁安置房（前提是原住房有100平米，不足的额外花钱购买，价钱大概是目前市场价的4折）；另外为了让他们能尽早搬离原住房每人给10万元的补助，回迁过渡期间每人每年有1万元的生活补助，我很羡慕并表示他们碰上了好政策。可是他并不以为然，觉得以后搬去新房要交物业费，水电也比现在高，增加了生活成本，因为没有固定工作，他觉得10万块很快也会花完，所以不无担心。</p><p>他有一个儿子，今年已经高二了，按他的说法马上就要高考了，说到孩子的教育问题，他还是一种放养状态，按他的说法，能读的不管他也读得进去，不能读的打也没用。他们这里小孩上学生活费普遍给的比较充裕，一个小孩每个月光生活费就要给到一千多。我说我现在的生活费也没有一千，他笑了笑表示不信。</p><p>最后，看天已经很晚了，跟大叔道别后，我就匆匆骑车回赶了，回到云大已经接近21点了，不无收获的一天。</p><p>后记：虽然我仅在呈贡呆了半年多，在日常的生活中，我们都会觉得半年很快就过去了。直到后面我才发现，这半年的生活，给我的精神上留下了很深的烙印，一些经历历历在目。等有空的时候，再慢慢写吧。</p>]]></content>
      
      
      <categories>
          
          <category> 生活情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 呈贡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode开发技巧记录</title>
      <link href="2025/01/28/vscode-kai-fa-ji-qiao-ji-lu/"/>
      <url>2025/01/28/vscode-kai-fa-ji-qiao-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>日常编写代码中，vscode是用的最多的编辑器，经常会遇见一些问题，定期总结一下，方便以后查阅。<br><br></p><h1 id="在不能连接外网的远程服务器上用copilot"><a href="#在不能连接外网的远程服务器上用copilot" class="headerlink" title="在不能连接外网的远程服务器上用copilot"></a>在不能连接外网的远程服务器上用copilot</h1><blockquote><p>打开settings.json文件在里面添加如下内容：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&quot;remote.extensionKind&quot;: &#123;       &quot;GitHub.copilot&quot;: [&quot;ui&quot;],       &quot;GitHub.copilot-chat&quot;: [&quot;ui&quot;],   &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br><h1 id="启用latex的pdf预览"><a href="#启用latex的pdf预览" class="headerlink" title="启用latex的pdf预览"></a>启用latex的pdf预览</h1><blockquote><p>按下 Ctrl+Alt+V 快捷键，即可。<br><br></p></blockquote><h1 id="切换居中模式，令显示内容更多"><a href="#切换居中模式，令显示内容更多" class="headerlink" title="切换居中模式，令显示内容更多"></a>切换居中模式，令显示内容更多</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Toggle Centered Layout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><h1 id="使用插件快速生成cypher查询语句"><a href="#使用插件快速生成cypher查询语句" class="headerlink" title="使用插件快速生成cypher查询语句"></a>使用插件快速生成cypher查询语句</h1><h2 id="安装相关插件"><a href="#安装相关插件" class="headerlink" title="安装相关插件"></a>安装相关插件</h2><blockquote><p>首先安装两个插件：</p><ul><li>Neo4j for VS Code</li><li>Cypher Query Language</li></ul></blockquote><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><blockquote><p>安装好插件之后，按 <code>crl+shift+p</code> 弹出设置：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250128211729.png" alt="image-20250128211727292"></p><p>选择 <code>Manage Connection</code> 进行数据库配置，下面是一个简单的配置示例：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250128211911.png" alt="image-20250128211909556"></p><p>配置好后，新建一个*.cypher后缀的文件 </p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250128212040.png" alt="image-20250128212037885"></p><p>在其中输入<code>cypher</code> 命令：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250128212125.png" alt="image-20250128212122981"></p><p>按<code>crl+shift+p</code>弹出设置，选择<code>Run Cypher Statements</code> 即可运行命令，运行完之后会返回字典形式的结果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客维护日志</title>
      <link href="2025/01/28/bo-ke-wei-hu-ri-zhi/"/>
      <url>2025/01/28/bo-ke-wei-hu-ri-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>2025年02月10日 新增 “NEWS” 模块， 记录成长历程</p></li><li><p>2025年02月04日 支持评论功能, 添加<a href="https://hugenye.github.io/2020/07/21/hexo-deploy/">utterance评论系统</a> </p></li></ul><ul><li><p>2025年02月02日 更新域名为 <a href="https://ailyong.cn/">ailyong.cn</a></p></li><li><p>2025年02月01日 更新域名为 <a href="https://eggplant.wiki/">eggplant.wiki</a></p></li><li><p>2025年01月28日 更新主题为 <a href="https://github.com/fi3ework/hexo-theme-archer">Archer</a></p><ul><li>支持文章字数统计</li><li>支持文章置顶功能</li><li>支持Latex公式和Mermaid图表</li><li>更名为 ”茄子的个人空间“</li></ul></li><li><p>2025年01月 重启博客  更新域名为 <a href="https://ailyong.cn/">ailyong.cn</a> </p></li><li><p>2024年03月 原域名到期，暂停维护</p></li><li><p>2022年04月09日 更新主题为 Matery</p><ul><li>支持文章字数统计</li><li>开通donate页面</li><li>支持评论</li></ul></li><li><p>2021年02月01日 首次开通博客</p><ul><li>使用 <a href="https://hexo.io/">hexo</a> 搭建</li><li>使用 next 主题</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年底总结</title>
      <link href="2025/01/27/2024-nian-di-zong-jie/"/>
      <url>2025/01/27/2024-nian-di-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>最近一年以来，很少在技术博客上面更新文章了，一方面是很长一段时间以来，因为感情的事情，一直<br>处在低谷期，另一方面是因为博客文章的更新是一个比较耗费时间和精力的事情，并且没有比较好的读者反馈，而我开通了微信公众号，并且在上面更新一些关于户外爬山的文章，所以在技术博客上面的更新就比较少了。</p><p>博客文章的域名到期了，我也没有续费维护，一段时间里面都处于无法访问的状态。直到最近，我申请<br>云服务器的时候，顺带购买了域名，才把博客恢复了。</p><p>当我回看以前写在技术博客上的文章的时候，发现我现在掌握的比较扎实的技术，都是在博客上面整理<br>记录的内容，这让我意识到了整理记录博客的重要性，所以在接下来的时间里面，我会继续在技术博客上投入时间和精力，记录自己在技术上的成长。同时也记录下自己在生活中的一些感悟和总结。</p><p>2024年对我来说，是一个转折点。首先，我认识了现在的女朋友，她给了我很多鼓励、支持和温暖，<br>让我在情感上面有了支持，找到了生活的动力和希望，我时常在想，她一定是上帝派到我身边的天使，每想至此，幸福感油然而生，全身被一种莫名的暖意所包围。其次，在生活和个人兴趣方面，我也找到了一些<br>今后准备持续投入的方向，比如户外爬山、摄影等。这些兴趣不仅让我认识到了一些新的年轻的朋友，同时也让我从对自己的内核有了更深的认识。最后，在技术积累上面，我能够明显的感觉到前些年的点滴积累，开始发酵，让我在技术上面有了更多的自信和底气。</p><p>在2025年，我希望能够将最近一年，积累的技术和经验，整理成博客文章，对自己先前的经历有一个总结和回顾，保持对技术的热情和持续学习。理想是构建一个技术学习小组，学习巩固Ai的理论基础和实战经验，一起交流学习，共同进步。并将之前的工作，写成文章投稿发表，要以结果为导向。</p><p>在生活上面，坚持运动，继续爬山和摄影，保持对生活的热爱和激情。但是投入的时间应该不会像以往那么多了。</p><p>最近的感受就是，深感时间和精力的宝贵，努力做减法，希望将时间和精力投入到对未来5-10年有帮助的事情上面。</p>]]></content>
      
      
      <categories>
          
          <category> 生活情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Webdav服务器实现Obsidian和Zotero多端同步</title>
      <link href="2025/01/26/da-jian-webdav-fu-wu-qi-shi-xian-obsidian-he-zotero-duo-duan-tong-bu/"/>
      <url>2025/01/26/da-jian-webdav-fu-wu-qi-shi-xian-obsidian-he-zotero-duo-duan-tong-bu/</url>
      
        <content type="html"><![CDATA[<h1 id="前-言"><a href="#前-言" class="headerlink" title="前 言"></a>前 言</h1><p>很长一段时间以来，都比较苦恼自己的obsidian和zotero在多端同步的时候经常碰到问题，有时候想在手机上面查看某篇paper的时候，正好发现pdf附件没被同步，导致不能查看。加之，最近给女朋友推荐了obsidian，她觉得非常好用，但由于设备原因不能实现多端同步。她采用幕布记录笔记，再导入obsidian的方法，以实现多端同步和笔记本地保存，我认为该种方式较为繁琐，不符合技术人的气质。</p><p>思考再三，我决定好好解决多端配置的问题，网络上搜索了一圈资料下来，发现很多手机端软件均支持以Webdav协议进行文件共享，遂决定搭建Webdav协议服务器实现多端共享。</p><p>虽有坚果云等支持Webdav协议的现成云盘，但坚果云限制不少，既然要彻底解决该问题，自然不能忍受。所以决定搭建一个属于自己的Webdav协议服务器，以实现多端丝滑共享同步。</p><p>由于要和女友一起使用共享服务器，那么网上常见的单一账号的Webdav服务教程，自然不能满足要求。期望的是，分别设置user1和user2，以达到各自有不同的文件存储空间，并设置一个shared存储空间，方便共享文件，共享文件只有user1和user2能够进行编辑，但可以被guest用户查看，方便我们共享资料给朋友。</p><p>网络上面搜寻了一圈，发现Apache2能够很好的满足上述需求，并且具有想对成熟的教程资源，遂采用Apache2进行服务搭建。服务搭建的详细步骤记录如下：</p><h1 id="环境及软件版本-："><a href="#环境及软件版本-：" class="headerlink" title="环境及软件版本 ："></a>环境及软件版本 ：</h1><ul><li>服务器操作系统： Ubuntu 22.04.4 LTS</li><li>zotero版本：7.0.9</li><li>obsidian版本：Version 1.5.8</li></ul><h1 id="安装Apache2并配置webdav协议"><a href="#安装Apache2并配置webdav协议" class="headerlink" title="安装Apache2并配置webdav协议"></a><a href="https://reintech.io/blog/installing-configuring-webdav-server-ubuntu-22">安装Apache2并配置webdav协议</a></h1><p>这里，我们对一般的WebDav配置进行了扩展，以达到多用户的要求，详细内容体现在配置文件里面。</p><ol><li><p>安装 Apache2 HTTP 服务并开通webdav协议</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo apt updatesudo apt install apache2sudo systemctl enable apache2sudo systemctl start apache2sudo a2enmod dav dav_fs auth_digestsudo systemctl restart apache2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建WebDav文件夹，设置权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo mkdir -p &#x2F;var&#x2F;www&#x2F;webdav&#x2F;user1sudo mkdir -p &#x2F;var&#x2F;www&#x2F;webdav&#x2F;user2sudo mkdir -p &#x2F;var&#x2F;www&#x2F;webdav&#x2F;sharedsudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;webdavsudo chmod -R 775 &#x2F;var&#x2F;www&#x2F;webdav<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>通过上面的设置，webdav服务在服务器上面的路径为: /var/www/webdav<br>, 可以改为自己的。</p><ol start="3"><li><p>创建用户认证文件<br>根据提示输入密码并确认</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo htdigest -c &#x2F;etc&#x2F;apache2&#x2F;webdav.passwd &quot;WebDAV Realm&quot; user1sudo htdigest &#x2F;etc&#x2F;apache2&#x2F;webdav.passwd &quot;WebDAV Realm&quot; user2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取SSL证书<br>由于iso要求只能以https协议方式进行文件传输，所以要使得搭建的webdav服务能够用于电脑端和iPhone、ipad同步，必须配置SSL证书，以启用https协议。<br>SSL证书有两种获取方式，一种是自签名证书，该种证书只适合测试环境，不适合生产环境，因为简单笔者一开始采用的是该种方式，但经过了大量尝试，最终得到的自签名证书，并不能用于iso端。因此，不推荐自签名证书。<br>网络上的SSL证书颁发机构，一般仅针对于域名进行证书颁发，但是国内域名备案流程繁琐。笔者经过大量的查询，最终找到了一家可以为ip地址颁发免费证书的机构 <a href="https://app.zerossl.com/dashboard">ZeroSSL</a>，虽然一次申请使用期仅为三个月，但是足以解决燃煤之急。<br>ZeroSSL的网站上有较为详细的证书申请及使用方法，这里不做赘述。</p></li><li><p>配置WebDav<br>完成上述操作之后，我们开始对WebDav服务进行配置，打开配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo vim &#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>往配置文件中添加以下完整配置内容</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&lt;VirtualHost *:443&gt;ServerAdmin webmaster@localhostDocumentRoot &#x2F;var&#x2F;www&#x2F;webdav# 设置ssl证书，路径表示证书的存放位置# ServerName webdav.localSSLEngine onSSLCertificateFile &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;certificate.crtSSLCertificateKeyFile &#x2F;etc&#x2F;ssl&#x2F;private&#x2F;private.keySSLCertificateChainFile &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca_bundle.crtAlias &#x2F;webdav &#x2F;var&#x2F;www&#x2F;webdav&lt;Directory &#x2F;home&#x2F;webdav&gt;Options Indexes FollowSymLinksAllowOverride None# Require all granted# Dav On&lt;&#x2F;Directory&gt;&lt;Location &#x2F;webdav&#x2F;user1&gt;AuthType DigestAuthName &quot;WebDAV Realm&quot;AuthDigestProvider fileAuthUserFile &#x2F;etc&#x2F;apache2&#x2F;webdav.passwdRequire user user1Dav On&lt;&#x2F;Location&gt;&lt;Location &#x2F;webdav&#x2F;user2&gt;AuthType DigestAuthName &quot;WebDAV Realm&quot;AuthDigestProvider fileAuthUserFile &#x2F;etc&#x2F;apache2&#x2F;webdav.passwdRequire user user2Dav On&lt;&#x2F;Location&gt;# 设置共享路径的权限&lt;Location &#x2F;webdav&#x2F;shared&gt;Dav OnAllow from all&lt;LimitExcept OPTIONS GET&gt;AuthType DigestAuthName &quot;WebDAV Realm&quot;AuthDigestProvider fileAuthUserFile &#x2F;etc&#x2F;apache2&#x2F;webdav.passwdRequire valid-user&lt;&#x2F;LimitExcept&gt;&lt;LimitExcept PUT POST DELETE MOVE&gt;Require all granted&lt;&#x2F;LimitExcept&gt;&lt;&#x2F;Location&gt;ErrorLog $&#123;APACHE_LOG_DIR&#125;&#x2F;error.logCustomLog $&#123;APACHE_LOG_DIR&#125;&#x2F;access.log combined&lt;&#x2F;VirtualHost&gt;# vim: syntax&#x3D;apache ts&#x3D;4 sw&#x3D;4 sts&#x3D;4 sr noet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重启Apache2并测试</p></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用云服务器，需要在安全组中开通443端口，才能够正常访问服务。</p><ul><li>访问方式<br>  地址为 <code>http://your-server-ip/webdav</code></li><li>预期效果<ul><li>用户 <code>user1</code> 只能访问 <code>/webdav/user1</code>。</li><li>用户 <code>user2</code> 只能访问 <code>/webdav/user2</code>。</li><li>所有人均可访问 <code>/webdav/shared</code>，无需密码，但只有查看权限，user1和user2通过登录验证，有查看、编辑和删除权限。</li></ul></li></ul><h1 id="Zotero-配置"><a href="#Zotero-配置" class="headerlink" title="Zotero 配置"></a>Zotero 配置</h1><p>zotero 中的配置很简单，只要打开设置-&gt;同步，附件同步方式选择”WebDAV”填入在配置文件中设置的网址、用户名、密码即可，填写好之后通过点击”验证服务器”按钮，对服务进行验证，验证通过即表示zotero已经与服务器建立了连接。然后关闭设置界面，点击右上角的同步图标即可将文件附件同步到远程服务器。手机端和ipad端的设置类似，此处略。</p><p>值得注意的是，如果服务器ip没有获得ssl证书，或者使用自签名证书，此处将会报错，在电脑端的解决方法在<a href="https://www.zotero.org/support/kb/cert_override">这里</a>, 手机端和ipad端笔者暂未找到合适的解决方法，笔者在配置的时候，在这里耗费了大量心力，最终才找到了 <a href="https://app.zerossl.com/dashboard">ZeroSSL</a> 这个免费为ip地址颁发ssl证书的机构，并获得了ssl证书。</p><h1 id="Obsidian-配置"><a href="#Obsidian-配置" class="headerlink" title="Obsidian 配置"></a>Obsidian 配置</h1><p>obsidian 配置远程同步，主要使用了remotely-save这个插件，该插件的配置使用可以参考<a href="https://forum-zh.obsidian.md/t/topic/5291">这里</a> 和 <a href="https://forum-zh.obsidian.md/t/topic/16390">这里</a>, 细节这里不赘述。</p><p>由于我们在上述配置中，使用了htdigest生成用户密码，因此，鉴权类型要选择digest，否则连接失败。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250126211142.png" alt="image-20250126211130501"></p><p>此外，在obsidian中下载插件需要科学上网，由于手机或ipad不具备科学上网的条件，这使得无法在手机或ipad上的obsidian中安装remotely-save。一种简单的解决方法是，将手机或ipad端obsidian根目录下的.obsidian替换成电脑端obsidian根目录下的.obsidian，重启之后就会发现手机端的配置和电脑上一模一样了。</p><h1 id="其-他"><a href="#其-他" class="headerlink" title="其 他"></a>其 他</h1><p>只要能够支持WebDAV协议备份文件的App均可通过类似上述的设置，将资料备份到云端服务器，并实现多端共享访问。</p><h1 id="总-结"><a href="#总-结" class="headerlink" title="总 结"></a>总 结</h1><p>本文详细介绍了，在一台Ubuntu 22.04服务器上通过Apache2配置多用户的webdav服务，给出了经过笔者实践过的详细配置文件，并提供了获取免费ip地址ssl证书的方法。同时，给出了简单的zotero和obsidian配置指导。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentence-transformers sampler bug 之 set 不一定是无序的</title>
      <link href="2025/01/07/sentence-transformers-sampler-bug-zhi-set-bu-yi-ding-shi-wu-xu-de/"/>
      <url>2025/01/07/sentence-transformers-sampler-bug-zhi-set-bu-yi-ding-shi-wu-xu-de/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>问  题： 最近准备训练一个基于对比学习的模型， 用 huggface 的 trainer 训练器，在官方给的源代码中，有一个现成的 sampler 用于数据采样，我需要改写这个 sampler 以保证能够用于自己的数据上。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>改完之后，发现采样出来的 indices 竟然是有序的，实际在一个批次中需要打乱样本的顺序，仔细阅读了官方给的源码，发现问题出在如下图所示的 第187行。这里先用 torch.randperm生成了一个乱序的下标，然后转换为set。按理说set是无序的，转换之后也是无序的，看起来很正确。</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250107163459.png"></p><p>当我做了小测试后，发现并不是：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250107163527.png"><br>从上面的结果，可以看到：torch.randperm() 生成的序列是乱序的，但经过 set() 处理之后似乎变成了有序。</p><p>我们又做了一组测试：<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250107163635.png"><br>可以看到：当list中的元素全部是数字，且没有重复值的时候，set()出来后的序列变成了有序，而中间的那个试验，序列是无序的。</p><p>所以很多python的教程说set的无序的，这点并不具体。更加具体的说法应该是：set是一个集合，它没有序惯性质，如果任务要求的数据结构需要包含元素的序列，则不能采用set作为数据结构。上面的bug就是一个错误例子。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>我检查了一下所使用的库是最新版，找到了官方的github地址，准备提交issue。才发现官方2个月前就已经在github源码中修改这个 <a href="https://github.com/UKPLab/sentence-transformers/pull/3073">bug</a>，但是由于依赖原因，并没有提交到代码仓库。下面是修改后的版本的关键代码(关键代码在190行)：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20250107164427.png"></p><p>小结一下： 这是一个非常隐蔽的bug，如果不是因为我要实现自己的sampler，一定不会发现不同epoch中相同的batch的下标是一样的，所以说当模型性能不够好的时候，可以去溯源一下代码，看看具体的代码实现是否和自己所设想的一致。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib 设置显示中文</title>
      <link href="2025/01/06/matplotlib-xian-shi-zhong-wen/"/>
      <url>2025/01/06/matplotlib-xian-shi-zhong-wen/</url>
      
        <content type="html"><![CDATA[<p>先从网络上下载 <code>SimHei.ttf</code>  文件放在某个位置，然后用下面的代码，设置字体的位置。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import jsonimport pandas as pd# 从 data&#x2F;original&#x2F;SylvanL&#x2F;Exam&#x2F;tcm_exam_1.csv 读取数据import matplotlib.pyplot as pltfrom matplotlib import font_managerfrom matplotlib import rcParamsimport reimport matplotlib # 设置当前目录import osos.chdir(&#39;&#x2F;cpfs01&#x2F;projects-SSD&#x2F;cfff-bafab61057ac_SSD&#x2F;zyt_09215&#x2F;liyong&#x2F;TCM-EMBEDDING&#39;)my_font &#x3D; font_manager.FontProperties(fname&#x3D;&quot;fonts&#x2F;SimHei.ttf&quot;)# 全局设置字体matplotlib.rcParams[&#39;font.sans-serif&#39;]&#x3D;my_font.get_name()  # 用黑体显示中文matplotlib.rcParams[&#39;axes.unicode_minus&#39;]&#x3D;False <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><p>在需要使用中文的地方，指定上面设置好的字体</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plt.title(&quot;描述长度分布&quot;, fontproperties&#x3D;my_font)plt.xlabel(&quot;长度&quot;, fontproperties&#x3D;my_font)plt.ylabel(&quot;数量&quot;, fontproperties&#x3D;my_font)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>enjoy！ </p>]]></content>
      
      
      <categories>
          
          <category> 编程经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python多进程示例</title>
      <link href="2025/01/06/python-duo-jin-cheng-shi-li/"/>
      <url>2025/01/06/python-duo-jin-cheng-shi-li/</url>
      
        <content type="html"><![CDATA[<ol><li><p>导入依赖的包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from concurrent.futures import ProcessPoolExecutor, as_completed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义处理内容的函数，该函数要是全局函数，不能放在函数或者类里面<br>函数的参数只有一个，可以用元组包装起来，然后再解包</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">def process_record(args):    text &#x3D; args[0][&quot;text&quot;]    CONTENT &#x3D; args[1]    extract_info &#x3D; inference(text, model&#x3D;&quot;deepseek-chat&quot;, CONTENT&#x3D;CONTENT)    return &#123;        &quot;text&quot;: text,        &quot;extract_info&quot;: extract_info    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用多进程处理数据<br>在 with 下面一共有两个for，第一个for负责将数据和处理函数放在一个 futures 中， 第二个for负责处理和返回处理结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">with ProcessPoolExecutor(max_workers&#x3D;max_workers) as executor:       futures &#x3D; []       for d in data:           args &#x3D; (d, CONTENT)           futures.append(executor.submit(process_record, args))       # 使用 as_completed 迭代返回已经完成的任务       # tqdm 用于显示进度条       for idx, future in enumerate(tqdm.tqdm(as_completed(futures), total&#x3D;len(futures), desc&#x3D;&quot;Extracting info&quot;)):           result &#x3D; future.result()           new_data.append(result)           # 每完成 100 个样本，保存一次临时文件           if (idx + 1) % 500 &#x3D;&#x3D; 0:               with open(save_path, &quot;w&quot;, encoding&#x3D;&quot;utf-8&quot;) as f:                   json.dump(new_data, f, indent&#x3D;4, ensure_ascii&#x3D;False)                   print(f&quot;Extracted information from &#123;idx+1&#125; medical records, and saved to &#123;save_path&#125;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>enjoy ! </p>]]></content>
      
      
      <categories>
          
          <category> 编程经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu上安装NIVIDIA驱动和CUDA_Tookit</title>
      <link href="2023/09/12/ubuntu-shang-an-zhuang-nividia-qu-dong-he-cuda-tookit/"/>
      <url>2023/09/12/ubuntu-shang-an-zhuang-nividia-qu-dong-he-cuda-tookit/</url>
      
        <content type="html"><![CDATA[<p>每一次安装NIVIDIA驱动或CUDA Tookit时，都要经过一番折腾，才能够安装成功，这里把过程记录一下，以便以后可以参考。</p><p>本次安装遇到的最大问题是：pytorch所能支持的最高cuda版本为11.8，而安装后的cuda为最新12.2版本，pytorch没法识别cuda。<br>导致这一问题的主要原因在于两点：</p><ol><li>安装的NIVIDIA驱动版本过高，导致CUDA Tookit版本也过高，无法降级</li><li>使用网络方式安装CUDA Tookit，安装之后得到的是最新版的CUDA Tookit，不是我想要的11.8版本</li></ol><p>接下来是安装过程：</p><ul><li><p>删除已安装的NIVIDIA驱动或CUDA Tookit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo rm &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;cuda*sudo apt-get --purge remove &quot;*cublas*&quot; &quot;cuda*&quot; &quot;nsight*&quot; sudo apt-get --purge remove &quot;*nvidia*&quot;sudo apt-get autoremovesudo apt-get autocleansudo rm -rf &#x2F;usr&#x2F;local&#x2F;cuda*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看ubuntu系统版本和驱动器型号，并下载对应驱动安装</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat &#x2F;etc&#x2F;os-release # 查看系统版本lspci | grep VGA    # 查看显卡型号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  查看好版本之后，在<a href="https://www.nvidia.com/Download/Find.aspx?lang=en-us">这里</a>下载对应的驱动程序并安装。</p><p>  本次安装，服务器的版本为Ubuntu 22.04.2 LTS，显卡型号为GeForce RTX 3090.</p></li><li><p>查看驱动安装结果</p><p>  驱动程序安装好之后，使用”nividia smi”命令查看安装结果，这里如果显示错误信息，重启系统就好了。</p><p>  需要注意的是，这里出来的cuda的版本号不能大于pytorch所能支持的最大cuda版本号。</p><p>  比如这次安装的时候，pytorch所能支持的最大cuda版本号为11.8，而我安装后，这里显示的版本号是12.2，最终导致无论如何pytorch都不能识别cuda。原因就是因为这里安装的驱动太新，nividia设置成了最新的cuda toolkit,后面安装cuda toolkit软件包的时候不能降级，导致pytorch没法识别。</p><p>  在本次安装过程中，最终成功安装的驱动器版本为<a href="https://www.nvidia.com/download/driverResults.aspx/194569/en-us/">510</a>，安装成功之后查询到的cuda版本为11.04， 由于最新的pytorch支持的cuda版本为11.8，所以后面我们还需要安装11.8版本的cuda toolkit，才能让pytorch使用cuda。</p></li><li><p>安装cuda toolkit</p><p>  在<a href="https://developer.nvidia.com/cuda-toolkit-archive">这里</a>找到对应版本的cuda toolkit，点进去之后，选择操作系统、操作系统版本等信息，下载类型选择第三个，安装包下载好之后，根据提示安装就好了。</p><p>  完成之后，再用”nividia smi”查询cuda信息，这次版本应该就是pytorch支持的了。</p><p>  这里有个疑问，貌似以本次包方式，安装cuda toolkit的时候可以勾选安装nividia驱动程序，也就是说可以省去前面安装驱动这一步。</p><p>  这里遇到的<strong>大坑</strong>是，下载类型一定要选择第三个”runfile(local)”,之前好几次选择第二个”deb(network)”，安装完，一查询cuda信息，得到的都是12.2的版本， 但是pytorch不支持12.2的cuda，所以没法用。</p><p>  本次安装过程中，下载的是11.8版本的cuda toolkit,下载和安装脚本如下</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;11.8.0&#x2F;local_installers&#x2F;cuda_11.8.0_520.61.05_linux.runsudo sh cuda_11.8.0_520.61.05_linux.run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装对应版本的pytorch</p><p>  在<a href="https://pytorch.org/get-started/locally/">这里</a>找到对应的pytorch版本，然后安装就好了。</p></li></ul><ul><li><p>最后，查看cuda是否能够被pytorch识别</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">import torchprint(torch.cuda.is_available())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  如果显示为ture，则表示安装成功。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIVIDIA驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在mac上使用pybind11实现c++与python互通的demo</title>
      <link href="2023/07/23/zai-mac-shang-shi-yong-pybind11-shi-xian-c-yu-python-hu-tong-de-demo/"/>
      <url>2023/07/23/zai-mac-shang-shi-yong-pybind11-shi-xian-c-yu-python-hu-tong-de-demo/</url>
      
        <content type="html"><![CDATA[<h4 id="在mac上使用pybind11实现c-与python互通的demo"><a href="#在mac上使用pybind11实现c-与python互通的demo" class="headerlink" title="在mac上使用pybind11实现c++与python互通的demo"></a>在mac上使用pybind11实现c++与python互通的demo</h4><h5 id="0-问题描述"><a href="#0-问题描述" class="headerlink" title="0. 问题描述"></a>0. 问题描述</h5><p>下面的python代码定义了一个类，类中有一个名为analyze_data的函数，其采用递归的方法解析json格式的data数据，由于处理速度达不到要求，我们希望用c++改写该类，并封装成可供python代码调用的库，以达到加速的效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> # 待解析的数据deom data_demo &#x3D; &#123;&quot;resbody&quot;: &#123;&quot;data&quot;: &#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;address&quot;: &#123;&quot;city&quot;: &quot;New York&quot;, &quot;zipcode&quot;: 10001&#125;&#125;&#125;&#125;  # 需要转换为c++代码的类 class AnalyzeDataUtil:      def __init__(self, datas):         self.datas &#x3D; datas      def analyze_data(self, data, result&#x3D;&quot;resbody&quot;, depth&#x3D;0):         if depth &#x3D;&#x3D; 5:             return         if isinstance(data, dict):             for k, v in data.items():                 self.analyze_data(v, result + &quot;$%s&quot; % str(k), depth+1)         if isinstance(data, (list, tuple)):             for i in range(len(data)):                 self.analyze_data(data[i], result, depth+1)         else:             self.datas[result] &#x3D; str(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题分析</strong>：</p><p>根据问题描述，首先，我们要用c++对python定义的类进行改写，由于传入的变量data类型不固定，且涉及到类型判断，一种比较简单的方式是采用pybind11，它针对python的常见数据类型，都有对应的c++实现版本，代码改写工作大大减少。其次，类改写好之后，我们需要打通c++与python之间的隔阂，使用pybind11实现起来也非常方便，只需要在c++源码中添加少量代码即可。最后，我们还需要将c++源码编译成共享库，供下游代码调用。</p><h5 id="1-安装必要的工具和包"><a href="#1-安装必要的工具和包" class="headerlink" title="1. 安装必要的工具和包"></a>1. 安装必要的工具和包</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> brew install cmake conda install pybind11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：安装pybind11的时候要用conda来安装，用pip方式安装，编译的时候会报路径错误。</p><h5 id="2-创建c-源文件"><a href="#2-创建c-源文件" class="headerlink" title="2. 创建c++源文件"></a>2. 创建c++源文件</h5><p>下面的代码实现了AnalyzeDataUtil类的c++版本，第54行到第60行的作用是打通c++与python之间的隔阂。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> &#x2F;&#x2F;path: analyze_data_util&#x2F;analyze_data_util.cpp #include &lt;pybind11&#x2F;pybind11.h&gt; #include &lt;pybind11&#x2F;stl.h&gt;  namespace py &#x3D; pybind11;  struct AnalyzeDataUtil &#123; public:     AnalyzeDataUtil(py::dict datas) : datas(datas) &#123;&#125;      void analyze_data(const py::object &amp;data, std::string result &#x3D; &quot;&quot;, int depth &#x3D; 0)     &#123;          if (depth &#x3D;&#x3D; 5)             return;          if (py::isinstance&lt;py::dict&gt;(data))         &#123;             py::dict dict_data &#x3D; py::cast&lt;py::dict&gt;(data);              for (const auto &amp;item : dict_data)             &#123;                 auto key &#x3D; py::reinterpret_borrow&lt;py::object&gt;(item.first);                 auto value &#x3D; py::reinterpret_borrow&lt;py::object&gt;(item.second);                 analyze_data(value, result + &quot;$&quot; + py::str(key).cast&lt;std::string&gt;(), depth + 1);             &#125;         &#125;         if (py::isinstance&lt;py::list&gt;(data) || py::isinstance&lt;py::tuple&gt;(data))         &#123;             py::list list_data &#x3D; py::cast&lt;py::list&gt;(data);              for (const auto &amp;item : list_data)             &#123;                  analyze_data(py::cast&lt;py::object&gt;(item), result, depth + 1);             &#125;         &#125;         else         &#123;              datas[py::str(result)] &#x3D; py::str(data).cast&lt;std::string&gt;();         &#125;     &#125;      py::dict get_datas()     &#123;         return datas;     &#125;  private:     py::dict datas; &#125;;  PYBIND11_MODULE(analyze_data_util, m) &#123;     py::class_&lt;AnalyzeDataUtil&gt;(m, &quot;AnalyzeDataUtil&quot;)         .def(py::init&lt;py::dict&gt;())         .def(&quot;analyze_data&quot;, &amp;AnalyzeDataUtil::analyze_data)         .def(&quot;get_datas&quot;, &amp;AnalyzeDataUtil::get_datas); &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-创建CMakeLists-txt文件编译C-模块"><a href="#4-创建CMakeLists-txt文件编译C-模块" class="headerlink" title="4. 创建CMakeLists.txt文件编译C++模块"></a>4. 创建CMakeLists.txt文件编译C++模块</h5><p>创建文件analyze_data_util/CMakeLists.txt， 然后将下面的脚本拷贝到文件中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> cmake_minimum_required(VERSION 3.12) project(analyze_data_util LANGUAGES CXX)  set(CMAKE_CXX_STANDARD 14)  find_package(pybind11 REQUIRED)  pybind11_add_module(analyze_data_util analyze_data_util.cpp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-编译C-模块"><a href="#5-编译C-模块" class="headerlink" title="5. 编译C++模块"></a>5. 编译C++模块</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> mkdir build cd build cmake .. cmake --build .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将工作目录切换到analyze_data_util中，分别执行上面的代码。将会创建共享库文件，在Mac或Linux中名为：analyze_data_util.so，在Windows中为analyze_data_util.pyd</p><h5 id="6-构造接口"><a href="#6-构造接口" class="headerlink" title="6. 构造接口"></a>6. 构造接口</h5><p>因为在c++中不允许直接访问私有成员，因此我们实现了get_datas()方法来间接访问成员，但是这不符合python的使用习惯，因此我们构造一个同名的AnalyzeDataUtil类将这一细节隐藏起来。也可以省去该步奏，但必须通过get_datas()函数访问解析后的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> # path: demo&#x2F;analyze_data_tool.py import analyze_data_util  # Wrapper for AnalyzeDataUtil class class AnalyzeDataUtil:      def __init__(self, datas):         self.analyzer &#x3D; analyze_data_util.AnalyzeDataUtil(datas)         self.datas &#x3D; datas      def analyze_data(self, data, result&#x3D;&quot;resbody&quot;, depth&#x3D;0):            self.analyzer.analyze_data(data, result, depth)         self.datas &#x3D; self.analyzer.get_datas()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-在python中使用C-模块"><a href="#7-在python中使用C-模块" class="headerlink" title="7. 在python中使用C++模块"></a>7. 在python中使用C++模块</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"> # path: demo&#x2F;test.py from analyze_data_tool import AnalyzeDataUtil import json import time import pprint  print(&#39;示例用法,c++版本:&#39;) json_data &#x3D; &#39;&#123;&quot;resbody&quot;: &#123;&quot;data&quot;: &#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;address&quot;: &#123;&quot;city&quot;: &quot;New York&quot;, &quot;zipcode&quot;: 10001&#125;&#125;&#125;&#125;&#39; data_dict &#x3D; json.loads(json_data) time1 &#x3D; time.time() analyzer2 &#x3D; AnalyzeDataUtil(&#123;&#125;) analyzer2.analyze_data(data_dict, &quot;resbody&quot;, 0) time2 &#x3D; time.time() all_keys1 &#x3D; analyzer2.datas.keys() keys_list1 &#x3D; &#39; &#39;.join(list(all_keys1))  result &#x3D; time2 - time1 formatted_result &#x3D; f&quot;&#123;result:.10f&#125;&quot; pp.pprint(all_keys1) print(formatted_result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建以上代码，然后将生成的.so or .pyd文件拷贝到demo/目录下，运行python test.py。</p><h5 id="8-后记"><a href="#8-后记" class="headerlink" title="8. 后记"></a>8. 后记</h5><p>虽然上面的解决方案实现了c++与python的互通，但我在对单个文件进行测试比较的时候，得到如下结果：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20230723015325.png" alt="image-20230723015325241"></p><p>从结果中我们发现，对于相同的json文件，c++版本与python版本处理结果是一致的，但对于速度的提升并不理想，对于单个文件的处理c++的版本甚至比python的低，可能是因为python调用c++包的时候占用了更多的时间，因此，处理速度的提升体现不出来。针对这个问题，我们至少可以从以下两个方面进行考虑：首先，从算法层面上来看，我们可以将递归改为动态规划，或者对递归过程进行剪枝处理，因为递归虽然好用，但是效率往往不高，它重复的过程实比较多。其次，我们还可以尝试使用一些能够快速解析json格式的优秀库(比如<a href="https://rapidjson.org/zh-cn/">RapidJSON</a>)，这或许会比使用我们自己写的粗糙代码效率来的更快。</p><p>最后，虽然上面讲解中涉及到的每个脚本，我都给出了它所在的文件名和位置，但是并不直观，为了方便大家更直观的理解(我跑别人博客代码的时候，经常因为位置放错，浪费时间去调试)，我把工程目录粘贴出来：</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20230723022224.png" alt="image-20230723022223900"></p><p>以上就是使用pybind11实现c++与python互通的demo啦，希望能够帮到你，想要了解更多，可以去看下面的官方文档喔。</p><ul><li><strong>参考资料</strong><ul><li><strong>pybind11文档：</strong><a href="https://pybind11.readthedocs.io/en/stable/">https://pybind11.readthedocs.io/en/stable/</a></li><li><strong>pybind11中文文档：</strong><a href="https://github.com/charlotteLive/pybind11-Chinese-docs">https://github.com/charlotteLive/pybind11-Chinese-docs</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_c++_互通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac系统制作win10启动U盘</title>
      <link href="2022/09/07/mac-xi-tong-zhi-zuo-win10-qi-dong-u-pan/"/>
      <url>2022/09/07/mac-xi-tong-zhi-zuo-win10-qi-dong-u-pan/</url>
      
        <content type="html"><![CDATA[<h5 id="Mac系统下制作win10安装盘"><a href="#Mac系统下制作win10安装盘" class="headerlink" title="Mac系统下制作win10安装盘"></a>Mac系统下制作win10安装盘</h5><h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><ul><li><p>一台mac电脑</p></li><li><p>一个大于8G的U盘</p></li><li><p>win10镜像文件</p></li><li><p>Boot Camp ISO Converter软件（这个软件可以解决FAT32格式的u盘单个文件大小不能超过4GB的问题），下载<a href="https://macdownload.informer.com/boot-camp-iso-converter/download/">链接</a></p></li></ul><h6 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h6><ul><li><p>打开Boot Camp ISO Converter软件对下载好的iso镜像文件进行处理，目的是将镜像文件insta.win分配为大小小于4GB的文件</p></li><li><p>在插入U盘的状态下，打开终端，输入：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">diskutil list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  找到U盘对应的盘符，本例中U盘对应的盘符为：disk2</p></li><li><p>将U盘(disk2)格式化为FAT32格式</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">diskutil eraseDisk FAT32 &quot;WINDOWS10&quot; MBR disk2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>找到经过Boot Camp ISO Converter处理后的镜像文件，然后双击挂载镜像文件</p></li><li><p>输入命令，将挂载的镜像盘拷贝至U盘中(disk2)</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cp -rp &#x2F;Volumes&#x2F;CPBA_X64FRE_ZH-CN_DV9&#x2F;* &#x2F;Volumes&#x2F;WINDOWS10&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的CPBA_X64FRE_ZH是刚刚挂载的镜像的名称,大约等待10分钟，命令运行结束之后，启动盘就做好了。</p></li></ul><h6 id="win10系统安装过程中报错解决方法"><a href="#win10系统安装过程中报错解决方法" class="headerlink" title="win10系统安装过程中报错解决方法"></a>win10系统安装过程中报错解决方法</h6><p>在磁盘格式步骤可能会报“windows无法安装到这个磁盘，选中的磁盘采用的GPT/MBR分区形式”错误，解决方法有2种，这里只列举其中一种方法：</p><ul><li><p>转换磁盘格式为MBR，但是会清除所有磁盘分区</p><p>  在错误提示的时候，不要重启电脑，直接按”Shift+F10”组合键，这个时候会弹出CMD提示框，然后依次输入如下命令：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">list disk # 回车键确定；（会列出所有的磁盘，记住自己硬盘的磁盘号，通过容量大小就可以分辨了，如下图所示，磁盘0就是我们的硬盘，磁盘1就是U盘）select disk 0 # 回车键确定；（选择磁盘0，也就是我们的硬盘，就是准备做系统的硬盘）clean # 回车键确定；（清空磁盘，相当于格式化全盘）convert mbr # 回车键确定；（将该硬盘转换为mbr格式，如果想要将硬盘转化为gpt，那就是输入“convert gpt”）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h6 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="https://blog.csdn.net/h21396577548/article/details/125572053">参考链接</a></h6>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启动U盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电磁比赛总结</title>
      <link href="2022/09/05/dian-ci-bi-sai-zong-jie/"/>
      <url>2022/09/05/dian-ci-bi-sai-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>电磁比赛总结</p><p>代码总结</p><ol><li>要会静态分析资源占有率，特别是当服务器内存资源不足的时候，提前做好静态分析，设置合理的运行参数，才能提升效率。比如本次实验过程中，做数据增强预处理数据时需要占用大量内存资源，参数设置过大，会导致运行一半后因为内存不足，进程被killed掉，参数设置过小效率又变得很低。</li><li>当数据很多，需要占用大量内存时，不要将数据转换为pandas的DataFrame对象，因为它会吃掉更多的内存，此外使用apply方法对数据进行逐行处理的时候，即使使用了加速方法，也没有将数据存储为list然后使用多进程方法处理高效。在本次实验中，后者的速度至少是前者的5倍。</li><li>尽量使用class对代码进行封装，而不是使用一个个单独的函数</li><li>尽量保证函数的功能单一，这样的函数更容易被复用，多写几个函数没有关系</li><li>几种常用的保存/读取数据方式：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">  import pickle  import json  # 使用pickle  pickle.dump(data, file&#x3D;open(file_name,&quot;wb&quot;)) data &#x3D; pickle.load(file&#x3D;open(file_name, &quot;rb&quot;))  # 使用json json.dump(data, file&#x3D;open(file_name,&quot;w&quot;)) data &#x3D; json.load(file&#x3D;open(file_name, &quot;r&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>使用coment来可视化训练过程</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">  from comet_ml import Experiment  experiment &#x3D; Experiment(project_name&#x3D;args.project_name,                         api_key&#x3D;args.api_key)  experiment.log_parameters(vars(args))  with experiment.train():     experiment.log_metric(&#39;epoch_loss&#39;, train_loss, step&#x3D;epoch)  with experiment.validate():     experiment.log_metric(&#39;epoch_loss&#39;, val_loss, step&#x3D;epoch)  experiment.end()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>使用argparse来构建超参数管理入口</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">  import argparse  parser &#x3D; argparse.ArgumentParser()    parser.add_argument(&quot;--drop_data_rate&quot;, default&#x3D;0.9, type&#x3D;float,required&#x3D;False)    args &#x3D; parser.parse_args() #将参数变成可调用对象    pp.pprint(vars(args)) # 打印参数    def str2bool(v):     if v.lower() in (&#39;yes&#39;, &#39;true&#39;, &#39;t&#39;, &#39;y&#39;, &#39;1&#39;):         return True     elif v.lower() in (&#39;no&#39;, &#39;false&#39;, &#39;f&#39;, &#39;n&#39;, &#39;0&#39;):         return False     else:         raise argparse.ArgumentTypeError(&#39;Unsupported value encountered.&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注： 使用add_argument()添加参数的时候有一个大坑，=当添加参数的type为bool的时候，不能设置type=bool，需要自定义str2bool函数，然后设置type=str2bool。</p><ol start="8"><li>使用multiprocessing提高处理速度：凡是能够并行处理且数据量巨大的任务，应尽量使用多进程编程</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"> from multiprocessing import Pool from tqdm import tqdm   with Pool(n_workers) as p: # n_workers表示进程数     result &#x3D; list(tqdm(p.imap(function, data), total&#x3D;len(data))) # 这里使用tqdm显示进度条，需要调用imap，如果不用显示进度条调用map函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>使用plt将图片保存到内存中，提高处理效率</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"> from io import BytesIO import matplotlib.pyplot as plt  p_bytes &#x3D; BytesIO() #申请内存 plt.savefig(p_bytes, format&#x3D;&#39;png&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>关于采样的函数</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"> import numpy as np import random  indents &#x3D; np.random.choice(2, n,replace&#x3D;True,p&#x3D;[pro1, pro2]) # 有放回的从[0,1]中取n个值，取0的概率为pro1，取1的概率为pro2  random.shuffle(data) sample_resulut &#x3D; random.sample(data, n)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.PIL库读取图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> import PIL  img &#x3D; PIL.Image.open(image_byte) img &#x3D; img.convert(&#39;RGB&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="12"><li>plt 画散点图和图片画布设置</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"> import matplotlib.pyplot as plt  plt.rcParams[&#39;figure.figsize&#39;] &#x3D; (4, 4) # 设置图片大小  plt.rcParams[&#39;savefig.dpi&#39;] &#x3D; 56 #设置像素 plt.rcParams[&#39;figure.dpi&#39;] &#x3D; 56 #设置像素 plt.axis(&#39;off&#39;) #关闭坐标  # 多张子图 fig, axs &#x3D; plt.subplots(n, 1) for idx, dim in enumerate(range(n)):     axs[idx].axis(&#39;off&#39;)     axs[idx].scatter(x, y, s&#x3D;0.1)  # 单张子图 fig, axs &#x3D; plt.subplots(1, 1) axs.axis(&#39;off&#39;) axs.scatter(x, y, s&#x3D;0.1)  plt.savefig(file_name) # 保存到磁盘 p_bytes &#x3D; BytesIO() plt.savefig(p_bytes, format&#x3D;&#39;png&#39;) # 保存到内存 plt.cla() plt.close(&#39;all&#39;) # 清空缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程访问服务器Jupyter-Notebook</title>
      <link href="2022/04/29/yuan-cheng-fang-wen-fu-wu-qi-jupyter-notebook/"/>
      <url>2022/04/29/yuan-cheng-fang-wen-fu-wu-qi-jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h4 id="方法：-ssh远程使用jupyter-notebook"><a href="#方法：-ssh远程使用jupyter-notebook" class="headerlink" title="方法： ssh远程使用jupyter notebook"></a>方法： ssh远程使用jupyter notebook</h4><p>在远程服务器上，启动jupyter notebooks服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook --no-browser --port&#x3D;8889<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地终端中启动SSH：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh -N -f -L localhost:8888:localhost:8889 username@serverIP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中： -N 告诉SSH没有命令要被远程执行； -f 告诉SSH在后台执行； -L 是指定port forwarding的配置，远端端口是8889，本地的端口号的8888。</p><p>注意：username@serverIP替换成服务器的对应账号。</p><p>最后打开浏览器，访问：<a href="http://localhost:8888/">http://localhost:8888/</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++多线程编程</title>
      <link href="2021/12/10/c-duo-xian-cheng-bian-cheng/"/>
      <url>2021/12/10/c-duo-xian-cheng-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h4 id="常用线程函数"><a href="#常用线程函数" class="headerlink" title="常用线程函数"></a>常用线程函数</h4><ul><li><p>join() :</p><blockquote><p>阻塞主线程，让主线程等待子线程执行完，当子线程执行完毕，这个join（）就执行完毕，主线程继续执行</p></blockquote></li><li><p>detach() :</p><blockquote><p>从主线程中将子线程分离，主线程不必等待子线程执行完，一旦detach()之后子线程将失去与主线程的关联，<br>此时这个子线程就会驻留在后台运行，被c++运行时接管，当这个子线程执行完成后，由运行时库负责清理线程相关的资源。</p></blockquote></li></ul><h4 id="线程创建方法"><a href="#线程创建方法" class="headerlink" title="线程创建方法"></a>线程创建方法</h4><ul><li><p>通过函数创建线程</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;thread&gt;using  namespace  std;void do_something()&#123;    cout &lt;&lt; &quot;线程开始&quot;&lt;&lt; endl;    &#x2F;&#x2F;do something    cout &lt;&lt; &quot;线程结束&quot; &lt;&lt; endl;&#125;int main()&#123;    thread myjob (do_something);     myjob.join(); &#x2F;&#x2F;阻塞主线程，等待子线程结束    cout &lt;&lt; &quot;The End&quot; &lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过类创建线程</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;thread&gt;using  namespace  std;class  myClass&#123;private:    int data;public:    myClass(int d):data(d)&#123;        cout &lt;&lt; &quot;构造函数&quot; &lt;&lt;endl;    &#125;    myClass(const myClass&amp;myClass1):data(myClass1.data)&#123;        cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt;endl;    &#125;    ~myClass()&#123;        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt;endl;    &#125;    void operator()()&#123;        &#x2F;&#x2F;线程的入口        cout &lt;&lt; &quot;线程开始&quot; &lt;&lt;endl;&#x2F;&#x2F;        do something        cout &lt;&lt; &quot;线程结束&quot; &lt;&lt; endl;    &#125;&#125;;int main()&#123;    int a &#x3D; 10;    myClass myclass(a);    thread myjob (myclass); &#x2F;&#x2F; 复制一次myclass    myjob.join();    cout &lt;&lt; &quot;The End&quot; &lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过lambda表达式创建线程</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;thread&gt;using  namespace  std;int main()&#123;    auto myLambdaThread &#x3D; []&#123;        cout &lt;&lt; &quot;线程开始&quot; &lt;&lt; endl;&#x2F;&#x2F;        do something        cout &lt;&lt; &quot;线程结束&quot; &lt;&lt; endl;    &#125;;    thread myjob (myLambdaThread);    myjob.join();    cout &lt;&lt; &quot;The End&quot; &lt;&lt;endl;    return 0;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传递临时对象作为线程参数"><a href="#传递临时对象作为线程参数" class="headerlink" title="传递临时对象作为线程参数"></a>传递临时对象作为线程参数</h4></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;thread&gt;using  namespace  std;void do_something_with_parameters(const int&amp; a, char *buff)&#123;    cout &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; buff &lt;&lt; endl;&#x2F;&#x2F;传指针危险&#125;int main()&#123;    int val &#x3D; 1;    char buff[] &#x3D; &quot;this is a test!&quot;;    thread myjob (do_something_with_parameters, val, buff);    myjob.join(); &#x2F;&#x2F;阻塞主线程，等待子线程结束    cout &lt;&lt; &quot;The End&quot; &lt;&lt;endl;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程id"><a href="#线程id" class="headerlink" title="线程id"></a>线程id</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">获取线程id：get_id（）获取当前线程id：std::this_thread::get_id()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="线程间的值传递"><a href="#线程间的值传递" class="headerlink" title="线程间的值传递"></a>线程间的值传递</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">std::ref()std::move()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="最多可以使用的线程数"><a href="#最多可以使用的线程数" class="headerlink" title="最多可以使用的线程数"></a>最多可以使用的线程数</h4><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">std::thread::hardware_concurrency()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>将微信聊天中的语音转换为mp3</title>
      <link href="2021/09/29/jiang-wei-xin-liao-tian-zhong-de-yu-yin-zhuan-huan-wei-mp3/"/>
      <url>2021/09/29/jiang-wei-xin-liao-tian-zhong-de-yu-yin-zhuan-huan-wei-mp3/</url>
      
        <content type="html"><![CDATA[<ol><li><p>找到语音文件将其导出</p><ul><li>找到MAC微信图片，鼠标放在图片上面按下右键调出如下图所示的提示框，然后点击“在Finder中显示”，打开音频、图片等文件在本地保存的位置。</li></ul> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20210929173234.png" alt="image-20210929173226533" style="zoom:50%;" /><p> ​            这个地方需要注意的是，微信保存到本地的记录是按照聊天会话存储的，不同会话的内容保存的位置不一样。我们应该先定位到要获取音频的会话，在该会话中调出“在Finder”中显示才行。</p><ul><li><p>如下图所示Audio目录就是存储会话语音</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210929173725.png" alt="image-20210929173725735" style="zoom:45%;" /></li></ul></li></ol><ol start="2"><li><p>将silk格式文件转换为mp3格式文件</p><ul><li><p>安装silk-v3</p><p>silk-v3依赖gcc和FFmpeg来运行，如果没有这两个依赖项，通过如下命令安装依赖：</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">brew install gccbrew install ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装好依赖之后，在<a href="https://github.com/kn007/silk-v3-decoder">这里</a>将silk-v3克隆到本地电脑。</p></li><li><p>用silk-v3进行格式转换</p><p>按照<a href="https://github.com/Skylyong/silk-v3-decoder">silk-v3项目说明</a>运行命令，完成格式转换。</p><ul><li><p>转换单个文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sh converter.sh xxx.slk mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>批量转换文件夹中的多个文件</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sh converter.sh inputFolder ouputFolder mp3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul></li><li><p>参考资料</p></li></ol><p><a href="https://www.jianshu.com/p/fbccd8a52374">微信语音silk格式文件转换处理记录</a></p><p><a href="https://blog.csdn.net/henryhu712/article/details/89852514">将微信语音消息转换为 mp3</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习参考资料</title>
      <link href="2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/"/>
      <url>2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>机器学习参考资料：</p><ul><li><p>机器学习参考书籍：</p><ul><li>《神经网络与深度学习》书籍及PPT：<a href="https://nndl.github.io/">https://nndl.github.io/</a></li><li>《统计学习方法》李航著</li><li>《机器学习》周志华著</li><li>《南瓜书》：<a href="https://datawhalechina.github.io/pumpkin-book/%EF%BC%8C">https://datawhalechina.github.io/pumpkin-book/，</a> <a href="https://github.com/datawhalechina/pumpkin-book">https://github.com/datawhalechina/pumpkin-book</a></li><li>《迁移学习》杨强等著</li><li>《联邦学习》杨强等著</li><li>Python Machine Learning： <a href="https://github.com/rasbt/python-machine-learning-book">https://github.com/rasbt/python-machine-learning-book</a></li><li>深度学习：英文版（ <a href="https://www.deeplearningbook.org/%EF%BC%89%E3%80%81%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%88">https://www.deeplearningbook.org/）、中文版（</a> <a href="https://github.com/exacity/deeplearningbook-chinese%EF%BC%89">https://github.com/exacity/deeplearningbook-chinese）</a></li><li>《强化学习Reinforcement Learning（第2版）》[加]Richard S.Sutton [美]Andrew G. Barto著，俞凯等译</li></ul></li><li><p>数学类参考书籍：</p><ul><li>凸优化Convex Optimization（<a href="http://stanford.edu/~boyd/cvxbook/%EF%BC%89%E3%80%81">http://stanford.edu/~boyd/cvxbook/）、</a></li><li>线性代数 <a href="https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/index.htm">https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/index.htm</a></li><li>概率论与统计：1）斯坦福课程CS109 Probability for Computer Scientists： <a href="http://web.stanford.edu/class/cs109/%EF%BC%9B2%EF%BC%89Introduction">http://web.stanford.edu/class/cs109/；2）Introduction</a> to Probability, Statistics, and Random Processes： <a href="https://www.probabilitycourse.com/">https://www.probabilitycourse.com/</a></li></ul></li><li><p>机器学习库/平台：</p><ul><li>SKlearn（<a href="https://scikit-learn.org/stable/%EF%BC%89%EF%BC%8CSKlearn%E7%9A%84User">https://scikit-learn.org/stable/），SKlearn的User</a> Guide里总结了很多机器学习模型，可以学习下<a href="https://scikit-learn.org/stable/user_guide.html%E3%80%82%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0%E7%9A%84Python">https://scikit-learn.org/stable/user_guide.html。上面提到的Python</a> Machine Learning书籍中就大量使用SKlearn的API。</li><li>Pytorch： <a href="https://pytorch.org/tutorials/">https://pytorch.org/tutorials/</a></li><li>TensorFlow</li><li>Keras（ <a href="https://keras.io/%EF%BC%89%E7%AD%89%E3%80%82">https://keras.io/）等。</a> </li></ul></li><li><p>线上课程：</p><ul><li>吴恩达教授的视频教学课程（ <a href="https://www.coursera.org/learn/machine-learning%EF%BC%89">https://www.coursera.org/learn/machine-learning）</a></li><li>李宏毅-台湾大学（<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html%EF%BC%89">http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html）</a></li><li>Google的深度学习课程（<a href="https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187%EF%BC%89">https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187）</a></li><li>李飞飞教授的计算机视觉课程（<a href="http://cs231n.stanford.edu)/">http://cs231n.stanford.edu）</a></li><li>Richard Socher 的自然语言处理课程（<a href="http://cs224d.stanford.edu/">http://cs224d.stanford.edu</a>)</li><li> University of Chicago Mathematical Foundations of Machine Learning(<a href="https://voices.uchicago.edu/willett/teaching/mathematical-foundations-of-machine-learning-fall-2020/">https://voices.uchicago.edu/willett/teaching/mathematical-foundations-of-machine-learning-fall-2020/</a>)</li></ul></li><li><p>其他资料：</p><ul><li>Machine Learning and Artificial Intelligence and their role in networking： <a href="https://www.bilibili.com/video/av70398058/">https://www.bilibili.com/video/av70398058/</a></li><li>链接：<a href="https://pan.baidu.com/s/1qgYRbtfCLZE8d0MuCSrRLw">https://pan.baidu.com/s/1qgYRbtfCLZE8d0MuCSrRLw</a>  密码:1am4</li><li>链接：<a href="https://pan.baidu.com/s/1YAujUyivMKZcOCUxB9GZlw">https://pan.baidu.com/s/1YAujUyivMKZcOCUxB9GZlw</a> 提取码：wru7<!-- + 博客： --></li></ul></li></ul><blockquote><p>声明： 内容摘自<a href="https://tingwang1122.github.io/">王老师</a>的个人主页。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的资源</title>
      <link href="2021/09/19/you-yong-de-zi-yuan/"/>
      <url>2021/09/19/you-yong-de-zi-yuan/</url>
      
        <content type="html"><![CDATA[<p>有用的资源</p><!-- <br> --><ul><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/paper-reading.pdf">How to Read a Paper</a>, by <a href="http://blizzard.cs.uwaterloo.ca/keshav/wiki/index.php/Main_Page">Prof. Srinivasan Keshav</a>.</p></li><li><p><a href="http://dustintran.com/blog/a-research-to-engineering-workflow">A Research to Engineering Workflow</a>, by <a href="http://dustintran.com/">Dr. Dustin Tran</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/mathwriting.pdf">Mathematical Writing</a>, by <a href="https://www-cs-faculty.stanford.edu/~knuth/">Donald E. Knuth</a>,<a href="https://larrabee.soe.ucsc.edu/">Tracy Larrabee</a> and <a href="http://www.math.utah.edu/~roberts/">Paul M. Roberts</a>.</p></li></ul><!-- + [Whitesides' Group: Writing a Paper](), by [George M. Whitesides](https://gmwgroup.harvard.edu/people/george-m-whitesides). --><ul><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/review-writing.pdf">Writing reviews for systems conferences</a>, by <a href="http://people.inf.ethz.ch/troscoe/">Timothy Roscoe</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/how-to-write-a-paper.pdf">How to write a paper</a>, by <a href="http://www-edc.eng.cam.ac.uk/people/mfa2.html">Mike Ashby</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/Leading_Paper_Discussions.pdf">Pointers for Leading Paper Discussions</a>, by <a href="https://www2.eecs.berkeley.edu/Faculty/Homepages/katz.html">Randy H. Katz</a>.</p></li><li><p><a href="https://ailyong.cn/2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/">Machine Learning Materials for Beginners</a>.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信标签整理</title>
      <link href="2021/08/14/wei-xin-biao-qian-zheng-li/"/>
      <url>2021/08/14/wei-xin-biao-qian-zheng-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近对微信通讯录做了一次比较彻底的整理，记录一下。</p></blockquote><p>我根据兴趣、人生阶段、亲疏关系和生活四个维度来分类，每个维度的具体分类标签如下：</p><ul><li>按兴趣： 兴趣-户外，兴趣-跑步，兴趣-阅读，兴趣-美食等</li><li>按人生阶段划分为：中学，本科，研究生，兼职等，每一个阶段又可以做进一步划分。<ul><li>中学-同学，中学-校友，中学-老师</li><li>本科-同学，本科-校友，本科-老师</li><li>研究生-同学，研究生-校友，研究生-老师</li><li>兼职-同事，兼职-同行</li></ul></li><li>按亲疏关系可分为：<ul><li>家人</li><li>亲戚</li><li>朋友</li><li>有缘相逢</li></ul></li><li>生活涉及的东西比较杂，我是把“照相、打印和水电等”都放在了“生活便利”这一个标签里面，然后在名字上面做备注，比如“张三|打印”。此外，我把医生、法律人士做了单独的标签，最后加了一个“大佬”标签，方便时刻关注大佬的动态、向大佬靠齐。<ul><li>生活便利</li><li>生活-医务</li><li>生活-法律</li><li>大佬</li></ul></li></ul><p>分好之后才感觉这种二级分类有点繁琐，先用一段时间看看，不行的话再做优化。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具箱</title>
      <link href="2021/08/14/gong-ju-xiang/"/>
      <url>2021/08/14/gong-ju-xiang/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.jibing57.com/2019/03/24/share-ShadowsocksX-NG-to-iOS/">Mac下共享ShadowsocksX-NG的梯子给iOS</a></li><li><a href="https://www.cnblogs.com/jserhub/p/11770585.html">GitHub 设置和取消代理，加速 git clone</a></li><li><a href="https://www.zxgj.cn/g/rznl">在线智商测试</a></li></ul><ul><li><a href="https://ailyong.cn/2022/09/07/mac-xi-tong-zhi-zuo-win10-qi-dong-u-pan/">Mac系统制作win10启动U盘</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google访问助手安装</title>
      <link href="2021/08/13/google-fang-wen-zhu-shou-an-zhuang/"/>
      <url>2021/08/13/google-fang-wen-zhu-shou-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="Google访问助手安装"><a href="#Google访问助手安装" class="headerlink" title="Google访问助手安装"></a>Google访问助手安装</h3><p>今天用图书馆电脑的时候发现不能访问google，非常不方便搜索文献，因此研究了一下google上网助手，记录一下。</p><ul><li><h3 id="IGG谷歌访问助手"><a href="#IGG谷歌访问助手" class="headerlink" title="IGG谷歌访问助手"></a><a href="https://iguge.app/">IGG谷歌访问助手</a></h3><blockquote><p>该助手具有如下特点：</p><ul><li>免费提供谷歌搜索</li><li>微软onedrive加速</li><li>不包含YouTube，谷歌网盘</li></ul></blockquote></li><li><h3 id="google上网助手"><a href="#google上网助手" class="headerlink" title="google上网助手"></a><a href="https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/nonmafimegllfoonjgplbabhmgfanaka?utm_source=chrome-ntp-icon">google上网助手</a></h3><blockquote><p>该助手具备IGG谷歌访问助手的特点，但是安装的时候需要登录Chrome商店才能够下载，如果没有KX上网，建议读者选择安装“IGG谷歌访问助手”方式访问谷歌。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 干货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google访问助手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用数据集整理</title>
      <link href="2021/08/13/chang-yong-shu-ju-ji-zheng-li/"/>
      <url>2021/08/13/chang-yong-shu-ju-ji-zheng-li/</url>
      
        <content type="html"><![CDATA[<h3 id="常用数据集整理"><a href="#常用数据集整理" class="headerlink" title="常用数据集整理"></a>常用数据集整理</h3><p>前沿：所谓”巧妇难为无米之炊“，作为人工智能领域的学习者，免不了要跟数据打交道，有时候我们不得不耗费大量的精力来收集相关数据集。因此， 整理一些常用的数据集，以便不时之需。</p><h4 id="对话数据集"><a href="#对话数据集" class="headerlink" title="对话数据集"></a>对话数据集</h4><h4 id="nlp方向的生物医学"><a href="#nlp方向的生物医学" class="headerlink" title="nlp方向的生物医学"></a>nlp方向的生物医学</h4><ul><li>Symcat’s database</li><li>mz database</li><li>dxy database</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课程设计】图的创建和遍历</title>
      <link href="2021/08/13/tu-de-chuang-jian-he-bian-li/"/>
      <url>2021/08/13/tu-de-chuang-jian-he-bian-li/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>本课程设计主要完成邻接矩阵和邻接表两种不同存储方式的图的建立和遍历，其中遍历部分分别进行了DFS和BFS两种不同形式的遍历。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt; #include&lt;stack&gt;#include&lt;queue&gt;using namespace std; &#x2F;********************************图的存储结构定义***********************&#x2F;#define MaxVerNum 30           #define Vextype char#define EdgeInfoType int #define INF 999      &#x2F;&#x2F;无穷大 #define MAXSIZE 100 typedef  struct&#123;    Vextype  vexs[MaxVerNum];    EdgeInfoType edges[MaxVerNum][MaxVerNum];    int n, e;&#125;MGragh; typedef  struct node&#123;    int adjvex;    EdgeInfoType  Info;    struct node * next;&#125;EdgeNode; typedef struct vnode&#123;    Vextype  vertex;    EdgeNode *firstedge;&#125;VertexNode; typedef  struct&#123;    VertexNode  adjlist[MaxVerNum];    int   n, e;&#125;ALGraph; int visited[MaxVerNum];   &#x2F;&#x2F;顶点访问标记  &#x2F;*建立图G的邻接矩阵  *&#x2F;int returnId(MGragh *g, char c)&#123;&#x2F;&#x2F;返回c在数组中的下标    for (int i &#x3D; 0; i&lt;MaxVerNum; ++i)    &#123;        if (g-&gt;vexs[i] &#x3D;&#x3D; c) return i;    &#125;    return -1;&#125;void CreateGraph(MGragh *g)&#123;    scanf(&quot;%d %d\n&quot;, &amp;(g-&gt;n), &amp;(g-&gt;e));     char c;    int i &#x3D; 0;    while (1)    &#123;        while ((c &#x3D; getchar()) &#x3D;&#x3D; &#39; &#39;);        if (c &#x3D;&#x3D; &#39;\n&#39;) break;        g-&gt;vexs[i++] &#x3D; c;    &#125;    Vextype s, e;    EdgeInfoType cost;     for (i &#x3D; 0; i&lt;g-&gt;n; i++)    &#123;        for (int j &#x3D; 0; j&lt;g-&gt;n; j++)        &#123;            g-&gt;edges[i][j] &#x3D; 0;        &#125;    &#125;     for (int i &#x3D; 0; i&lt;g-&gt;e; ++i)    &#123;        scanf(&quot;%c %c %d\n&quot;, &amp;s, &amp;e, &amp;cost);        g-&gt;edges[returnId(g, s)][returnId(g, e)] &#x3D; cost;    &#125; &#125; &#x2F;* 根据图的邻接矩阵建立图的邻接表 *&#x2F;void CreateALGraph(MGragh *mg, ALGraph *alg)&#123;    alg-&gt;n &#x3D; mg-&gt;n; alg-&gt;e &#x3D; mg-&gt;e;    for (int i &#x3D; 0; i&lt;alg-&gt;n; ++i)    &#123;        alg-&gt;adjlist[i].vertex &#x3D; mg-&gt;vexs[i];    &#125;    int i, j;    EdgeNode *s;    for (int i &#x3D; 0; i &lt; alg-&gt;n; ++i)    &#123;        for (int j &#x3D; 0; j &lt; alg-&gt;n; ++j)        &#123;            if (mg-&gt;edges[i][j] !&#x3D; 0)            &#123;                s &#x3D; (EdgeNode*)malloc(sizeof(EdgeNode));                s-&gt;adjvex &#x3D; j;                s-&gt;Info &#x3D; mg-&gt;edges[i][j];                s-&gt;next &#x3D; NULL;                EdgeNode*p &#x3D; alg-&gt;adjlist[i].firstedge;                s-&gt;next &#x3D; p;                alg-&gt;adjlist[i].firstedge &#x3D; s;            &#125;        &#125;    &#125;&#125; &#x2F;&#x2F;打印图(邻接矩阵) void printGragh(MGragh *g)&#123;    printf(&quot;\n图G的邻接矩阵\n&quot;);    printf(&quot;顶点：\n&quot;);    for (int i &#x3D; 0; i&lt;g-&gt;n; i++)    &#123;        printf(&quot;%c\t&quot;, g-&gt;vexs[i]);    &#125;    printf(&quot;\n邻接矩阵：\n&quot;);    for (int i &#x3D; 0; i&lt;g-&gt;n; i++)    &#123;        for (int j &#x3D; 0; j&lt;g-&gt;n; j++)        &#123;            printf(&quot;%d\t&quot;, g-&gt;edges[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;&#125; &#x2F;&#x2F;打印图(邻接表) void printALGragh(ALGraph *g)&#123;    printf(&quot;\n图G的邻接表\n&quot;);     for (int i &#x3D; 0; i&lt;g-&gt;n; i++)    &#123;        printf(&quot;%c:&quot;, g-&gt;adjlist[i].vertex);         EdgeNode* edge &#x3D; g-&gt;adjlist[i].firstedge;        while (edge)        &#123;            printf(&quot;--&gt;&quot;);            printf(&quot;%d:%d\t&quot;, edge-&gt;adjvex, edge-&gt;Info);            edge &#x3D; edge-&gt;next;        &#125;        printf(&quot;%\n&quot;);    &#125; &#125;   &#x2F;**********************DFS*********************&#x2F;&#x2F;&#x2F;从顶点v开始图(邻接矩阵)的深度遍历 void DFS_MG(MGragh *g, int v)&#123;    int j;    visited[v] &#x3D; 1;    printf(&quot;%c &quot;, g-&gt;vexs[v]);     for (j &#x3D; 0; j&lt;g-&gt;n; ++j)    &#123;        if (g-&gt;edges[v][j] !&#x3D; 0  &amp;&amp;  !visited[j])            DFS_MG(g, j);    &#125; &#125; &#x2F;&#x2F;图的(邻接矩阵)的深度遍历 void DFSTranverse_MG(MGragh *g)&#123;    int i;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        visited[i] &#x3D; 0;  &#x2F;&#x2F;初始化访问数组visited的元素值为false    &#125;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        if (!visited[i])&#123; &#x2F;&#x2F;节点尚未访问            DFS_MG(g, i);        &#125;    &#125;&#125; &#x2F;&#x2F;从顶点v开始图(邻接表)的深度遍历void DFS_ALG(ALGraph *g, int v)&#123;    visited[v] &#x3D; 1;    printf(&quot;%c &quot;, g-&gt;adjlist[v].vertex);     EdgeNode *p &#x3D;g-&gt;adjlist[v].firstedge;    while (p)&#123;        if (!visited[p-&gt;adjvex])&#123;            DFS_ALG(g, p-&gt;adjvex); &#x2F;&#x2F;递归深度遍历        &#125;        p &#x3D; p-&gt;next;    &#125; &#125; &#x2F;&#x2F;图(邻接表)的深度遍历void DFSTranverse_ALG(ALGraph *g)&#123;    int i;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        visited[i] &#x3D; 0;  &#x2F;&#x2F;初始化访问数组visited的元素值为false    &#125;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        if (!visited[i])&#123; &#x2F;&#x2F;节点尚未访问            DFS_ALG(g, i);        &#125;    &#125;&#125; &#x2F;**************************BFS****************************&#x2F; &#x2F;&#x2F;从顶点v开始图(邻接矩阵)的广度遍历 void BFS_MG(MGragh *g, int v)&#123;     int j;    queue&lt;int&gt; Q;    visited[v] &#x3D; 1;    printf(&quot;%c &quot;, g-&gt;vexs[v]);     Q.push(v);     while (!Q.empty())    &#123;                    v &#x3D; Q.front();        Q.pop();         for (j &#x3D; 0; j&lt;g-&gt;n; ++j)        &#123;            if (!visited[j] &amp;&amp; g-&gt;edges[v][j] !&#x3D;0)&#x2F;&#x2F; INFINITY)            &#123;                visited[j] &#x3D; 1;                printf(&quot;%c &quot;, g-&gt;vexs[j]);                Q.push(j);            &#125;        &#125;    &#125;&#125; &#x2F;&#x2F;图(邻接矩阵)的广度遍历void BFSTranverse_MG(MGragh *g)&#123;    int i;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        visited[i] &#x3D; 0;  &#x2F;&#x2F;初始化访问数组visited的元素值为false    &#125;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        if (!visited[i])&#123; &#x2F;&#x2F;节点尚未访问            BFS_MG(g, i);        &#125;    &#125;&#125; &#x2F;&#x2F;从顶点v开始图(邻接表)的广度遍历 void BFS_ALG(ALGraph *g, int v)&#123;    queue&lt;int &gt; Q;    visited[v] &#x3D; 1;    printf(&quot;%c &quot;, g-&gt;adjlist[v].vertex);                Q.push(v);    while (!Q.empty())&#123;             v &#x3D; Q.front();        Q.pop();        EdgeNode *p &#x3D; g-&gt;adjlist[v].firstedge;        while (p)&#123;            if (!visited[p-&gt;adjvex])&#123;            visited[p-&gt;adjvex] &#x3D; 1;            printf(&quot;%c &quot;, g-&gt;adjlist[p-&gt;adjvex].vertex);                        Q.push(p-&gt;adjvex);            &#125;            p &#x3D; p-&gt;next;        &#125;    &#125; &#125; &#x2F;&#x2F;图(邻接表)的广度遍历 void BFSTranverse_ALG(ALGraph *g)&#123;    int i;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        visited[i] &#x3D; 0;  &#x2F;&#x2F;初始化访问数组visited的元素值为false    &#125;    for (i &#x3D; 0; i&lt;g-&gt;n; ++i)&#123;        if (!visited[i])&#123; &#x2F;&#x2F;节点尚未访问            BFS_ALG(g, i);        &#125;    &#125;&#125; &#x2F;************************初始化与销毁********************************&#x2F;MGragh *init_MGraph()&#123;    MGragh *mg &#x3D; (MGragh *)malloc(sizeof(MGragh));    if (mg)    &#123;        mg-&gt;n &#x3D; 0;        mg-&gt;e &#x3D; 0;    &#125;     return mg;&#125; ALGraph *init_ALGraph()&#123;    ALGraph *alg &#x3D; (ALGraph *)malloc(sizeof(ALGraph));    if (alg)    &#123;        alg-&gt;n &#x3D; 0;        alg-&gt;e &#x3D; 0;        for (int i &#x3D; 0; i&lt;MaxVerNum; i++)            alg-&gt;adjlist[i].firstedge &#x3D; NULL;    &#125;     return alg;&#125; void destroy_MGraph(MGragh **g)&#123;    if (*g)    &#123;        free(*g);        *g &#x3D; NULL;    &#125;&#125; void destroy_ALGraph(ALGraph **g)&#123;    for (int i &#x3D; 0; i &lt; (*g)-&gt;n; ++i)    &#123;        EdgeNode *p &#x3D; (*g)-&gt;adjlist[i].firstedge;        while (p)        &#123;            EdgeNode *q &#x3D; p-&gt;next;            free(p);            p &#x3D; q;        &#125;    &#125;     if (*g)    &#123;        free(*g);        *g &#x3D; NULL;    &#125;&#125; &#x2F;****main函数*************&#x2F;int main()&#123;    freopen(&quot;数据.txt&quot;, &quot;r&quot;, stdin);    &#x2F;&#x2F;创建图（邻接矩阵）     MGragh *mG &#x3D; init_MGraph();    CreateGraph(mG);    printGragh(mG);     &#x2F;&#x2F;创建图（邻接表）     ALGraph *alG &#x3D; init_ALGraph();    CreateALGraph(mG, alG);    printALGragh(alG);         &#x2F;&#x2F;DFS遍历    printf(&quot;\nDFS遍历:\n&quot;);    printf(&quot;邻接矩阵:\n&quot;);    DFSTranverse_MG(mG);    printf(&quot;\n邻接表:\n&quot;);    DFSTranverse_ALG(alG);     &#x2F;&#x2F;BFS遍历    printf(&quot;\n\nBFS遍历:\n&quot;);    printf(&quot;邻接矩阵:\n&quot;);    BFSTranverse_MG(mG);    printf(&quot;\n邻接表:\n&quot;);    BFSTranverse_ALG(alG);     &#x2F;&#x2F;销毁图    destroy_MGraph(&amp;mG);    destroy_ALGraph(&amp;alG);    &#125;&#x2F;&#x2F;运行成功 2019年5月14日0:19:36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210813224449.png" alt="img" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文写作</title>
      <link href="2021/08/13/li-bao-chun-writing-perfect-papers/"/>
      <url>2021/08/13/li-bao-chun-writing-perfect-papers/</url>
      
        <content type="html"><![CDATA[<h3 id="李葆春——Writing-Perfect-Papers"><a href="#李葆春——Writing-Perfect-Papers" class="headerlink" title="李葆春——Writing Perfect Papers"></a>李葆春——<a href="https://www.bilibili.com/video/BV18v411n7mr?share_source=copy_web">Writing Perfect Papers</a></h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210720225101.png" alt="WechatIMG19487" style="zoom:200%;" />]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVM学习笔记</title>
      <link href="2021/08/09/svm-xue-xi-bi-ji/"/>
      <url>2021/08/09/svm-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="SVM学习笔记"><a href="#SVM学习笔记" class="headerlink" title="SVM学习笔记"></a>SVM学习笔记</h2><p><a href="https://www.deeplearningbook.org/">https://www.deeplearningbook.org/</a></p><p><a href="http://page.mi.fu-berlin.de/rojas/neural/neuron.pdf">http://page.mi.fu-berlin.de/rojas/neural/neuron.pdf</a></p><p><a href="https://www.svm-tutorial.com/2014/11/svm-understanding-math-part-1/">https://www.svm-tutorial.com/2014/11/svm-understanding-math-part-1/</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas学习</title>
      <link href="2021/08/06/pandas-xue-xi/"/>
      <url>2021/08/06/pandas-xue-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Video url: <a href="https://www.youtube.com/watch?v=vmEHCJofslg">https://www.youtube.com/watch?v=vmEHCJofslg</a></p><p>Pandas document: <a href="https://pandas.pydata.org/pandas-docs/stable/reference/index.html#api">https://pandas.pydata.org/pandas-docs/stable/reference/index.html#api</a></p><p>Pracice Pandas:   <a href="https://stratascratch.com/?via=keith">https://stratascratch.com/?via=keith</a></p></blockquote><h3 id="1-Loading-data-into-Pandas"><a href="#1-Loading-data-into-Pandas" class="headerlink" title="1. Loading data into Pandas"></a>1. Loading data into Pandas</h3><blockquote><p>1.1 Loading data from csv format file</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># read data from csv format filedf &#x3D; pd.read_csv(&#39;pokemon_data.csv&#39;)print(df.head(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p> 1.2 Loading data from txt format file</p></blockquote><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"># read data from txt format filedf_txt &#x3D; pd.read_csv(&#39;pokemon_data.txt&#39;, delimiter&#x3D;&#39;\t&#39;)print(df_txt.head(3))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2-Read-Data-in-Pandas"><a href="#2-Read-Data-in-Pandas" class="headerlink" title="2. Read Data in Pandas"></a>2. Read Data in Pandas</h3><blockquote><p>2.1 Read head</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(df.columns)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.2 Read each Column</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(df[&#39;Name&#39;][0:5])print(df.Name[0:5])print(df[[&#39;Name&#39;, &#39;Type 1&#39;, &#39;HP&#39;]][0:5])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.3 Read each Row</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># print the top 4 rowsprint(df.head(4))print(df.iloc[0])for index, row in df.iterrows():    print(index, row[&#39;Name&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.4 Read a specific location(R,C)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(df.iloc[2,1])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="3-Sorting-Describing-Data"><a href="#3-Sorting-Describing-Data" class="headerlink" title="3. Sorting/Describing Data"></a>3. Sorting/Describing Data</h3><blockquote><p> 3.1 View data describe</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print(df.describe())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.2 Sorting</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sort_res &#x3D; df.sort_values([&#39;Name&#39;,&#39;HP&#39;], ascending&#x3D;[1, 0])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="4-Making-changes-to-the-data"><a href="#4-Making-changes-to-the-data" class="headerlink" title="4. Making changes to the data"></a>4. Making changes to the data</h3><blockquote><p>4.1 Create a new column</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df[&#39;Total&#39;] &#x3D; df[&#39;HP&#39;] + df[&#39;Attack&#39;]df[&#39;Total&#39;] &#x3D; df.iloc[:,4:10].sum(axis&#x3D;1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.2 Delete one column</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df &#x3D; df.drop(columns&#x3D;[&#39;Total&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="5-Save-data-to-file"><a href="#5-Save-data-to-file" class="headerlink" title="5. Save data to file"></a>5. Save data to file</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">df.to_csv(&#39;new_data.csv&#39;, index&#x3D;False, sep&#x3D;&#39;\t&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="6-Filtering-Data"><a href="#6-Filtering-Data" class="headerlink" title="6. Filtering Data"></a>6. Filtering Data</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 过滤出满足条件的数据，过滤出来的数据会保留原来的序号new_df &#x3D; df.loc[(df[&#39;Type 1&#39;] &#x3D;&#x3D; &#39;Grass&#39;) &amp; (df[&#39;Type 2&#39;] &#x3D;&#x3D; &#39;Poison&#39;)]# 将过滤出来的数据的序号进行重置new_df.reset_index(drop&#x3D;True, inplace&#x3D;True)# 过滤出“Name”列中包含“Mega”字段的数据new_df &#x3D; df.loc[~df[&#39;Name&#39;].str.contains(&#39;Mega&#39;)]# 过滤出“Type 1”列中包含“first”和“grass”字段是数据，并且不区别大小写df.loc[df[&#39;Type 1&#39;].str.contains(&#39;fire|Grass&#39;,flags&#x3D;re.I, regex&#x3D;True)] # Ignore case# 用正则表达式过滤“Name”列中满足条件的数据df.loc[df[&#39;Name&#39;].str.contains(&#39;^pi[a-z]*&#39;, flags&#x3D;re.I, regex&#x3D;True)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="7-Conditional-changes"><a href="#7-Conditional-changes" class="headerlink" title="7. Conditional changes"></a>7. Conditional changes</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 把type 1 列中满足条件(等于&#39;Fire&#39;)的内容改为Flamerdf.loc[df[&#39;Type 1&#39;] &#x3D;&#x3D; &#39;Fire&#39;, &#39;Type 1&#39;] &#x3D; &#39;Flamer&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="8-Aggregate-Statistics-Groupby"><a href="#8-Aggregate-Statistics-Groupby" class="headerlink" title="8. Aggregate Statistics(Groupby)"></a>8. Aggregate Statistics(Groupby)</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">res &#x3D; df.groupby([&#39;Type 1&#39;]).mean().sort_values(&#39;HP&#39;, ascending&#x3D;False)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="9-Working-with-large-amounts-of-data"><a href="#9-Working-with-large-amounts-of-data" class="headerlink" title="9. Working with large amounts of data"></a>9. Working with large amounts of data</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 分批读取数据，一次读100行for df in pd.read_csv(&#39;pokemon_data.csv&#39;, chunk_size&#x3D;100):    print(df)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习</title>
      <link href="2021/08/05/pytorch-xue-xi/"/>
      <url>2021/08/05/pytorch-xue-xi/</url>
      
        <content type="html"><![CDATA[<!-- ## Pytorch 框架学习 --><p>课程[链接](https: // <a href="http://www.youtube.com/">www.youtube.com</a> / watch?v = c36lUUr864M)</p><h3 id="1-Tensor"><a href="#1-Tensor" class="headerlink" title="1. Tensor"></a>1. Tensor</h3><h4 id="1-1-How-to-create-tensor"><a href="#1-1-How-to-create-tensor" class="headerlink" title="1.1 How to create tensor"></a>1.1 How to create tensor</h4><blockquote><p>构造tensor的方法主要有六种，分别如下：</p><ol><li><p>x = torch.ones(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.zeros(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.rand(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.empty(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.tensor([1,2,3], dtype=torch.float, requires_grad = True )</p></li><li><p>x_numpy = np.array([1,2,3])<br>x = torch.from_numpy(x_numpy)</p></li></ol></blockquote><h4 id="1-2-对Tensor的各种操作"><a href="#1-2-对Tensor的各种操作" class="headerlink" title="1.2 对Tensor的各种操作"></a>1.2 对Tensor的各种操作</h4><blockquote><ol><li><p>查看数据类型：x.dtype</p></li><li><p>查看size：x.size()</p></li><li><p>如果tensor只有一个值，查看实数值：x.item()</p></li><li><p>改变tensor的形状大小：x = x.view(num_row, num_col)</p></li><li><p>将tensor转为numpy: z = x.detach().numpy()</p></li></ol><p> ​       注意：numpy只能存放到cpu上面,并且不能是包含梯度的tensor，转换之后共享相同的内存</p><ol start="6"><li>构造新的不包含梯度的tensor：z = x.detach()</li></ol><ol start="7"><li>对tensor进行各种转换： .to() eg: x.to(int)</li></ol></blockquote><h4 id="1-3-基本运算"><a href="#1-3-基本运算" class="headerlink" title="1.3 基本运算"></a>1.3 基本运算</h4><blockquote><ol><li>add: z = x+y</li><li>minus: z = x-y</li><li>multi: z = x*y</li><li>div: z = x/y</li><li>切片操作：切片操作十分灵活，用到的时候查询文档</li></ol></blockquote><h3 id="2-Autograd"><a href="#2-Autograd" class="headerlink" title="2. Autograd"></a>2. Autograd</h3><h4 id="2-1-Calculate-the-gradients"><a href="#2-1-Calculate-the-gradients" class="headerlink" title="2.1 Calculate the gradients"></a>2.1 Calculate the gradients</h4><blockquote><p>用 z.backward() 来计算z关于变量的梯度，如果正向计算出来的z是一个实数值，则backward的参数为默认值就好，如果z是一个向量，则调用backward()的时候需要传入一个与z的size相同的向量.</p><p>  如下面的示例所示。</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">x &#x3D; torch.randn(3, dtype&#x3D;float, requires_grad &#x3D; True)y&#x3D;x*x+2*x+5z &#x3D; torch.mean(y)z.backward() # dz&#x2F;dx jacobian matrix to get the grad# z.backward()这一步是用雅可比矩阵来计算梯度，如果正向计算出来的z是# 一个实数值，则backward的参数为默认值就好，如果z是一个向量，则调用# backward()的时候需要传入一个与z的size相同的向量# # y &#x3D; x*x*2+x# v &#x3D; torch.tensor([1.00,0.10,0.200], dtype&#x3D;torch.float32)# y.backward(v)# print(x.grad)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-2-How-to-prevent-pytorch-from-tracking-the-history-and-calculating-this-grad-fn-attribute"><a href="#2-2-How-to-prevent-pytorch-from-tracking-the-history-and-calculating-this-grad-fn-attribute" class="headerlink" title="2.2 How to prevent pytorch from tracking the history and calculating this grad fn attribute."></a>2.2 How to prevent pytorch from tracking the history and calculating this grad fn attribute.</h4><blockquote><p>一共有三种方法让tensor不被计算图追踪梯度，分别是：</p><p>1） x.requires_grad_(False)</p><p>2） x.detach()</p><p>3） with torch.no_grad(): pass</p><p>具体示例如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x &#x3D; torch.randn(3, requires_grad &#x3D; True)print(x)# 让张量x不在追踪梯度的方法有三种# x.requires_grad_(False)# x.detach()# with torch.no_grad():with torch.no_grad():    y &#x3D; x+2    print(x) # x with grad    print(y) # y without grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="2-3-梯度累积"><a href="#2-3-梯度累积" class="headerlink" title="2.3 梯度累积"></a>2.3 梯度累积</h4><blockquote><p>调用backward()来计算梯度的时候，当前轮次的梯度，是之前所有轮次梯度的累积和，在梯度下降学习中这是我们不想看到的，可以调用zero_()函数来将梯度变为0.</p><p>示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">weights &#x3D; torch.ones(3, requires_grad&#x3D;True)for epoch in range(2):    model_output &#x3D; (weights*3).sum()    model_output.backward()    print(weights.grad)#     weights.grad.zero_()    # 输出结果为：# tensor([3., 3., 3.])# tensor([6., 6., 6.])# 第一个epoch为3，第二个epoch为6，说明梯度在累加# 因为梯度累积是我们不希望看到的，所以每次迭代的时候我们希望梯度# 能够清零，梯度清零用.grad.zero_()函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="3-Backpropagation"><a href="#3-Backpropagation" class="headerlink" title="3. Backpropagation"></a>3. Backpropagation</h3><blockquote><p>调用backward()函数来进行反向传播，计算梯度，示例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x &#x3D; torch.tensor(1, dtype&#x3D;torch.float32, requires_grad&#x3D;False)y &#x3D; torch.tensor(2, dtype&#x3D;torch.float32, requires_grad&#x3D;False)w &#x3D; torch.tensor(1, dtype&#x3D;torch.float32, requires_grad&#x3D;True)loss &#x3D; (x*w-y)**2print(loss)loss.backward()print(w.grad)## output:# tensor(1., grad_fn&#x3D;&lt;PowBackward0&gt;)# tensor(-2.)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="4-Optimize-model-with-automatic-gradient-computation"><a href="#4-Optimize-model-with-automatic-gradient-computation" class="headerlink" title="4. Optimize model with automatic gradient computation"></a>4. Optimize model with automatic gradient computation</h3><h4 id="4-1-用numpy实现回归算法"><a href="#4-1-用numpy实现回归算法" class="headerlink" title="4.1 用numpy实现回归算法"></a>4.1 用numpy实现回归算法</h4><blockquote><p>实现回归算法分为如下几步：</p><p>​    1） 数据准备</p><p>​    2）定义function</p><p>​    3）定义loss function</p><p>​    4） 定义梯度计算公式</p><p>​    5） 编写training loop部分代码</p><p>实现代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># f &#x3D; w * x # f &#x3D; 2 * x# 1. 用numpy手动实现# prepare datasetX &#x3D; np.array([1,2,3,4,5,6,7], dtype&#x3D;np.float32)y &#x3D; np.array([2,4,6,8,9,13,20], dtype&#x3D;np.float32)w &#x3D; 0.0# model predictiondef forward(x):    return w*x# loss &#x3D; MSEdef loss(y, y_pred):    return ((y_pred - y)**2).mean()# gradientdef gradient(x,y,y_pred):    return (2*x*(y_pred - y)).mean()print(f&#39;Prediction before training: f(5) &#x3D; &#123;forward(5):.5f&#125;&#39;)# Traininglearning_rate &#x3D; 0.1n_iters &#x3D; 10for i in range(n_iters):    y_pred &#x3D; forward(X)    l &#x3D; loss(y, y_pred)    dw &#x3D; gradient(x, y, y_pred)    w -&#x3D; learning_rate*dw    print(f&#39;epoch &#123;i+1&#125;: w &#x3D; &#123;w:.3f&#125;, loss &#x3D; &#123;l:.10f&#125;&#39;)print(f&#39;Prediction after training: f(5) &#x3D; &#123;forward(5):.5f&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-2-用pytorch替换数据类型和梯度计算"><a href="#4-2-用pytorch替换数据类型和梯度计算" class="headerlink" title="4.2 用pytorch替换数据类型和梯度计算"></a>4.2 用pytorch替换数据类型和梯度计算</h4><blockquote><p>代码实现思路与4.1一样，没有做任何变化。</p><p>示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 2. Do with pytorchX &#x3D; torch.tensor([1,2,3,4,5,6,10], dtype&#x3D;torch.float32)y &#x3D; torch.tensor([2,4,6,8,10,12,20], dtype&#x3D;torch.float32)w &#x3D; torch.tensor(0.0, dtype&#x3D;torch.float32, requires_grad &#x3D; True)# model predictiondef forward(x):    return w*x# loss &#x3D; MSEdef loss(y, y_pred):    return ((y_pred - y)**2).mean()print(f&#39;Prediction before training: f(5) &#x3D; &#123;forward(5):.5f&#125;&#39;)# Traininglearning_rate &#x3D; 0.0001n_iters &#x3D; 10000for i in range(n_iters):    y_pred &#x3D; forward(X)        l &#x3D; loss(y, y_pred)        l.backward()        with torch.no_grad():        w -&#x3D; learning_rate*w.grad        w.grad.zero_()        if (i+1) %1000 &#x3D;&#x3D; 0:        print(f&#39;epoch &#123;i+1&#125;: w &#x3D; &#123;w:.3f&#125;, loss &#x3D; &#123;l:.10f&#125;&#39;)print(f&#39;Prediction after training: f(5) &#x3D; &#123;forward(5):.5f&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-3-用pytorch来做梯度计算和优化"><a href="#4-3-用pytorch来做梯度计算和优化" class="headerlink" title="4.3 用pytorch来做梯度计算和优化"></a>4.3 用pytorch来做梯度计算和优化</h4><blockquote><p>4.2 我们用了backward()函数来自动计算梯度，但是梯度下降优化算法依然是我们在4.1版本中的手工编写的公式，这里我们在之前的基础上面更进一步，用pytorch框架中的optimizer来替换掉手工编写的梯度下降方法，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 1） Design model (input, output size, forward pass)# 2) Construct loss and optimizer# 3) Training loop#    - forward pass: compute prediction#    - backward pass: gradients#    - update weightimport torch.nn as nnX &#x3D; torch.tensor([[1],[2],[3],[4],[5],[6],[10]], dtype&#x3D;torch.float32)y &#x3D; torch.tensor([[2],[4],[6],[8],[10],[12],[20]], dtype&#x3D;torch.float32)x_test &#x3D; torch.tensor([5], dtype&#x3D;torch.float32)n_samples, n_features &#x3D; X.shapeprint(n_samples, n_features)input_size &#x3D; n_featuresoutput_size &#x3D; n_featuresmodel &#x3D; nn.Linear(input_size, output_size)print(f&#39;Prediction before training: f(5) &#x3D; &#123;model(x_test).item():.5f&#125;&#39;)# Traininglearning_rate &#x3D; 0.01n_iters &#x3D; 1000loss &#x3D; nn.MSELoss()optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;learning_rate)for i in range(n_iters):    y_pred &#x3D; model(X)        l &#x3D; loss(y, y_pred)        l.backward()    optimizer.step()        #     w.grad.zero_()    optimizer.zero_grad()        if (i+1) %1000 &#x3D;&#x3D; 0:        [w, b] &#x3D; model.parameters()        print(f&#39;epoch &#123;i+1&#125;: w &#x3D; &#123;w[0][0].item():.3f&#125;, loss &#x3D; &#123;l:.10f&#125;&#39;)print(f&#39;Prediction after training: f(5) &#x3D; &#123;model(x_test).item():.5f&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-4-定义更加复杂的模型"><a href="#4-4-定义更加复杂的模型" class="headerlink" title="4.4 定义更加复杂的模型"></a>4.4 定义更加复杂的模型</h4><blockquote><p>4.3 及其之前的工作，我们对model的定义都及其的简单，这里我们对model进行改进，通过自定义一个LinearRegress对象来定义一个包含两层全连接的网络建模我们的model，隐藏层的激活函数我们选用了relu()激活函数。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 1） Design model (input, output size, forward pass)# 2) Construct loss and optimizer# 3) Training loop#    - forward pass: compute prediction#    - backward pass: gradients#    - update weightimport torch.nn as nnX &#x3D; torch.tensor([[1],[2],[3],[4],[5],[6],[10]], dtype&#x3D;torch.float32)y &#x3D; torch.tensor([[2],[4],[6],[8],[10],[12],[20]], dtype&#x3D;torch.float32)x_test &#x3D; torch.tensor([5], dtype&#x3D;torch.float32)n_samples, n_features &#x3D; X.shapeprint(n_samples, n_features)input_size &#x3D; n_featuresoutput_size &#x3D; n_features# model &#x3D; nn.Linear(input_size, output_size)class LinearRegress(nn.Module):    def __init__(self, input_size, output_size):        super(LinearRegress, self).__init__()        # define layers        self.lin1 &#x3D; nn.Linear(input_size, 2)        self.lin2 &#x3D; nn.Linear(2, output_size)    def forward(self, x):        x &#x3D;  self.lin1(x)        x &#x3D; torch.relu(x)        return self.lin2(x)        model &#x3D; LinearRegress(input_size, output_size)print(f&#39;Prediction before training: f(5) &#x3D; &#123;model(x_test).item():.5f&#125;&#39;)# Traininglearning_rate &#x3D; 0.01n_iters &#x3D; 1000loss &#x3D; nn.MSELoss()optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;learning_rate)for i in range(n_iters):    y_pred &#x3D; model(X)        l &#x3D; loss(y, y_pred)        l.backward()    optimizer.step()        #     w.grad.zero_()    optimizer.zero_grad()        if (i+1) %1000 &#x3D;&#x3D; 0:#         [w, b] &#x3D; model.parameters()#         print(f&#39;epoch &#123;i+1&#125;: parameters &#x3D; &#123;model.parameters()&#125;, loss &#x3D; &#123;l:.10f&#125;&#39;)        for parameters in model.parameters():            print(parameters)        print(f&#39;Prediction after training: f(5) &#x3D; &#123;model(x_test).item():.5f&#125;&#39;)# Now pytorch can do most of the work for us, of course we still have to design our model# and have to know which loss and optimizer we want to use but we don&#39;t have to worry about# the underlying algorithms anymore.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="4-5-综合示例1"><a href="#4-5-综合示例1" class="headerlink" title="4.5 综合示例1"></a>4.5 综合示例1</h4><blockquote><p>学习完了4.1-4.3的内容，我们对如何手工建模一个模型有了初步的了解，并且知道了pytorch建模深度学习的一般过程，以及它对应的每一个部分的作用，下面我们通过一个综合的示例来加深对所学知识的理解。</p><p>在该示例中，我们首先调用sklearn的datasets库来构建带噪声的逻辑回归数据集，然后构造一个线性模型，并对线性模型进行训练。代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 5. 综合示例1import torchimport torch.nn as nnimport numpy as npfrom sklearn import datasetsimport matplotlib.pyplot as plt# 0) create datax_numpy, y_numpy &#x3D; datasets.make_regression(n_samples&#x3D;500, n_features&#x3D;1, noise&#x3D;20, random_state&#x3D;1)x,y &#x3D; torch.from_numpy(x_numpy.astype(np.float32)), torch.from_numpy(y_numpy.astype(np.float32))# print(x.shape)# print(y.shape)y &#x3D; y.view(y.shape[0], -1)# print(y.shape)n_sample, n_features &#x3D; x.shape# 1) modelinput_size &#x3D; n_featuresoutput_size &#x3D; 1model &#x3D; nn.Linear(input_size, output_size)# 2）loss and optimizerlearning_rate &#x3D; 0.01criterion &#x3D; nn.MSELoss()optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;learning_rate)# 3) training loopnum_epochs &#x3D; 1000num_iter &#x3D; 100for epoch in range(num_epochs): # foreard pass and loss y_pred &#x3D; model(x) loss &#x3D; criterion(y_pred, y) # backward pass loss.backward() # updata optimizer.step() optimizer.zero_grad() if(epoch+1)%num_iter &#x3D;&#x3D; 0:     print(f&#39;epoch:&#123;epoch+1&#125;, loss&#x3D;&#123;loss.item():.4f&#125;&#39;)# plotpredicted &#x3D; model(x).detach().numpy()plt.plot(x_numpy, y_numpy, &#39;ro&#39;)plt.plot(x_numpy, predicted, &#39;b&#39;)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805210347.png" alt="image-20210805210341931" style="zoom:50%;" /></blockquote><h4 id="4-6-综合示例2"><a href="#4-6-综合示例2" class="headerlink" title="4.6  综合示例2"></a>4.6  综合示例2</h4><blockquote><p>之前的示例中我们没有对训练后的模型进行测试，在这个例子中我们增加了模型测试，并且调用sklearn中内置的“乳腺癌”数据集来完成示例，并且对输入特征做了归一化处理。</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 5. 综合示例2import torchimport torch.nn as nnimport numpy as npfrom sklearn import datasetsfrom sklearn.preprocessing import StandardScalerfrom sklearn.model_selection import train_test_split# 0) prepare databc &#x3D; datasets.load_breast_cancer()X,y &#x3D; bc.data, bc.targetn_samples, n_features &#x3D; X.shape# print(X.shape)# print(y.shape)X_train, X_test, y_train, y_test &#x3D; train_test_split(X,y,test_size&#x3D;0.2, random_state&#x3D;1234)# scale 对每一列的特征做均值方差归一化处理，如果不做的话学习出来的模型的准确率大大降低sc &#x3D; StandardScaler()# print(&#39;X_test before transform:&#39;, X_test)X_train &#x3D; sc.fit_transform(X_train)X_test &#x3D; sc.fit_transform(X_test)# print(&#39;X_test after transform:&#39;, X_test.mean(), X_test.std())X_train &#x3D; torch.from_numpy(X_train.astype(np.float32))X_test &#x3D; torch.from_numpy(X_test.astype(np.float32))y_train &#x3D; torch.from_numpy(y_train.astype(np.float32))y_test &#x3D; torch.from_numpy(y_test.astype(np.float32))y_train &#x3D; y_train.view(y_train.shape[0], 1)y_test &#x3D; y_test.view(y_test.shape[0], 1)# 1) model# f &#x3D; wx + b, sigmoid at the endclass LogisticRegression(nn.Module):    def __init__(self, n_input_features):        super(LogisticRegression, self).__init__()        self.linear &#x3D; nn.Linear(n_input_features, 1)            def forward(self, x):        y_pred &#x3D; torch.sigmoid(self.linear(x))        return y_pred    model &#x3D; LogisticRegression(n_features)# 2) loss and optimizerlearning_rate &#x3D; 0.001criterion &#x3D; nn.BCELoss()optimizer &#x3D; torch.optim.SGD(model.parameters(), lr &#x3D; learning_rate)# 3) training loopnum_epochs &#x3D; 1000for epoch in range(num_epochs):    # foreard pass and loss    y_pred &#x3D; model(X_train)    loss &#x3D; criterion(y_pred, y_train)    # backward pass    loss.backward()        # updates    optimizer.step()        optimizer.zero_grad()        if(epoch+1) % 100 &#x3D;&#x3D; 0:        print(f&#39;epoch:&#123;epoch+1&#125;, loss &#x3D; &#123;loss.item():.4f&#125;&#39;)        with torch.no_grad():    y_pred &#x3D; model(X_test)    y_pred_cls &#x3D; y_pred.round() # 对sigmoid出来的值进行四舍五入#     print(f&#39;y_pred&#x3D;&#123;y_pred&#125;, y_pred_cls&#x3D;&#123;y_pred_cls&#125;&#39;)    acc &#x3D; y_pred_cls.eq(y_test).sum()&#x2F;float(y_test.shape[0])    print(f&#39;acc &#x3D; &#123;acc:.4f&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="5-Dataset-and-Dataload-Class"><a href="#5-Dataset-and-Dataload-Class" class="headerlink" title="5. Dataset and Dataload Class"></a>5. Dataset and Dataload Class</h3><h4 id="5-1-Dataset-and-Dataload"><a href="#5-1-Dataset-and-Dataload" class="headerlink" title="5.1 Dataset and Dataload"></a>5.1 Dataset and Dataload</h4><blockquote><p>pytorch中由dataset类管理数据集，可以通过继承dataset类来自定义数据集，代码模板如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">class MyDataset(Dataset):def __init__(self): passdef __getitem__(self, index): return a signel datadef __len__(self): return length of dataset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义好dataset之后，可以通过DataLoader来构造可供训练的迭代器，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dataloader &#x3D; DataLoader(dataset&#x3D;dataset, batch_size&#x3D;4, shuffle&#x3D;True, num_workers&#x3D;2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例如下所示：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;epoch &#x3D; 1 forward and backward pass of ALL training samplesbach_size &#x3D; number of training samples in one forward &amp; backward passnumber of iterations &#x3D; number of passes, each pass using [batch_size] number of samplese.g. 100 samples, batch_size &#x3D; 20 --&gt; 100&#x2F;20 &#x3D; 5 iterations for 1 epoch&#39;&#39;&#39;import torchimport torchvisionfrom torch.utils.data import Dataset, DataLoaderimport numpy as npimport mathimport osif not os.getcwd().endswith(&#39;pytorchLearning&#39;): os.chdir(os.getcwd()+&#39;&#x2F;Desktop&#x2F;pytorchLearning&#39;)# print (os.getcwd())class WineDataset(Dataset): def __init__(self):     # data loading     xy &#x3D; np.loadtxt(&#39;.&#x2F;data&#x2F;wine&#x2F;wine.csv&#39;, delimiter&#x3D;&#39;,&#39;, dtype&#x3D;np.float32, skiprows&#x3D;1)     self.x &#x3D; torch.from_numpy(xy[:,1:])     self.y &#x3D; torch.from_numpy(xy[:, [0]])     self.n_samples &#x3D; xy.shape[0] def __getitem__(self, index):     return self.x[index], self.y[index] def __len__(self):     return self.n_samples# # How we can use dataset# dataset &#x3D; WineDataset()# first_data &#x3D; dataset[0]# features, label &#x3D; first_data# print(features, label)## # How we can use dataload# dataloader &#x3D; DataLoader(dataset&#x3D;dataset, batch_size&#x3D;4, shuffle&#x3D;True, num_workers&#x3D;2)## dataiter &#x3D; iter(dataloader)# data &#x3D; dataiter.next()# features, label &#x3D; data# print(features, label)dataset &#x3D; WineDataset()dataloader &#x3D; DataLoader(dataset&#x3D;dataset, batch_size&#x3D;4, shuffle&#x3D;True, num_workers&#x3D;2)# training loopnum_epochs&#x3D;2total_samples &#x3D; len(dataset)n_iterations &#x3D; math.ceil(total_samples&#x2F;4)print(total_samples, n_iterations)for epoch in range(num_epochs): for i,(inputs, label) in enumerate(dataloader):     # forward backward, update     if (i+1) % 5 &#x3D;&#x3D; 0:         print(f&#39;epoch &#123;epoch+1&#125;&#x2F;&#123;num_epochs&#125;, step &#123;i+1&#125;&#x2F;&#123;n_iterations&#125;, inputs &#123;inputs.shape&#125;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="5-2-Transforms-for-the-dataset"><a href="#5-2-Transforms-for-the-dataset" class="headerlink" title="5.2 Transforms for the dataset"></a>5.2 Transforms for the dataset</h4><blockquote><p>pytorch通过传入transforms类来对输入的数据进行某种变化，transforms类可以调用库定义好的，也可以根据需要自定义。</p><p>示例代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;Transforms can be applied to PIL images, tensor, ndarrays, or custom dataduring criterion of the datasetcomplete list of built-in transforms:https:&#x2F;&#x2F;pytorch.org&#x2F;docs&#x2F;stable&#x2F;torchvision&#x2F;transforms.htmlOn images---------CenterCrop, Grayscale, Pad, RandomAffine,RandomCrop, RandomHorizontalFlip, RandomHorizonResize, scaleOn Tensors----------LinearTransformation, Normalize, RandomErasingConversion----------ToPILIamage: from tensor or ndarrayToTensor: from numpy.ndarray or PILImageGeneric-------Use LambdaCustom------Write own ClassCompose mutiple Transforms--------------------------composed &#x3D; transforms.Compose([Rescale(256),                                RandomCrop(224)])torchvision.transforms.Rescale(256)torchvision.transforms.ToTensor()&#39;&#39;&#39;import torchimport torchvisionfrom torch.utils.data import Datasetimport numpy as npclass WineDataset(Dataset):    def __init__(self, transform&#x3D;None):        xy &#x3D; np.loadtxt(&#39;.&#x2F;data&#x2F;wine&#x2F;wine.csv&#39;, delimiter&#x3D;&#39;,&#39;, dtype&#x3D;np.float32, skiprows&#x3D;1)        self.n_samples &#x3D; xy.shape[0]        # note that we do not convert to tensor here        self.x &#x3D; xy[:,1:]        self.y &#x3D; xy[:, [0]]        self.transform &#x3D; transform    def __getitem__(self, index):        sample &#x3D; self.x[index], self.y[index]        if self.transform:            sample &#x3D; self.transform(sample)        return sample    def __len__(self):        return self.n_samplesclass ToTensor:    def __call__(self, sample):        inputs, targets &#x3D; sample        return torch.from_numpy(inputs), torch.from_numpy(targets)class MulTransform:    def __init__(self, factor):        self.factor &#x3D; factor    def __call__(self, sample):        inputs, target &#x3D; sample        inputs *&#x3D; self.factor        return inputs, targetdataset &#x3D; WineDataset(transform&#x3D;ToTensor())first_data &#x3D; dataset[0]features, label &#x3D; first_dataprint(features)print(type(features), type(label))composed &#x3D; torchvision.transforms.Compose([ToTensor(), MulTransform(2)]) # 把两个transforms合并一起应用dataset &#x3D; WineDataset(transform&#x3D;composed)first_data &#x3D; dataset[0]features, label &#x3D; first_dataprint(features)print(type(features), type(label))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="6-Softmax-and-Cross-Entropy"><a href="#6-Softmax-and-Cross-Entropy" class="headerlink" title="6. Softmax and Cross-Entropy"></a>6. Softmax and Cross-Entropy</h3><h4 id="6-1-Softmax"><a href="#6-1-Softmax" class="headerlink" title="6.1 Softmax"></a>6.1 Softmax</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Softmaximport torchimport torch.nn as nnimport numpy as npdef softmax(x):    return np.exp(x) &#x2F; np.sum(np.exp(x), axis&#x3D;0)x &#x3D; np.array([-2, 1, 0.1])outputs &#x3D; softmax(x)print(&#39;softmax numpy:&#39;, outputs)x &#x3D; torch.from_numpy(x)outputs &#x3D; torch.softmax(x, axis&#x3D;0)print(&#39;softmax torch:&#39;, outputs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-Cross-entropy"><a href="#6-2-Cross-entropy" class="headerlink" title="6.2 Cross entropy"></a>6.2 Cross entropy</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Cross entropydef cross_entropy(actual, predicted):    return -np.sum(actual*np.log(predicted)).mean()# y must be one hot encoded# if class 0: [1 0 0]# if class 1: [0 1 0]# if class 2: [0 0 1]Y &#x3D; np.array([1,0,0])# y_pred has probabilitiesy_pred_good &#x3D; np.array([0.7,0.2,0.1])y_pred_bad &#x3D; np.array([0.1, 0.3, 0.6])l1 &#x3D; cross_entropy(Y, y_pred_good)l2 &#x3D; cross_entropy(Y, y_pred_bad)print(f&#39;Loss1 numpy:&#123;l1:.4f&#125;&#39;)print(f&#39;Loss2 numpy:&#123;l2:.4f&#125;&#39;)# cross entropy by pytorch# in pytorch: Use nn.CrossEntropyLoss()# No softmax at the end!loss &#x3D; nn.CrossEntropyLoss()# nsamples x nclasses &#x3D; 1x3y &#x3D; torch.tensor([0])y_pred_good &#x3D; torch.tensor([[2.0, 1.0, 0.1]])y_pred_bad &#x3D; torch.tensor([[0.5, 2.0, 0.3]])l1 &#x3D; loss(y_pred_good, y)l2 &#x3D; loss(y_pred_bad, y)print(f&#39;Loss1 numpy:&#123;l1:.4f&#125;&#39;)print(f&#39;Loss2 numpy:&#123;l2:.4f&#125;&#39;)_, prediction1 &#x3D; torch.max(y_pred_good, 1)_, prediction2 &#x3D; torch.max(y_pred_bad, 1)print(prediction1)print(prediction2)# 3 samplesy &#x3D; torch.tensor([2,0,1])y_pred_good &#x3D; torch.tensor([[0.1, 1.0, 2.0],                            [2.0, 1.0, 0.5 ],                            [0.1, 2.0, 1.0]])y_pred_bad &#x3D; torch.tensor([[2.0, 1.0, 0.1],                            [1.0, 0.1, 2.0 ],                            [0.1, 1.0, 2.0]])l1 &#x3D; loss(y_pred_good, y)l2 &#x3D; loss(y_pred_bad, y)print(f&#39;Loss1 numpy:&#123;l1.item():.4f&#125;&#39;)print(f&#39;Loss2 numpy:&#123;l2.item():.4f&#125;&#39;)_, prediction1 &#x3D; torch.max(y_pred_good, 1)_, prediction2 &#x3D; torch.max(y_pred_bad, 1)print(prediction1)print(prediction2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Activation-function"><a href="#7-Activation-function" class="headerlink" title="7. Activation function"></a>7. Activation function</h3><blockquote><p>Activation functions apply a non-linear transform and decide whether a neural should be activated or not.</p><h4 id="Most-popular-activation-functions"><a href="#Most-popular-activation-functions" class="headerlink" title="Most popular activation functions"></a>Most popular activation functions</h4><ol><li>Step function –&gt; Not used in practice</li><li>Sigmoid</li><li>TanH</li><li>ReLU</li><li>Leaky ReLU</li><li>Softmax</li></ol></blockquote><h3 id="8-综合练习-MNIST"><a href="#8-综合练习-MNIST" class="headerlink" title="8. 综合练习 MNIST"></a>8. 综合练习 MNIST</h3><blockquote><ol><li><p>MNIST</p></li><li><p>DataLoader, Transformation</p></li><li><p>Multilayer Neural Net, activation function</p></li><li><p>Loss and Optimizer</p></li><li><p>Tra</p><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchimport torch.nn as nnimport torchvisionimport torchvision.transforms as transformsimport matplotlib.pyplot as pltimport torch.nn.functional as Fimport math                                 # device configfrom torch.optim import optimizer                                 device &#x3D;torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)                                 # hyper parametersinput_size &#x3D; 784 # 28x28hidden_size &#x3D; 128num_classes &#x3D; 10num_epochs &#x3D; 2batch_size &#x3D; 100learning_rate &#x3D; 0.001                                 # MNIST DataSettrain_dataset &#x3D; torchvision.datasets.MNIST(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;True,                                           transform&#x3D;transforms.ToTensor(),download&#x3D;True)test_dataset &#x3D; torchvision.datasets.MNIST(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;False,                                           transform&#x3D;transforms.ToTensor())train_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;train_dataset,batch_size&#x3D;batch_size,                                           shuffle&#x3D;True)test_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;test_dataset,batch_size&#x3D;batch_size,                                           shuffle&#x3D;False)examples &#x3D; iter(train_loader)features, label &#x3D; examples.next()print(features.shape)print(label.shape)                                 for i in range(6):    plt.subplot(2,3, i+1)    plt.imshow(features[i][0], cmap&#x3D;&#39;gray&#39;)plt.show()                                 # modelclass NeuralNet(nn.Module):    def __init__(self, input_size, hidden_size, num_classes):        super(NeuralNet, self).__init__()        self.l1 &#x3D; nn.Linear(input_size, hidden_size)        self.l2 &#x3D; nn.Linear(hidden_size, num_classes)                                     def forward(self, x):        out &#x3D; F.relu(self.l1(x))        out &#x3D; self.l2(out)        return out                                 model &#x3D; NeuralNet(input_size, hidden_size, num_classes)# loss and optimizercriterion &#x3D; nn.CrossEntropyLoss()optimizer &#x3D; torch.optim.Adam(model.parameters(), lr&#x3D;learning_rate)                                 # training loopn_total_steps &#x3D; len(train_loader)for epoch in range(num_epochs):    for i, (images, label) in enumerate(train_loader):        # 100, 1, 28, 28        # 100, 784        images &#x3D; images.reshape(-1, 28*28).to(device)        label &#x3D; label.to(device)                                         # forward        outputs &#x3D; model(images)        loss &#x3D; criterion(outputs, label)                                         # backward        loss.backward()        optimizer.step()        optimizer.zero_grad()                                         if (i+1) % 100 &#x3D;&#x3D;0:            print(f&#39;epoch &#123;epoch+1&#125; &#x2F; &#123;num_epochs&#125;, step &#123;i+1&#125; &#x2F; &#123;n_total_steps&#125;, loss &#123;loss.item():.4f&#125;&#39;)                                 # testwith torch.no_grad():    n_correct &#x3D; 0    n_sample &#x3D; 0    for images, label in test_loader:        images &#x3D; images.reshape(-1, 28*28).to(device)        label &#x3D; label.to(device)        outputs &#x3D; model(images)        # print(outputs)                                         # value, index        _, prdiction &#x3D; torch.max(outputs, 1)        n_correct +&#x3D; torch.sum(torch.eq(prdiction, label)).item()        n_sample +&#x3D; label.shape[0]                                     print(f&#39;Acc: &#123;100.0*n_correct &#x2F; n_sample&#125;&#39;)                                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805213343.png" alt="image-20210805213343033" style="zoom:50%;" /></li></ol></blockquote><h3 id="9-Convolutional-Neural-Net-CNN"><a href="#9-Convolutional-Neural-Net-CNN" class="headerlink" title="9.  Convolutional Neural Net(CNN)"></a>9.  Convolutional Neural Net(CNN)</h3><blockquote><p>这里我们通过构造CNN模型并对图片进行分类，采用“CIFAR10”数据集，然后自定义Model，调用“交叉熵损失函数”和“SGD”优化器来对模型训练，模型训练结束之后对分类器的分类准确率进行了测试。</p><p>实验代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchimport torch.nn as nnimport torchvisionimport torchvision.transforms as transformsimport matplotlib.pyplot as pltimport numpy as npimport torch.nn.functional as F# device configdevice &#x3D;torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)# hyper parametersnum_epochs &#x3D; 4batch_size &#x3D; 4learning_rate &#x3D;0.001# dataset has PILImage images of range[0,1]# We transform them to Tensor of normalised range[-1, 1]transform &#x3D; transforms.Compose(    [        transforms.ToTensor(),        transforms.Normalize((0.5, 0.5, 0.5),(0.5, 0.5, 0.5))    ])train_dataset &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;True,                                             download&#x3D;True, transform&#x3D;transform)test_dataset &#x3D; torchvision.datasets.CIFAR10(root&#x3D;&#39;.&#x2F;data&#39;, train&#x3D;False,                                             download&#x3D;True, transform&#x3D;transform)train_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;train_dataset, batch_size&#x3D;batch_size,                                           shuffle&#x3D;True)test_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;test_dataset, batch_size&#x3D;batch_size,                                           shuffle&#x3D;False)classes &#x3D;(&#39;plane&#39;, &#39;car&#39;,&#39;bird&#39;,&#39;cat&#39;,&#39;deer&#39;,&#39;dog&#39;,&#39;frog&#39;,          &#39;horse&#39;,&#39;ship&#39;,&#39;truck&#39;)def imshow(img):    img &#x3D; img &#x2F; 2 + 0.5  # unnormalize    npimg &#x3D; img.numpy()    plt.imshow(np.transpose(npimg, (1, 2, 0)))    plt.show()# modelclass ConvNet(nn.Module):    def __init__(self):        super(ConvNet, self).__init__()        self.conv1 &#x3D; nn.Conv2d(3,6,5)        self.pool &#x3D; nn.MaxPool2d(2,2)        self.conv2 &#x3D; nn.Conv2d(6,16,5)        self.fc1 &#x3D; nn.Linear(16*5*5, 120)        self.fc2 &#x3D; nn.Linear(120, 84)        self.fc3 &#x3D; nn.Linear(84, 10)    def forward(self,x):        x &#x3D; self.pool( F.relu(self.conv1(x)))        x &#x3D; self.pool(F.relu(self.conv2(x)))        x &#x3D; x.view(-1,16*5*5)        x &#x3D; F.relu(self.fc1(x))        x &#x3D; F.relu(self.fc2(x))        x &#x3D; self.fc3(x)        return xmodel &#x3D; ConvNet().to(device)criterion &#x3D; nn.CrossEntropyLoss()optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;learning_rate)n_total_steps &#x3D; len(train_loader)for epoch in range(num_epochs):    for i,(images, labels) in enumerate(train_loader):        # origin shape:[4,3,32,32] &#x3D; 4,3, 1024        # input_layer:3 input channels, 6 output channels, 5 kernel size        images &#x3D; images.to(device)        labels &#x3D; labels.to(device)        # Forward pass        outputs &#x3D; model(images)        loss &#x3D; criterion(outputs, labels)        # Backward and optimizer        optimizer.zero_grad()        loss.backward()        optimizer.step()        if (i+1) % 2000 &#x3D;&#x3D; 0:            print(f&#39;Epoch [&#123;epoch+1&#125;&#x2F;&#123;num_epochs&#125;], Step [&#123;i+1&#125;&#x2F;&#123;n_total_steps&#125;], Loss: &#123;loss.item():.4f&#125;&#39;)# testwith torch.no_grad():    n_correct &#x3D; 0    n_samples &#x3D; 0    n_class_correct &#x3D; [0 for i in range(10)]    n_class_samples &#x3D; [0 for i in range(10)]    for images, labels in test_loader:        images &#x3D; images.to(device)        labels &#x3D; labels.to(device)        outputs &#x3D; model(images)        # max returns (value ,index)        _, predicted &#x3D; torch.max(outputs, 1)        n_samples +&#x3D; labels.size(0)        n_correct +&#x3D; (predicted &#x3D;&#x3D; labels).sum().item()        for i in range(batch_size):            label &#x3D; labels[i]            pred &#x3D; predicted[i]            if (label &#x3D;&#x3D; pred):                n_class_correct[label] +&#x3D; 1            n_class_samples[label] +&#x3D; 1    acc &#x3D; 100.0 * n_correct &#x2F; n_samples    print(f&#39;Accuracy of the network: &#123;acc&#125; %&#39;)    for i in range(10):        acc &#x3D; 100.0 * n_class_correct[i] &#x2F; n_class_samples[i]        print(f&#39;Accuracy of &#123;classes[i]&#125;: &#123;acc&#125; %&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="10-Transfer-Learning"><a href="#10-Transfer-Learning" class="headerlink" title="10. Transfer Learning"></a>10. Transfer Learning</h3><blockquote><p>这里我们学习迁移学习，主要学习如下三个知识点：</p><ol><li><p>ImageFolder: how we can use ImageFolder</p></li><li><p>Scheduler: how we use a scheduler to change the learning rate</p></li><li><p>Transfer Learning</p><p>迁移学习是指在某一个任务上训练好模型，然后将训练好的模型迁移到另外一个任务中，固定模型的某些参数，对另外一些参数进行学习，以便模型能够适应新的任务。</p><p>实验代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Transfer Learning                                 # 1) ImageFolder: how we can use ImageFolder# 2) Scheduler: how we use a scheduler to change the learning rate# 3) Transfer Learning:import torchimport torch.nn as nnimport torch.optim as optimfrom torch.optim import lr_schedulerimport numpy as npimport torchvisionfrom torchvision import datasets, models, transformsimport matplotlib.pyplot as pltimport timeimport osimport copy                                 # device configdevice &#x3D;torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)                                 mean &#x3D; np.array([0.485, 0.456, 0.406])std &#x3D; np.array([0.229, 0.224, 0.225])                                 data_transforms &#x3D; &#123;    &#39;train&#39;:transforms.Compose([        transforms.RandomResizedCrop(224),        transforms.RandomHorizontalFlip(),        transforms.ToTensor(),        transforms.Normalize(mean, std)    ]),    &#39;val&#39;:transforms.Compose([        transforms.Resize(256),        transforms.CenterCrop(224),        transforms.ToTensor(),        transforms.Normalize(mean, std)    ])&#125;                                 # import datadata_dir &#x3D; &#39;data&#x2F;hymenoptera_data&#39;sets &#x3D; [&#39;train&#39;, &#39;val&#39;]image_datasets &#x3D; &#123;x:datasets.ImageFolder(os.path.join(data_dir, x),                                         data_transforms[x])                    for x in sets&#125;dataloaders &#x3D; &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size&#x3D;4,                                            shuffle&#x3D;True, num_workers&#x3D;0)               for x in sets&#125;dataset_sizes &#x3D; &#123;x: len(image_datasets[x]) for x in sets&#125;class_names &#x3D; image_datasets[&#39;train&#39;].classesprint(class_names)                             def imshow(inp, title):    &quot;&quot;&quot;Imshow for Tensor.&quot;&quot;&quot;    inp &#x3D; inp.numpy().transpose((1, 2, 0))    inp &#x3D; std * inp + mean    inp &#x3D; np.clip(inp, 0, 1)    plt.imshow(inp)    plt.title(title)    plt.show()                              # Get a batch of training datainputs, classes &#x3D; next(iter(dataloaders[&#39;train&#39;]))                              # Make a grid from batchout &#x3D; torchvision.utils.make_grid(inputs)                              imshow(out, title&#x3D;[class_names[x] for x in classes])                              def train_model(model, criterion, optimizer, scheduler, num_epochs&#x3D;25):    since &#x3D; time.time()                                  best_model_wts &#x3D; copy.deepcopy(model.state_dict())    best_acc &#x3D; 0.0                                      for epoch in range(num_epochs):        print(f&#39;Epoch &#123;epoch+1&#125; &#x2F; &#123;num_epochs&#125;&#39;)        print(&#39;-&#39;*15)                                          # Each epoch has a training and validation phase        for phase in sets:            if phase &#x3D;&#x3D;&#39;train&#39;:                model.train()            else:                model.eval()                                              running_loss &#x3D; 0.0            running_correct &#x3D; 0.0                                              # Iterate over data.            for inputs, labels in dataloaders[phase]:                inputs &#x3D; inputs.to(device)                labels &#x3D; labels.to(device)                                                  # forward                # track history if only training                with torch.set_grad_enabled(phase &#x3D;&#x3D; &#39;train&#39;):                    outputs &#x3D; model(inputs)                    loss &#x3D; criterion(outputs, labels)                    _, preds &#x3D; torch.max(outputs, 1)                                                      # backward + optimizer only if in training phase                    if phase &#x3D;&#x3D; &#39;train&#39;:                        optimizer.zero_grad()                        loss.backward()                        optimizer.step()                                                  # statistics                running_loss +&#x3D; loss.item()*inputs.size(0)                running_correct +&#x3D; torch.sum(preds &#x3D;&#x3D; labels.data)                                              if phase &#x3D;&#x3D; &#39;train&#39;:                scheduler.step()                                              epoch_loss &#x3D; running_loss &#x2F; dataset_sizes[phase]            epoch_acc &#x3D; running_correct.double() &#x2F; dataset_sizes[phase]                                              print(f&#39;&#123;phase&#125; Loss: &#123;epoch_loss:.4f&#125; Acc: &#123;epoch_acc:.4f&#125;&#39;)                                              # deep copy the model to            if phase &#x3D;&#x3D; &#39;val&#39; and epoch_acc &gt; best_acc:                best_acc &#x3D; epoch_acc                best_model_wts &#x3D; copy.deepcopy(model.state_dict())                                      time_elapsed &#x3D; time.time()-since    print(f&#39;Training complete in &#123;time_elapsed&#x2F;&#x2F;60:.0f&#125;m &#123;time_elapsed%60:.0fs&#125;&#39;)    print(f&#39;Best val Acc: &#123;best_acc:4f&#125;&#39;)                                      #load best model weights    model.load_state_dic(best_model_wts)    return model                              model &#x3D; models.resnet18(pretrained&#x3D;True)                              # Here, we need to freeze all the network except the final layer.# We need to set requires_grad &#x3D;&#x3D; False to freeze the parameters so that the gradients are not computed in backward()for param in model.parameters():    param.requires_grad &#x3D; False                              num_ftrs &#x3D; model.fc.in_features                              model.fc &#x3D; nn.Linear(num_ftrs, 2)model.to(device)                              criterion &#x3D; nn.CrossEntropyLoss()                              # Observe that all parameters are being optimizedoptimizer &#x3D; optim.SGD(model.parameters(), lr&#x3D;0.001)                              # schedulerstep_lr_schedule &#x3D; lr_scheduler.StepLR(optimizer, step_size&#x3D;7, gamma&#x3D;0.1) # Every 7 step， learning rate multiple by 0.1                              model &#x3D; train_model(model, criterion, optimizer, step_lr_schedule, num_epochs&#x3D;7)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></blockquote><h3 id="11-Tensorboard"><a href="#11-Tensorboard" class="headerlink" title="11. Tensorboard"></a>11. Tensorboard</h3><blockquote><p>Tensorbard是很好的可视化工具，具体可以参考如下的代码。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"># Tensorboardimport torchimport torch.nn as nnimport torchvisionimport torchvision.transforms as transformsimport matplotlib.pyplot as plt############## TENSORBOARD ########################import sysimport torch.nn.functional as Ffrom torch.utils.tensorboard import SummaryWriter# default &#96;log_dir&#96; is &quot;runs&quot; - we&#39;ll be more specific herewriter &#x3D; SummaryWriter(&#39;runs&#x2F;mnist1&#39;)#################################################### Device configurationdevice &#x3D; torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)# Hyper-parametersinput_size &#x3D; 784  # 28x28hidden_size &#x3D; 500num_classes &#x3D; 10num_epochs &#x3D; 1batch_size &#x3D; 64learning_rate &#x3D; 0.001# MNIST datasettrain_dataset &#x3D; torchvision.datasets.MNIST(root&#x3D;&#39;.&#x2F;data&#39;,                                           train&#x3D;True,                                           transform&#x3D;transforms.ToTensor(),                                           download&#x3D;True)test_dataset &#x3D; torchvision.datasets.MNIST(root&#x3D;&#39;.&#x2F;data&#39;,                                          train&#x3D;False,                                          transform&#x3D;transforms.ToTensor())# Data loadertrain_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;train_dataset,                                           batch_size&#x3D;batch_size,                                           shuffle&#x3D;True)test_loader &#x3D; torch.utils.data.DataLoader(dataset&#x3D;test_dataset,                                          batch_size&#x3D;batch_size,                                          shuffle&#x3D;False)examples &#x3D; iter(test_loader)example_data, example_targets &#x3D; examples.next()for i in range(6):    plt.subplot(2, 3, i + 1)    plt.imshow(example_data[i][0], cmap&#x3D;&#39;gray&#39;)# plt.show()############## TENSORBOARD ########################img_grid &#x3D; torchvision.utils.make_grid(example_data)writer.add_image(&#39;mnist_images&#39;, img_grid)# writer.close()# sys.exit()#################################################### Fully connected neural network with one hidden layerclass NeuralNet(nn.Module):    def __init__(self, input_size, hidden_size, num_classes):        super(NeuralNet, self).__init__()        self.input_size &#x3D; input_size        self.l1 &#x3D; nn.Linear(input_size, hidden_size)        self.relu &#x3D; nn.ReLU()        self.l2 &#x3D; nn.Linear(hidden_size, num_classes)    def forward(self, x):        out &#x3D; self.l1(x)        out &#x3D; self.relu(out)        out &#x3D; self.l2(out)        # no activation and no softmax at the end        return outmodel &#x3D; NeuralNet(input_size, hidden_size, num_classes).to(device)# Loss and optimizercriterion &#x3D; nn.CrossEntropyLoss()optimizer &#x3D; torch.optim.Adam(model.parameters(), lr&#x3D;learning_rate)############## TENSORBOARD ########################writer.add_graph(model, example_data.reshape(-1, 28 * 28))# writer.close()# sys.exit()#################################################### Train the modelrunning_loss &#x3D; 0.0running_correct &#x3D; 0n_total_steps &#x3D; len(train_loader)for epoch in range(num_epochs):    for i, (images, labels) in enumerate(train_loader):        # origin shape: [100, 1, 28, 28]        # resized: [100, 784]        images &#x3D; images.reshape(-1, 28 * 28).to(device)        labels &#x3D; labels.to(device)        # Forward pass        outputs &#x3D; model(images)        loss &#x3D; criterion(outputs, labels)        # Backward and optimize        optimizer.zero_grad()        loss.backward()        optimizer.step()        running_loss +&#x3D; loss.item()        _, predicted &#x3D; torch.max(outputs.data, 1)        running_correct +&#x3D; (predicted &#x3D;&#x3D; labels).sum().item()        if (i + 1) % 100 &#x3D;&#x3D; 0:            print(f&#39;Epoch [&#123;epoch + 1&#125;&#x2F;&#123;num_epochs&#125;], Step [&#123;i + 1&#125;&#x2F;&#123;n_total_steps&#125;], Loss: &#123;loss.item():.4f&#125;&#39;)            ############## TENSORBOARD ########################            writer.add_scalar(&#39;training loss&#39;, running_loss &#x2F; 100, epoch * n_total_steps + i)            running_accuracy &#x3D; running_correct &#x2F; 100 &#x2F; predicted.size(0)            writer.add_scalar(&#39;accuracy&#39;, running_accuracy, epoch * n_total_steps + i)            running_correct &#x3D; 0            running_loss &#x3D; 0.0            #################################################### Test the model# In test phase, we don&#39;t need to compute gradients (for memory efficiency)class_labels &#x3D; []class_preds &#x3D; []with torch.no_grad():    n_correct &#x3D; 0    n_samples &#x3D; 0    for images, labels in test_loader:        images &#x3D; images.reshape(-1, 28 * 28).to(device)        labels &#x3D; labels.to(device)        outputs &#x3D; model(images)        # max returns (value ,index)        values, predicted &#x3D; torch.max(outputs.data, 1)        n_samples +&#x3D; labels.size(0)        n_correct +&#x3D; (predicted &#x3D;&#x3D; labels).sum().item()        class_probs_batch &#x3D; [F.softmax(output, dim&#x3D;0) for output in outputs]        class_preds.append(class_probs_batch)        class_labels.append(predicted)    # 10000, 10, and 10000, 1    # stack concatenates tensors along a new dimension    # cat concatenates tensors in the given dimension    class_preds &#x3D; torch.cat([torch.stack(batch) for batch in class_preds])    class_labels &#x3D; torch.cat(class_labels)    acc &#x3D; 100.0 * n_correct &#x2F; n_samples    print(f&#39;Accuracy of the network on the 10000 test images: &#123;acc&#125; %&#39;)    ############## TENSORBOARD ########################    classes &#x3D; range(10)    for i in classes:        labels_i &#x3D; class_labels &#x3D;&#x3D; i        preds_i &#x3D; class_preds[:, i]        writer.add_pr_curve(str(i), labels_i, preds_i, global_step&#x3D;0)        writer.close()    ###################################################<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="12-Saving-and-Loading-model"><a href="#12-Saving-and-Loading-model" class="headerlink" title="12. Saving and Loading model"></a>12. Saving and Loading model</h3><blockquote> <pre class="line-numbers language-none"><code class="language-none">2 DIFFERENT WAYS OF SAVING# 1) lazy way: save whole modeltorch.save(model, PATH)# model class must be defined somewheremodel &#x3D; torch.load(PATH)model.eval()# 2) recommended way: save only the state_dicttorch.save(model.state_dict(), PATH)# model must be created again with parametersmodel &#x3D; Model(*args, **kwargs)model.load_state_dict(torch.load(PATH))model.eval()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 示例代码如下:</p> <pre class="line-numbers language-python" data-language="python"><code class="language-python">import torchimport torch.nn as nnclass Model(nn.Module):def __init__(self, n_input_features):    super(Model, self).__init__()    self.linear &#x3D; nn.Linear(n_input_features, 1)def forward(self, x):    y_pred &#x3D; torch.sigmoid(self.linear(x))    return y_predmodel &#x3D; Model(n_input_features&#x3D;6)# train your model...####################save all ######################################for param in model.parameters():print(param)# save and load entire modelFILE &#x3D; &quot;model.pth&quot;torch.save(model, FILE)loaded_model &#x3D; torch.load(FILE)loaded_model.eval()for param in loaded_model.parameters():print(param)############save only state dict ########################## save only state dictFILE &#x3D; &quot;model.pth&quot;torch.save(model.state_dict(), FILE)print(model.state_dict())loaded_model &#x3D; Model(n_input_features&#x3D;6)loaded_model.load_state_dict(torch.load(FILE)) # it takes the loaded dictionary, not the path file itselfloaded_model.eval()print(loaded_model.state_dict())###########load checkpoint#####################learning_rate &#x3D; 0.01optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;learning_rate)checkpoint &#x3D; &#123;&quot;epoch&quot;: 90,&quot;model_state&quot;: model.state_dict(),&quot;optim_state&quot;: optimizer.state_dict()&#125;print(optimizer.state_dict())FILE &#x3D; &quot;checkpoint.pth&quot;torch.save(checkpoint, FILE)model &#x3D; Model(n_input_features&#x3D;6)optimizer &#x3D; optimizer &#x3D; torch.optim.SGD(model.parameters(), lr&#x3D;0)checkpoint &#x3D; torch.load(FILE)model.load_state_dict(checkpoint[&#39;model_state&#39;])optimizer.load_state_dict(checkpoint[&#39;optim_state&#39;])epoch &#x3D; checkpoint[&#39;epoch&#39;]model.eval()# - or -# model.train()print(optimizer.state_dict())# Remember that you must call model.eval() to set dropout and batch normalization layers # to evaluation mode before running inference. Failing to do this will yield # inconsistent inference results. If you wish to resuming training, # call model.train() to ensure these layers are in training mode.&quot;&quot;&quot; SAVING ON GPU&#x2F;CPU # 1) Save on GPU, Load on CPUdevice &#x3D; torch.device(&quot;cuda&quot;)model.to(device)torch.save(model.state_dict(), PATH)device &#x3D; torch.device(&#39;cpu&#39;)model &#x3D; Model(*args, **kwargs)model.load_state_dict(torch.load(PATH, map_location&#x3D;device))# 2) Save on GPU, Load on GPUdevice &#x3D; torch.device(&quot;cuda&quot;)model.to(device)torch.save(model.state_dict(), PATH)model &#x3D; Model(*args, **kwargs)model.load_state_dict(torch.load(PATH))model.to(device)# Note: Be sure to use the .to(torch.device(&#39;cuda&#39;)) function # on all model inputs, too!# 3) Save on CPU, Load on GPUtorch.save(model.state_dict(), PATH)device &#x3D; torch.device(&quot;cuda&quot;)model &#x3D; Model(*args, **kwargs)model.load_state_dict(torch.load(PATH, map_location&#x3D;&quot;cuda:0&quot;))  # Choose whatever GPU device number you wantmodel.to(device)# This loads the model to a given GPU device. # Next, be sure to call model.to(torch.device(&#39;cuda&#39;)) to convert the model’s parameter tensors to CUDA tensors&quot;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="13-Summary"><a href="#13-Summary" class="headerlink" title="13. Summary"></a>13. Summary</h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805230250.png" alt="pytorch" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huggingface 预训练模型权重下载的问题</title>
      <link href="2021/07/01/huggingface-yu-xun-lian-mo-xing-quan-chong-xia-zai-de-wen-ti/"/>
      <url>2021/07/01/huggingface-yu-xun-lian-mo-xing-quan-chong-xia-zai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转自<a href="https://www.bilibili.com/read/cv8231417">Hugging face预训练模型</a>和<a href="https://cloud.tencent.com/developer/article/1745037">Huggingface 预训练模型权重下载的问题</a></p></blockquote><p>Hugging face是一个专注于NLP的公司，拥有一个开源的预训练模型库 Transformers ，里面囊括了非常多的模型例如 BERT GPT 等.</p><h4 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h4><p>官网的模型库的地址如下：<a href="https://huggingface.co/models">https://huggingface.co/models</a> </p><h4 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h4><p>首先需要安装transformers库，使用以下命令安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip install transformers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来在代码中调用 <font color=red> AutoTokenizer.from_pretrained</font> 和 <font color=red> AutoModel.from_pretrained </font>即可, 例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from transformers import *model_name &#x3D; &#39;hfl&#x2F;chinese-xlnet-base&#39;tokenizer &#x3D; AutoTokenizer.from_pretrained(model_name)model &#x3D; AutoModel.from_pretrained(model_name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行后系统会自动下载相关的模型文件并存放在电脑中。使用Windows模型保存的路径在 <font color=red> C:\Users[用户名].cache\torch\transformers</font>目录下，根据模型的不同下载的东西也不相同</p><p>使用Linux模型保存的路径在 <font color=red> ~/.cache/torch/transformers/ </font>目录下。</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>这些前提是你的电脑有网络可以直接使用代码下载相应的模型文件，但是问题是有些机器是没有外网连接权限或者下载速度非常慢。</p><p>这时候就需要把模型文件下载后在导入代码中，还是以刚才的  <font color=red> hfl/chinese-xlnet-base </font>模型为例，直接在官网搜索模型，点击进入模型的详情界面</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210701024119.png" alt="20210701024119"></p><p>在界面中找到 Files</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210701024235.png" alt="20210701024235"></p><p>把弹窗内的文件全部下载下来</p><p>我们假设文件保存在<font color=red> E:\models\hfl\chinese-xlnet-base\ </font>目录下</p><p>我们只需要把<font color=red>model_name </font>修改为下载的文件夹即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">from transformers import *model_name &#x3D; &#39;E:&#x2F;models&#x2F;hfl&#x2F;chinese-xlnet-base&#x2F;&#39;tokenizer &#x3D; AutoTokenizer.from_pretrained(model_name)model &#x3D; AutoModel.from_pretrained(model_name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样问题就解决了。</p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 预训练模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook 本地服务器搭建</title>
      <link href="2021/06/21/jupyter-notebook-ben-di-fu-wu-qi-da-jian/"/>
      <url>2021/06/21/jupyter-notebook-ben-di-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>今天在实验室的服务器主机上面搭建了jupyter notebook服务器，记录一下搭建步骤，方便以后查看。</p><h4 id="服务器端操作"><a href="#服务器端操作" class="headerlink" title="服务器端操作"></a>服务器端操作</h4><h5 id="生成Jupyter-Notebook配置文件"><a href="#生成Jupyter-Notebook配置文件" class="headerlink" title="生成Jupyter Notebook配置文件"></a>生成Jupyter Notebook配置文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ jupyter notebook --generate-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="设置登录密码"><a href="#设置登录密码" class="headerlink" title="设置登录密码"></a>设置登录密码</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 在命令行输入python命令，进入python交互界面，输入如下命令from notebook.auth import passwdpasswd()Enter password:Verify password:Out[2]: &#39;sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将生成的代码添加到配置文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c.NotebookApp.password &#x3D; u&#39;sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ vim ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置文件中添加如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c.NotebookApp.allow_origin &#x3D; &#39;*&#39;c.NotebookApp.ip &#x3D; &#39;0.0.0.0&#39; #所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可c.NotebookApp.port &#x3D; 2021 #将端口设置为自己喜欢的吧，默认是8888c.NotebookApp.open_browser &#x3D; False #我们并不想在服务器上直接打开Jupyter Notebook，所以设置成Falsec.NotebookApp.notebook_dir &#x3D; &#39;&#x2F;home&#x2F;jupyter_projects&#39; #这里是设置Jupyter的根目录，若不设置将默认root的根目录，不安全c.NotebookApp.allow_root &#x3D; True # 为了安全，Jupyter默认不允许以root权限启动jupyterc.NotebookApp.allow_remote_access &#x3D; Truec.NotebookApp.password &#x3D; u&#39;sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="启动jupyter-notebook"><a href="#启动jupyter-notebook" class="headerlink" title="启动jupyter notebook"></a>启动jupyter notebook</h5><p>在终端输入如下命令启动jupyter notebook：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客服端电脑操作"><a href="#客服端电脑操作" class="headerlink" title="客服端电脑操作"></a>客服端电脑操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh username@ipaddress -L 2021:127.0.0.1:2021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后在本地浏览器输入地址：127.0.0.1:2021 访问</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习中的各种熵</title>
      <link href="2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/"/>
      <url>2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="概念和定义"><a href="#概念和定义" class="headerlink" title="概念和定义"></a>概念和定义</h3><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><h4 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h4><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><p><a href="https://www.cnblogs.com/Arborday/p/10727147.html">https://www.cnblogs.com/Arborday/p/10727147.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/35379531">https://zhuanlan.zhihu.com/p/35379531</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="2021/04/08/git-chang-yong-ming-ling/"/>
      <url>2021/04/08/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="git基于历史commit创建分支"><a href="#git基于历史commit创建分支" class="headerlink" title="git基于历史commit创建分支"></a>git基于历史commit创建分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git loggit branch &lt;branch name&gt; &lt;SHA1&gt; git checkout &lt;branch name&gt;#也可以直接执行下面的命令git checkout -b &lt;branch name&gt; &lt;SHA1&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="git对分支的操作"><a href="#git对分支的操作" class="headerlink" title="git对分支的操作"></a>git对分支的操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看远程分支git branch -a#查看本地分支git branch#创建分支git branch branch_name#切换到分支git checkout branch_name#删除本地分支git branch -d branch_name#重命名本地分支git branch -m old new#重命名远程分支：将远程分支删除，然后将本地分支重命名，最后将本地分支推到远程git push --delete origin old #删除远程分支git branch -m old new #重命名本地分支git push origin new #将本地分支推送到远程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="git对比两个分支差异"><a href="#git对比两个分支差异" class="headerlink" title="git对比两个分支差异"></a><a href="https://www.jianshu.com/p/bb97fabb475e">git对比两个分支差异</a></h4>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP知识体系</title>
      <link href="2021/04/08/nlp-zhi-shi-ti-xi/"/>
      <url>2021/04/08/nlp-zhi-shi-ti-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分：机器学习基础篇"><a href="#第一部分：机器学习基础篇" class="headerlink" title="第一部分：机器学习基础篇"></a>第一部分：机器学习基础篇</h3><h4 id="第一章：自然语言处理概述"><a href="#第一章：自然语言处理概述" class="headerlink" title="第一章：自然语言处理概述"></a>第一章：自然语言处理概述</h4><ul><li><p> 自然语言处理的现状与前景</p></li><li><p>自然语言处理应用</p></li><li><p>自然语言处理经典任务</p></li></ul><h4 id="第二章：数据结构与算法基础"><a href="#第二章：数据结构与算法基础" class="headerlink" title="第二章：数据结构与算法基础"></a>第二章：数据结构与算法基础</h4><ul><li><p>时间复杂度、空间复杂度</p></li><li><p>动态规划</p></li><li><p>贪心算法</p></li><li><p>各种排序算法</p></li></ul><h4 id="第三章：分类与逻辑回归"><a href="#第三章：分类与逻辑回归" class="headerlink" title="第三章：分类与逻辑回归"></a>第三章：分类与逻辑回归</h4><ul><li><p>逻辑回归</p></li><li><p>最大似然估计</p></li><li><p>优化与梯度下降法</p></li><li><p>随机梯度下降法</p></li></ul><h4 id="第四章：模型泛化与调参"><a href="#第四章：模型泛化与调参" class="headerlink" title="第四章：模型泛化与调参"></a>第四章：模型泛化与调参</h4><ul><li><p>理解过拟合、防止过拟合</p></li><li><p>L1与L2正则</p></li><li><p>交叉验证</p></li><li><p>正则与MAP估计</p></li></ul><h3 id="第二部分：文本处理篇"><a href="#第二部分：文本处理篇" class="headerlink" title="第二部分：文本处理篇"></a>第二部分：文本处理篇</h3><h4 id="第五章：文本预处理与表示"><a href="#第五章：文本预处理与表示" class="headerlink" title="第五章：文本预处理与表示"></a>第五章：文本预处理与表示</h4><ul><li><p>各类分词算法</p></li><li><p>词的标准化</p></li><li><p>拼写纠错、停用词</p></li><li><p>独热编码表示</p></li><li><p>tf-idf与相似度</p></li><li><p>分布式表示与词向量</p></li><li><p>词向量可视化与评估</p></li></ul><h4 id="第六章：词向量技术"><a href="#第六章：词向量技术" class="headerlink" title="第六章：词向量技术"></a>第六章：词向量技术</h4><ul><li><p>独热编码的优缺点</p></li><li><p>分布式表示的优点</p></li><li><p>静态词向量与动态词向量</p></li><li><p>SkipGram与CBOW</p></li><li><p>SkipGram详解</p></li><li><p>Negative  Sampling</p></li></ul><h4 id="第七章：语言模型"><a href="#第七章：语言模型" class="headerlink" title="第七章：语言模型"></a>第七章：语言模型</h4><ul><li><p>语言模型的作用</p></li><li><p>马尔科夫假设</p></li><li><p>UniGram, BiGram, NGram模型</p></li><li><p>语言模型的评估</p></li><li><p>语言模型的平滑技术</p></li></ul><h3 id="第三部分：序列模型篇"><a href="#第三部分：序列模型篇" class="headerlink" title="第三部分：序列模型篇"></a>第三部分：序列模型篇</h3><h4 id="第八章：隐马尔科夫模型"><a href="#第八章：隐马尔科夫模型" class="headerlink" title="第八章：隐马尔科夫模型"></a>第八章：隐马尔科夫模型</h4><ul><li><p>HMM的应用</p></li><li><p>HMM的Inference</p></li><li><p>维特比算法</p></li><li><p>前向、后向算法</p></li><li><p>HMM的参数估计详解</p></li></ul><h4 id="第九章：线性条件随机场"><a href="#第九章：线性条件随机场" class="headerlink" title="第九章：线性条件随机场"></a>第九章：线性条件随机场</h4><ul><li><p>有向图与无向图</p></li><li><p>生成模型与判别模型</p></li><li><p>从HMM与MEMM</p></li><li><p>MEMM中的标签偏置</p></li><li><p>Log-Linear模型介绍</p></li><li><p>从Log-Linear到LinearCRF</p></li><li><p>LinearCRF的参数估计</p></li></ul><h3 id="第四部分：深度学习与预训练篇"><a href="#第四部分：深度学习与预训练篇" class="headerlink" title="第四部分：深度学习与预训练篇"></a>第四部分：深度学习与预训练篇</h3><h4 id="第十章：深度学习基础"><a href="#第十章：深度学习基础" class="headerlink" title="第十章：深度学习基础"></a>第十章：深度学习基础</h4><ul><li><p>理解神经网络</p></li><li><p>各种常见的激活函数</p></li><li><p>反向传播算法</p></li><li><p>浅层模型与深度模型对比</p></li><li><p>深度学习中的层次表示</p></li><li><p>深度学习中的过拟合</p></li></ul><h4 id="第十一章：RNN与LSTM"><a href="#第十一章：RNN与LSTM" class="headerlink" title="第十一章：RNN与LSTM"></a>第十一章：RNN与LSTM</h4><ul><li><p>从HMM到RNN模型</p></li><li><p>RNN中的梯度问题</p></li><li><p>梯度消失与LSTM</p></li><li><p>LSTM到GRU</p></li><li><p>双向LSTM</p></li><li><p>双向深度LSTM</p></li></ul><h4 id="第十二章：Seq2Seq模型与注意力机制"><a href="#第十二章：Seq2Seq模型与注意力机制" class="headerlink" title="第十二章：Seq2Seq模型与注意力机制"></a>第十二章：Seq2Seq模型与注意力机制</h4><ul><li><p>Seq2Seq模型</p></li><li><p>Greedy Decoding</p></li><li><p>Beam Search</p></li><li><p>长依赖所存在的问题</p></li><li><p>注意力机制的实现</p></li></ul><h4 id="第十三章：动态词向量与ELMo技术"><a href="#第十三章：动态词向量与ELMo技术" class="headerlink" title="第十三章：动态词向量与ELMo技术"></a>第十三章：动态词向量与ELMo技术</h4><ul><li><p>基于上下文的词向量技术</p></li><li><p>图像识别中的层次表示</p></li><li><p>文本领域中的层次表示</p></li><li><p>ELMo模型</p></li><li><p>ELMo的预训练与测试</p></li><li><p>ELMo的优缺点</p></li></ul><h4 id="第十四章：自注意力机制与Transformer"><a href="#第十四章：自注意力机制与Transformer" class="headerlink" title="第十四章：自注意力机制与Transformer"></a>第十四章：自注意力机制与Transformer</h4><ul><li><p>LSTM模型的缺点</p></li><li><p>Transformer概述</p></li><li><p>理解自注意力机制</p></li><li><p>位置信息的编码</p></li><li><p>理解Encoder和Decoder区别</p></li><li><p>理解Transformer的训练与预测</p></li><li><p>Transformer的缺点</p></li></ul><h4 id="第十五章：BERT与ALBERT"><a href="#第十五章：BERT与ALBERT" class="headerlink" title="第十五章：BERT与ALBERT"></a>第十五章：BERT与ALBERT</h4><ul><li><p>自编码介绍</p></li><li><p>Transformer Encoder</p></li><li><p>Masked语言模型</p></li><li><p>BERT模型</p></li><li><p>BERT的不同训练方式</p></li><li><p>ALBERT </p></li></ul><h4 id="第十六章：BERT的其他变种"><a href="#第十六章：BERT的其他变种" class="headerlink" title="第十六章：BERT的其他变种"></a>第十六章：BERT的其他变种</h4><ul><li><p>RoBERTa模型</p></li><li><p>SpanBERT模型</p></li><li><p>FinBERT模型</p></li><li><p>引入先验知识</p></li><li><p>K-BERT</p></li><li><p>KG-BERT</p></li></ul><h4 id="第十七章：GPT与XLNet"><a href="#第十七章：GPT与XLNet" class="headerlink" title="第十七章：GPT与XLNet"></a>第十七章：GPT与XLNet</h4><ul><li><p>Transformer Encoder回顾</p></li><li><p>GPT-1, GPT-2,  GPT-3</p></li><li><p>ELMo的缺点</p></li><li><p>语言模型下同时考虑上下文</p></li><li><p>Permutation LM</p></li><li><p>双流自注意力机制</p></li></ul><h3 id="第五部分：信息抽取与知识图谱篇"><a href="#第五部分：信息抽取与知识图谱篇" class="headerlink" title="第五部分：信息抽取与知识图谱篇"></a>第五部分：信息抽取与知识图谱篇</h3><h4 id="第十八章：命名识别与实体消歧"><a href="#第十八章：命名识别与实体消歧" class="headerlink" title="第十八章：命名识别与实体消歧"></a>第十八章：命名识别与实体消歧</h4><ul><li><p>信息抽取的应用和关键技术</p></li><li><p>命名实体识别</p></li><li><p>NER识别常用技术</p></li><li><p>实体统一技术</p></li><li><p>实体消歧技术</p></li><li><p>指代消解</p></li></ul><h4 id="第十九章：关系抽取"><a href="#第十九章：关系抽取" class="headerlink" title="第十九章：关系抽取"></a>第十九章：关系抽取</h4><ul><li><p>关系抽取的应用</p></li><li><p>基于规则的方法</p></li><li><p>基于监督学习的方法</p></li><li><p>Bootstrap方法</p></li><li><p>Distant Supervision方法</p></li></ul><h4 id="第二十章：句法分析"><a href="#第二十章：句法分析" class="headerlink" title="第二十章：句法分析"></a>第二十章：句法分析</h4><ul><li><p>句法分析的应用</p></li><li><p>CFG介绍</p></li><li><p>从CFG到PCFG</p></li><li><p>评估语法树</p></li><li><p>寻找最好的语法树</p></li><li><p>CKY算法</p></li></ul><h4 id="第二十一章：依存文法分析"><a href="#第二十一章：依存文法分析" class="headerlink" title="第二十一章：依存文法分析"></a>第二十一章：依存文法分析</h4><ul><li><p>从语法分析到依存文法分析</p></li><li><p>依存文法分析的应用</p></li><li><p>基于图算法的依存文法分析</p></li><li><p>基于Transition-based的依存文法分析</p></li><li><p>依存文法的应用案例</p></li></ul><h4 id="第二十二章：知识图谱"><a href="#第二十二章：知识图谱" class="headerlink" title="第二十二章：知识图谱"></a>第二十二章：知识图谱</h4><ul><li><p>知识图谱的重要性</p></li><li><p>知识图谱中的实体与关系</p></li><li><p>非结构化数据与构造知识图谱</p></li><li><p>知识图谱设计</p></li><li><p>图算法的应用</p></li></ul><h3 id="第六部分：模型压缩与图神经网络篇"><a href="#第六部分：模型压缩与图神经网络篇" class="headerlink" title="第六部分：模型压缩与图神经网络篇"></a>第六部分：模型压缩与图神经网络篇</h3><h4 id="第二十三章：模型的压缩"><a href="#第二十三章：模型的压缩" class="headerlink" title="第二十三章：模型的压缩"></a>第二十三章：模型的压缩</h4><ul><li><p>模型压缩重要性</p></li><li><p>常见的模型压缩总览</p></li><li><p>基于矩阵分解的压缩技术</p></li><li><p>基于蒸馏的压缩技术</p></li><li><p>基于贝叶斯模型的压缩技术</p></li><li><p>模型的量化</p></li></ul><h4 id="第二十四章：基于图的学习"><a href="#第二十四章：基于图的学习" class="headerlink" title="第二十四章：基于图的学习"></a>第二十四章：基于图的学习</h4><ul><li><p>图的表示</p></li><li><p>图与知识图谱</p></li><li><p>关于图的常见算法</p></li><li><p>Deepwalk和Node2vec</p></li><li><p>TransE图嵌入算法</p></li><li><p>DSNE图嵌入算法</p></li></ul><h4 id="第二十五章：图神经网络"><a href="#第二十五章：图神经网络" class="headerlink" title="第二十五章：图神经网络"></a>第二十五章：图神经网络</h4><ul><li><p>卷积神经网络回顾</p></li><li><p>在图中设计卷积操作</p></li><li><p>图中的信息传递</p></li><li><p>图卷积神经网络</p></li><li><p>图卷积神经网络的经典应用</p></li></ul><h4 id="第二十六章：GraphSage与GAT"><a href="#第二十六章：GraphSage与GAT" class="headerlink" title="第二十六章：GraphSage与GAT"></a>第二十六章：GraphSage与GAT</h4><ul><li><p>从GCN到GraphSAge</p></li><li><p>注意力机制回归</p></li><li><p>GAT模型详解</p></li><li><p>GAT与GCN比较</p></li><li><p>对于异构数据的处理</p></li></ul><h4 id="第二十七章：图神经网络的其他应用"><a href="#第二十七章：图神经网络的其他应用" class="headerlink" title="第二十七章：图神经网络的其他应用"></a>第二十七章：图神经网络的其他应用</h4><ul><li><p>Node Classification</p></li><li><p>Graph Classification</p></li><li><p>Link Prediction</p></li><li><p>社区挖掘</p></li><li><p>推荐系统</p></li><li><p>图神经网络的未来发展</p></li></ul><h3 id="部分可练习的案例"><a href="#部分可练习的案例" class="headerlink" title="部分可练习的案例"></a>部分可练习的案例</h3><ol><li>实现一个拼写纠错器</li><li>从零实现Word2Vec词向量</li><li>利用SkipGram做推荐</li><li>从零实现HMM模型</li><li>基于Linear-CRF的词性分类器实现</li><li>从零实现深度学习反向传播算法</li><li>实现AI程序帮助写程序</li><li>实现AI程序帮助写文章</li><li>基于Transformer的机器翻译</li><li>基于KG-BERT的知识图谱学习</li><li>基于知识图谱的风控系统</li><li>基于知识图谱的个性化教学</li><li>利用蒸馏算法压缩Transformer</li><li>利用GCN实现社交推荐</li><li>基于GAT的虚假新闻检测</li></ol><h3 id="项目作业"><a href="#项目作业" class="headerlink" title="项目作业"></a>项目作业</h3><ol><li><p>豆瓣电影评分预测</p><p> 涉及到的知识点：</p><ul><li><p>中文分词技术</p></li><li><p>独热编码、tf-idf</p></li><li><p>分布式表示与Word2Vec</p></li><li><p>BERT向量、句子向量</p></li></ul></li></ol><ol start="2"><li><p>智能客服问答系统</p><p> 涉及到的知识点：</p><ul><li><p>问答系统搭建流程</p></li><li><p>文本的向量化表示</p></li><li><p>FastText</p></li><li><p>倒排表</p></li><li><p>问答系统中的召回、排序</p></li></ul></li></ol><ol start="3"><li><p>基于Linear-CRF的医疗实体识别</p><p> 涉及到的知识点：</p><ul><li><p>命名实体识别</p></li><li><p>特征工程</p></li><li><p>评估标准</p></li><li><p>过拟合</p></li></ul></li></ol><ol start="4"><li><p>基于闲聊的对话系统搭建</p><p> 涉及到的知识点：</p><ul><li><p>常见的对话系统技术</p></li><li><p>闲聊型对话系统框架</p></li><li><p>数据的处理技术</p></li><li><p>BERT的使用</p></li><li><p>Transformer的使用</p></li></ul></li></ol><ol start="5"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>医疗专业词汇的使用</p></li><li><p>获取问句的意图</p></li><li><p>问句的解释、提取关键实体</p></li><li><p>转化为查询语句</p></li></ul></li></ol><ol start="6"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>文本摘要生成介绍</p></li><li><p>关键词提取技术</p></li><li><p>图神经网络的摘要生成</p></li><li><p>基于生成式的摘要提取技术</p></li><li><p>文本摘要质量的评估</p></li></ul></li></ol><h3 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h3><table><thead><tr><th>主题</th><th>论文名称</th></tr></thead><tbody><tr><td>机器学习</td><td>XGBoost: A Scalable Tree Boosting System</td></tr><tr><td>机器学习</td><td>Regularization and Variable Selection via the Elastic Net</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>GloVe: Global Vectors for Word Representation</td></tr><tr><td>词向量</td><td>Deep Contexualized Word Representations</td></tr><tr><td>词向量</td><td>Attention is All You Need</td></tr><tr><td>词向量</td><td>BERT: Pretraining of Deep Bidirectional Transformers for Language Understanding</td></tr><tr><td>词向量</td><td>XLNet: Generalized Autoregressive Pretraining for Language Understanding</td></tr><tr><td>词向量</td><td>KG-BERT: BERT for Knowledge Graph Completion</td></tr><tr><td>词向量</td><td>Language Models are Few-shot Learners</td></tr><tr><td>图学习</td><td>Semi-supervised Classification with Graph Convolutional Networks</td></tr><tr><td>图学习</td><td>Graph Attention Networks</td></tr><tr><td>图学习</td><td>GraphSAGE: Inductive Representation Learning on Large Graphs</td></tr><tr><td>图学习</td><td>Node2Vec: Scalable Feature Learning for Networks</td></tr></tbody></table><p>参考链接: <a href="https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g">https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月31日 小雨 最小路径和</title>
      <link href="2021/04/01/zui-xiao-lu-jing-he/"/>
      <url>2021/04/01/zui-xiao-lu-jing-he/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/minimum-path-sum/">64</a>题，和之前的第62题一样，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210401021549.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题的解题思路和之前的第<a href="https://ailyong.cn/2021/03/30/bu-tong-lu-jing/">62题</a>很相似，定义dp[i][j]为从第(i, j)点走到右下角的最短路径，则有dp[i][j] = dp[i+1][j] + dp[i][j+1].</p><p>然后我们来考虑边界条件，此题的边际和第62题的边际一样，不同的是边界上面dp值，当在下边界的时候dp[m-1][j] = sum(gird[m-1][j:-1]), 在左边界的时候<br>dp[i][n-1] = sum(grid[i:-1][n-1])， dp[m-1][n-1] = grid[m-1][n-1].</p><p>最终答案为: dp[0][0]</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Solution:    def minPathSum(self, grid: List[List[int]]) -&gt; int:        m &#x3D; len(grid)        n &#x3D; len(grid[0])        dp &#x3D; [[0 for i in range(n)] for j in range(m)] #这里纠结了不少时间        for j in range(n-1, -1, -1):            dp[m-1][j] &#x3D; sum(grid[m-1]) - sum(grid[m-1][0:j])         col &#x3D; [x[n-1] for x in grid]        for i in range(m-1, -1, -1):            dp[i][n-1] &#x3D; sum(col)-sum(col[0:i])        for i in range(m-2, -1, -1):            for j in range(n-2, -1, -1):                dp[i][j] &#x3D; grid[i][j] + min(dp[i+1][j], dp[i][j+1])        return dp[0][0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>一开始声明二维数组的时候用了浅拷贝，改变某一行的值的时候，其他行的值也会跟着改变，但是我这么搞，竟然通过了60多个样例，好像是在第63个样例的时候卡住了（挠头），后面一个个的把dp里面的值打印出来看，才发现原来是用了浅拷贝，导致这样的问题，换成了迭代生成式后，终于AC了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab搭建笔记</title>
      <link href="2021/03/31/gitlab-da-jian-bi-ji/"/>
      <url>2021/03/31/gitlab-da-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="安装gitlab："><a href="#安装gitlab：" class="headerlink" title="安装gitlab："></a><a href="https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_13.8.7-ee.0_amd64.deb">安装gitlab</a>：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl -s https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ee&#x2F;script.deb.sh | sudo bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p> 之前已经配置好了，略</p><h4 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a><a href="https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab">gitlab配置</a></h4><p>打开/etc/gitlab/gitlab.rb</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">external_url &#39;http:&#x2F;&#x2F;gitlab.bytenlp.site&#39;# 系统端口冲突，我把端口改为了85nginx[&#39;listen_port&#39;] &#x3D; 85<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="让配置生效，并重启gitlab服务"><a href="#让配置生效，并重启gitlab服务" class="headerlink" title="让配置生效，并重启gitlab服务"></a>让配置生效，并重启gitlab服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 重新配置gitlabsudo gitlab-ctl reconfigure# 重启gitlabgitlab-ctl restart <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在浏览器输入”ip-端口号”查看效果，详细参考这里"><a href="#在浏览器输入”ip-端口号”查看效果，详细参考这里" class="headerlink" title="在浏览器输入”ip:端口号”查看效果，详细参考这里"></a>在浏览器输入”ip:端口号”查看效果，详细参考<a href="https://www.jianshu.com/p/ade38a53b1ac">这里</a></h4><p>参考教程：</p><ul><li> <a href="https://www.jianshu.com/p/bf7b09e234c8">https://www.jianshu.com/p/bf7b09e234c8</a></li><li> <a href="https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a><br>sudo apt-get install gitlab-ee=13.8.7-ee.0</li><li><a href="https://www.jianshu.com/p/ade38a53b1ac">https://www.jianshu.com/p/ade38a53b1ac</a></li></ul><p>测试一下</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语口语练习电影推荐</title>
      <link href="2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/"/>
      <url>2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>我是从喜马拉雅路转粉过来听课的，<a href="https://www.ximalaya.com/waiyu/19111514/">张老师</a>推荐的东西必然是干货。因此利用周末时间搜集整理了一些老师课上推荐的视频资源，方便自己也分享给大家。</p><h4 id="电影推荐"><a href="#电影推荐" class="headerlink" title="电影推荐"></a>电影推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1f1MKRhiGnhXPakdql9BFcQ">The Queen</a> (提取码:gysn)</p></li><li><p><a href="https://pan.baidu.com/s/1thHrc_mUaHD8pFyZwI4g2g">The King’s Speech</a> (提取码:gr42）</p></li><li><p><a href="https://pan.baidu.com/s/1hIyXIJ53H-p_rsCxR0f22Q">Downton Abbey</a> (提取码:cyb9)</p></li><li><p><a href="https://pan.baidu.com/s/1cFcyl3ZZ5TomwZnk0IbbTg">The Holiday</a> (提取码:48ks) 字幕 (提取码:4vix)</p></li><li><p><a href="https://pan.baidu.com/s/1PjDRYpgfXw557lkICTZiWQ">Coco</a> (提取码:tkwx)</p></li><li><p><a href="https://pan.baidu.com/s/10o4jLTT9etBVNlhE9pLgEQ">Darkest Hours</a> (提取码:okwz)</p></li><li><p><a href="https://pan.baidu.com/s/1s406g4lKsv2YPreZ3egBPw">Wonder</a> (提取码:yjog)</p></li><li><p><a href="https://pan.baidu.com/s/1cygoZKcHhtBgF3wA46LXHg">Harry Potter</a> (提取码:cg1w)</p></li><li><p><a href="https://pan.baidu.com/s/1Nptp0lnqBEsoWiGygB7Qgw">Big Hero 6</a> (提取码:g4q4)</p></li><li><p><a href="https://pan.baidu.com/s/1iLHz4MQpkWRUAz6ApnM_yA">Zootopia</a>（提取码:8tmm)</p></li><li><p><a href="https://ddrk.me/frozen-2013/">Frozen 1</a></p></li><li><p><a href="https://ddrk.me/frozen-2/">Frozen 2</a></p></li></ul><h4 id="电视剧推荐"><a href="#电视剧推荐" class="headerlink" title="电视剧推荐"></a>电视剧推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1oLZdVtC2dxQsntKqFpYGzA">Miranda</a> (提取码:ogrp)</p></li><li><p><a href="https://ddrk.me/the-it-crowd/">The IT Crowd</a></p></li><li><p><a href="https://pan.baidu.com/s/1urGHdiTmz4STpnXnGgnw9Q">Friends 磁力链接</a> (提取码: ldlu)（磁力链接可用迅雷下载，具体操作可自行搜索）</p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E6%91%A9%E7%99%BB%E5%AE%B6%E5%BA%AD">Modern Family</a></p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E7%94%9F%E6%B4%BB%E5%A4%A7%E7%88%86%E7%82%B8">TBBT 生活大爆炸</a>（高清下载磁力<a href="magnet:?xt=urn:btih:49CF1C0B0305D8F5031CB99840C09F06EABB79F6&dn=The+Big+Bang+Theory+Season+1-11+Complete+720p&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://9.rarbg.to:2920/announce&tr=udp://tracker.opentrackr.org:1337&tr=udp://tracker.internetwarriors.net:1337/announce&tr=udp://tracker.leechers-paradise.org:6969/announce&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://tracker.pirateparty.gr:6969/announce&tr=udp://tracker.cyberia.is:6969/announce">链接</a>）</p></li></ul><h4 id="科普记录片推荐"><a href="#科普记录片推荐" class="headerlink" title="科普记录片推荐"></a>科普记录片推荐</h4><ul><li><a href="https://www.bilibili.com/video/av70632732?p=2&spm_id_from=pageDriver">国家地理科普101</a></li></ul><p>资料整理不易，如果觉得好的话，记得打赏支持一波，一块钱也是奖励。</p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习视频整理</title>
      <link href="2021/03/31/xue-xi-shi-pin-zheng-li/"/>
      <url>2021/03/31/xue-xi-shi-pin-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="MIT计算机科学导论"><a href="#MIT计算机科学导论" class="headerlink" title="MIT计算机科学导论"></a>MIT计算机科学导论</h4><p>MIT计算机科学导论教学视频，中英文字幕可以随意切换，老师发音很好，强推</p><ul><li><p><a href="https://www.bilibili.com/video/BV1sJ411n7aJ?from=search&seid=18376503429056860180">6.0001基础</a></p></li><li><p><a href="https://www.bilibili.com/video/av83124797?spm_id_from=333.788.b_636f6d6d656e74.4">6.0002进价</a></p></li><li><p><a href="https://book.douban.com/subject/30155590/">教材</a></p></li><li><p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/index.htm">6.0002课后练习</a></p></li><li><p><a href="https://pan.baidu.com/s/1hqxh8ag#list/path=%2F">配套ppt</a></p></li></ul><p>没有找到与最新视频配套的slide，只找到15年的.</p><h4 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h4>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课程设计】最小生成树应用</title>
      <link href="2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/"/>
      <url>2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>本次课程设计要求在n个城市之间架设n-1条线路，实现这几个城市之间的网络通信，要求网络经济代价最低。具体要求如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi1iN2U3M2JhMjE3ODgyMWVmLmpwZw?x-oss-process=image/format,png"></p><p>问题分析<br>根据设计要求，我们假设城市之间的距离越大架设网线的经济代价越大，因此可以用两个城市之间的距离作为边的权重。</p><p>n个城市之间最多可以生成 1+2+…+(n-1)条边，分别计算出每条边的长度然后对他们进行升序排序，利用并查集得到由n-1条边组成的最小生成树，问题便得到解决。</p><p>为了解决上述问题，需要构建一个城市结构体CITY来表示城市，并且还需要构建EDGE结构体来表示城市与城市的边，并利用随机函数生成城市的坐标。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;stdlib.h&gt;#include&lt;math.h&gt;#define MaxSize (10000)&#x2F;&#x2F;n的取值最大为MaxSize&#x2F;*---------------------结构体定义---------------------*&#x2F;typedef struct City&#123;    &#x2F;&#x2F;城市结构体    int id;&#x2F;&#x2F;城市ID    int x, y;&#x2F;&#x2F;城市的坐标&#125;CITY; typedef struct edges&#123;    &#x2F;&#x2F;边结构体    int s, e;&#x2F;&#x2F;s为起始顶点 e为终止顶点    double cost;&#x2F;&#x2F;边的权值，即两个顶点之间的距离&#125;EDGE; &#x2F;*---------------------生成城市并显示---------------------*&#x2F;void CreateCityPos(CITY *&amp; city, int n)&#123;    &#x2F;&#x2F;随机生成城市坐标    city &#x3D; (CITY*)malloc(sizeof(CITY)* n);    srand((unsigned)time(NULL));&#x2F;&#x2F;设置随机数的种子    for (int i &#x3D; 0; i &lt; n; ++i)    &#123;&#x2F;&#x2F;随机生成n个城市的x,y坐标值        city[i].id &#x3D; i + 1;        city[i].x &#x3D; rand() % 100;        city[i].y &#x3D; rand() % 100;    &#125;&#125;void ShowCityPos(CITY*city, int n)&#123;&#x2F;&#x2F;显示城市信息，城市序号、x坐标和y坐标    printf(&quot;\n各城市的编号及坐标:\n&quot;);    for (int i &#x3D; 0; i &lt; n; ++i)    &#123;        printf(&quot;%d:[%d, %d]\n&quot;, city[i].id, city[i].x, city[i].y);    &#125;&#125; &#x2F;*---------------------计算城市两两之间的距离，生成边数组---------------------*&#x2F;int Sum(int n)&#123;&#x2F;&#x2F;计算n的前n项和，用于根据顶点确定边的数目 当顶点为n时 则最多可以产生Sum(n-1)条边    int sum &#x3D; 0;    for (int i &#x3D; 1; i &lt;&#x3D; n; ++i)        sum +&#x3D; i;    return sum;&#125; double CityDist(const CITY*a, const CITY*b)&#123;&#x2F;&#x2F;计算两个城市之间的距离    return sqrt(double((a-&gt;x - b-&gt;x)*(a-&gt;x - b-&gt;x) + (a-&gt;y - b-&gt;y)*(a-&gt;y - b-&gt;y)));&#125;void CreateEdges(EDGE* &amp; e, CITY* city, int n)&#123;&#x2F;&#x2F;根据城市信息生成城市之间的边    e &#x3D; (EDGE*)malloc(sizeof(EDGE)*Sum(n - 1));&#x2F;&#x2F;边的总数为Sum(n-1)    int cnt &#x3D; 0;    for (int i &#x3D; 0; i &lt; n; ++i)    &#123;        for (int k &#x3D; i + 1; k &lt; n; ++k)        &#123;            (e + cnt)-&gt;s &#x3D; city[i].id;&#x2F;&#x2F;起始顶点            (e + cnt)-&gt;e &#x3D; city[k].id;&#x2F;&#x2F;终止顶点            (e + cnt)-&gt;cost &#x3D; CityDist(&amp;city[i], &amp;city[k]);&#x2F;&#x2F;边的权值            ++cnt;        &#125;    &#125;&#125;void ShowCityEdges(EDGE*edges, int n)&#123;&#x2F;&#x2F;打印边信息    printf(&quot;\n各城市间的距离(城市1-城市2:边权值（距离）)\n&quot;);    &#x2F;&#x2F;show edges:    for (int i &#x3D; 0; i &lt; Sum(n-1); ++i)        printf(&quot;%d-%d : %f\n&quot;, edges[i].s, edges[i].e, edges[i].cost);&#125;   &#x2F;*--------------------KrusKal求最小生成树----------------------*&#x2F;int cmp(const void*a, const void *b)&#123;&#x2F;&#x2F;比较函数 比较两条边的权值 用于排序    EDGE* aa, *bb;    aa &#x3D; (EDGE*)a; bb &#x3D; (EDGE*)b;    if ((aa-&gt;cost - bb-&gt;cost )&gt; 0) return 1;    else return -1;&#125; &#x2F;&#x2F;最小生成树int v[MaxSize];int getRoot(int a)&#123;&#x2F;&#x2F;找到根节点    while (a !&#x3D; v[a]) a &#x3D; v[a];    return a;&#125; void KrusKal(EDGE* edges, int n)&#123;&#x2F;&#x2F;KrusKal算法生成最小生成树    int i;    int e, a, b;        double sum &#x3D; 0.0;    e &#x3D; Sum(n - 1);    for (i &#x3D; 0; i &lt; n; ++i) &#x2F;&#x2F;初始化并查集        v[i] &#x3D; i;     printf(&quot;\n最小生成树的边及权值:\n&quot;);    for (i &#x3D; 0; i &lt; e; ++i)    &#123;        a &#x3D; getRoot(edges[i].s);        b &#x3D; getRoot(edges[i].e);        if (a !&#x3D; b)        &#123;&#x2F;&#x2F;将边并入生成树            v[a] &#x3D; b;            printf(&quot;%d-%d: %f\n&quot;, edges[i].s, edges[i].e, edges[i].cost);&#x2F;&#x2F;打印并入生成树的边的两个顶点和权值            sum +&#x3D; edges[i].cost;&#x2F;&#x2F;计算生成树的总权值        &#125;    &#125;    printf(&quot;\n生成树总权值sum &#x3D;%f\n&quot;, sum);&#125; &#x2F;*------------------------------KrusKal END-------------------------------------*&#x2F; void solve(int n)&#123;    CITY*city;    EDGE* edges;    CreateCityPos(city, n);&#x2F;&#x2F;创建城市    ShowCityPos(city, n);&#x2F;&#x2F;显示城市     CreateEdges(edges, city, n);&#x2F;&#x2F;创建边（根据所有城市两两之间的距离来创建）    qsort(edges, Sum(n - 1), sizeof(EDGE), cmp);&#x2F;&#x2F;对边按权值进行升序排序    ShowCityEdges(edges, n);&#x2F;&#x2F;显示排序后的边     KrusKal(edges, n);&#x2F;&#x2F;用KrusKal算法生成最小生成树&#125; int main()&#123;    int n;     printf(&quot;请输入n:&quot;);    scanf(&quot;%d&quot;, &amp;n);    if (n &lt; 2)        return 1;    solve(n);     return 0;&#125;&#x2F;&#x2F;运行成功 2019年5月21日10:53:07 &#x2F;*程序说明：基本思想：1、首先生成n个城市，每个城市的坐标随机生成，这部分由CreateCityPos（）函数实现；             2、计算n个城市两两之间的距离（距离计算由CityDist()完成），并保存到边数组中，这部分由CreateEdges（）函数实现；         3、由边数组(edges[])根据KrusKal算法求最小生成树，这部分由KrusKal（）函数实现，要注意的是进行KrusKal算法之前，需要对edges[]中的元素按照         权值进行升序排序，因此调用了stdlib.h头文件中的qsort()函数来进行排序。*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi03MjhiZjIyMGNkYzY5NTIyLnBuZw?x-oss-process=image/format,png"></p><p>n为城市的数量，由用户从终端输入。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月30日 多云 不同路径</title>
      <link href="2021/03/30/bu-tong-lu-jing/"/>
      <url>2021/03/30/bu-tong-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/unique-paths/">62</a>题，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330183906.png" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330184245.png" style="zoom:67%;" /><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>根据题面，假设机器人在位置(i, j), 不考虑边界条件，则它可以采取的动作有两个：向下(i+1)或者向右(j+1),定义dp[i][j]为机器人从(i,j)点走到点(m-1, n-1)的路径数，则有：dp[i][j] = dp[i+1][j] + dp[i][j+1],<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330191859.png" style="zoom:67%;" /><br>然后我们再来考虑边界条件，当机器人在红框区域(此时 $i =m-1,  j \in [0 ~, n-2]$ )、蓝框区域（此时 $ i \in [0, m-2] , j=n-1$ )和点(m-1, n-2)时为边界，当机器人在边界上时，它到终点的距离都为1.</p><p>最终答案为dp[0][0]。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">class Solution:    def uniquePaths(self, m: int, n: int) -&gt; int:        dp &#x3D; [[1]*n]*m        for i in range(m-1, -1, -1):            for j in range(n-1, -1,-1):                if i &#x3D;&#x3D; m-1 or j &#x3D;&#x3D; n-1:                    continue                dp[i][j] &#x3D; dp[i+1][j] + dp[i][j+1]        return dp[0][0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变分学习笔记</title>
      <link href="2021/03/29/bian-fen-xue-xi-bi-ji/"/>
      <url>2021/03/29/bian-fen-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="变分推断"><a href="#变分推断" class="headerlink" title="变分推断"></a>变分推断</h1><h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><ul><li><p>文章LAD题目分析</p><span id="more"></span><p>对文本进行自动分析，然后自动从中找出topic</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325161624.png" style="zoom:50%;" /></li><li><p>交通数据分析</p><p>美国湾区出租车数据分析，用变分推断的方法可以在一台笔记本电脑上面完成大量数据的计算</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162352.png" style="zoom:50%;" /></li></ul><h3 id="贝叶斯推断概述"><a href="#贝叶斯推断概述" class="headerlink" title="贝叶斯推断概述"></a>贝叶斯推断概述</h3><h4 id="目标优缺点"><a href="#目标优缺点" class="headerlink" title="目标优缺点"></a>目标优缺点</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162622.png"></p><h4 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162730.png" style="zoom:67%;" /><blockquote><p>接下来主要讲解变分贝叶斯方法，变分贝叶斯方法是近似贝叶斯推断的一大类方法，变分贝叶斯方法又有很多子类，Mean-field变分推断是其中比较有代表性的一类。接下来结合讲解的方法讲三个例子：univariate Gaussian、Mixture of Gaussians和LDA</p></blockquote><h3 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a><a href="https://www.bilibili.com/video/BV1Qf4y1e7jN?from=search&seid=14715651649240686105">贝叶斯推断</a></h3> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325164141.png" style="zoom:67%;" /><blockquote><p>Data是观测变量，Parameters是模型的参数，通过对观测变量$x$取值的观测，我们可以更新参数$z$, 这里$p(x) = \int_{z}^{}{p(x,z)dz}$，实际应用中$z$是一个高维的分布，很难计算$p(z|x)$</p></blockquote><h3 id="近似贝叶斯推断"><a href="#近似贝叶斯推断" class="headerlink" title="近似贝叶斯推断_"></a><a href="https://www.bilibili.com/video/BV1a5411H7eW?from=search&seid=14715651649240686105">近似贝叶斯推断</a>_</h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325210910.png"></p><blockquote><p>直接计算$p(z|x)$复杂度很高很难，然后就有了近似计算（推断）。常用的近似计算有：MCMC方法和基于优化的方法，MCMC方法虽然精度高但是数据量大时计算很慢，基于随机梯度的优化方法可以使用并行加速，因此可以大大的加速计算速度。<br>基于随机梯度优化方法的思路为：找到一个简单的分布$q^*(z) \in Q$来近似p(z|x), 目标$q^*(z)$应该是$Q$中，与$p(z|x)$某种距离最小的那个。<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325212515.png"><br>为什么要用KL散步来度量两个分布的距离呢？<br>KL满足可导和凸性，使得它的计算更快；<br>我们没法通过上式求得$q^*(z)$，需要通过下面的转换把优化KL最小问题进行转换为求$q(z)$使得ELBO最大的问题.<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214048.png"></p></blockquote><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214709.png"></p><blockquote><p>这里的$log p(x)$是一个固定的常数。</p></blockquote><h3 id="平均场推断"><a href="#平均场推断" class="headerlink" title="平均场推断"></a><a href="https://www.bilibili.com/video/BV1Ki4y1w7Z9/?spm_id_from=autoNext">平均场推断</a></h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325223324.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub加速方法</title>
      <link href="2021/03/28/github-jia-su-fang-fa/"/>
      <url>2021/03/28/github-jia-su-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="设置代理加速GitHub"><a href="#设置代理加速GitHub" class="headerlink" title="设置代理加速GitHub"></a>设置代理加速GitHub</h3><p>由于github网站服务器在国外，国内上传和下载数据速度较慢，假如你已经有具备了科学上网的条件，可以通过设置代理的方式来提高数据传输速度。</p><p>以下设置均建立在具备科学上网的前提下，下文中的小飞机指某款用于科学上网的工具。</p><h4 id="设置http代理"><a href="#设置http代理" class="headerlink" title="设置http代理"></a>设置http代理</h4><p>在命令行输入如下的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087#设置http代理，端口号对应的是小飞机的http代理端口号git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1087git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1087#配置github用户名和邮箱git config --global user.name github_idgit config --global user.email github_email#取消代理设置git config --global --unset http.proxygit config --global --unset https.proxy#查看代理设置git config --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>http代理端口查询：</p><blockquote><p>在小飞机中找到“http代理 设置”选项，然后点击打开，找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319193849.png" style="zoom:67%;" /><h4 id="设置ssh加速"><a href="#设置ssh加速" class="headerlink" title="设置ssh加速"></a><a href="https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1">设置ssh</a>加速</h4><p><code>在~/.ssh/config</code> 文件（不存在则新建）添加如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host github.com   HostName github.com   User git   # 走 HTTP 代理，需要 brew install socat   # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport&#x3D;1087   # 走 socks5 代理（如 Shadowsocks）   ProxyCommand nc -v -x 127.0.0.1:1086 %h %p   #上面1086这个端口号可以在“小飞机”的高级设置中查看   # 走 socks5 代理（如 Shadowsocks），Windows 平台没有 nc 命令   # ProxyCommand connect -S 127.0.0.1:1086 %h %p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地Socks5监听窗口查询：</p><blockquote><p>在小飞机中找到“高级设置”，点击打开就可以找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319194610.png" style="zoom:50%;" /><h3 id="通过修改hosts解决浏览器打不开github网站的方法"><a href="#通过修改hosts解决浏览器打不开github网站的方法" class="headerlink" title="通过修改hosts解决浏览器打不开github网站的方法"></a>通过修改hosts解决浏览器打不开github网站的方法</h3><blockquote><p>假如不具备科学上网的条件，也可以通过修改hosts文件来解决浏览器打不开GitHub的问题，但是通过这种方式只能解决浏览器打开慢的问题，不能够解决在终端克隆项目慢的问题，建议通过代理的方式加速。</p></blockquote><span id="more"></span><p>首先从这个<a href="https://zhuanlan.zhihu.com/p/36154464">网站</a>给出的链接中获取(也可以直接用下面的数据)到如下格式的数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">140.82.113.4 github.com199.232.69.194 github.global.ssl.fastly.net185.199.108.153 assets-cdn.github.com185.199.110.153 assets-cdn.github.com185.199.111.153 assets-cdn.github.com185.199.109.153 assets-cdn.github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将这些数据添加到hosts（mac中的路径为：/private/ect/hosts）文件中就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="2021/02/21/hexo-ge-ren-bo-ke-da-jian-jiao-cheng/"/>
      <url>2021/02/21/hexo-ge-ren-bo-ke-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p>前沿： <a href="file:///Users/lyong/Desktop/Skylyong.github.io-main/2021/02/21/build/index.html">hexo</a>和<a href="https://themes.gohugo.io/hugo-swift-theme/">hugo</a>是常用的个人博客搭建框架，hexo技术更成熟稳定，但是速度慢，而基于go语言的hugo拥有速度快的优点，但是由于出现较晚，它的技术还不够成熟，也没有相对稳定的主题。</p><h4 id="首次搭建"><a href="#首次搭建" class="headerlink" title="首次搭建"></a>首次搭建</h4><p>今晚用了3个小时搭建了基于hexo的个人博客，现在记录一下。</p><p>主要参考了下面几个链接</p><ul><li><p>博客搭建链接: <a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></p></li><li><p>pure主题使用链接: <a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p></li><li><p>next主题使用教程: <a href="https://theme-next.iissnan.com/theme-settings.html#tags-page">https://theme-next.iissnan.com/theme-settings.html#tags-page</a></p></li><li><p>next主题进一步完善: <a href="https://tding.top/top/">https://tding.top/top/</a></p></li></ul><p>有一点要注意：教程中设置域名解析的时候不应该使用A模式，都应该使用CNAME模式</p><ul><li><p>hexo常用命令</p></li><li><p>新建博客：hexo n “bolg’s name”</p></li><li><p>发布博客用如下三个命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h4><p>今天为博客增加了<a href="http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/">记录阅读次数</a>和<a href="https://vic.kim/2019/05/22/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">站内搜索</a>的功能。其中添加记录阅读次数功能相对麻烦，需要注册<a href="https://console.leancloud.cn/">leancloud</a>的账号，并且按照教程进行相应设置，如果遇到不能够正常显示阅读次数，要安装相关插件；站内搜索功能比较简单，按照链接中的教程一步步操作就好了。</p><h4 id="设置github免费图床"><a href="#设置github免费图床" class="headerlink" title="设置github免费图床"></a>设置github免费图床</h4><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">这里</a>下载对应版本的PicGo(我选择的是2.2.2版本)，然后根据这个<a href="https://learnku.com/articles/48574">教程</a>设置图床，设置好图床后就可以把本地的图片上传到github服务器，生成链接，方便写markdown的时候引用。</p><h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>设置好评论，默认是每一篇文章，包括”关于“等页面下面都会生成评论对话框，如果想关闭某一篇文章下面的评论对话框，可以参考<a href="https://nobige.cn/post/20190718-hexoxiavalineguanbijingzhimougewenzhangyemianpinglun/">这里</a>。</p><h4 id="电脑奔溃，我弃用next主题了"><a href="#电脑奔溃，我弃用next主题了" class="headerlink" title="电脑奔溃，我弃用next主题了"></a>电脑奔溃，我弃用next主题了</h4><ul><li>matery主题配置: <a href="https://www.jianshu.com/p/cf9730925b5c">https://www.jianshu.com/p/cf9730925b5c</a></li><li>matery主题深度配置: <a href="https://bbs.huaweicloud.com/blogs/226867">https://bbs.huaweicloud.com/blogs/226867</a></li><li>matery主题优秀博客: <a href="https://notes.zhangxiaocai.cn/">https://notes.zhangxiaocai.cn/</a></li></ul><h4 id="logo设计"><a href="#logo设计" class="headerlink" title="logo设计"></a>logo设计</h4><ul><li>在线免费logo设计：<a href="http://yeelogo.com/#/">http://yeelogo.com/#/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的免费无广告电影网站推荐</title>
      <link href="2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/"/>
      <url>2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>今日阳光明媚，中午坐在阳台上面感受着春日暖风拂面，不由得让人想找一部电影伴着暖阳体验一番春日周末的慢生活。相信有不少同学跟我一样，不喜欢充视频网站的会员，更不喜欢看电影之前漫长的广告。好在日常生活中碰到好用的电影网站我都会加在收藏夹中，下面整理一下分享给各位喜欢看电影的同学。</p><ul><li><p><a href="http://www.fenggoudy1.com/list-read-id-1.html">疯狗电影</a></p><p>  春节期间看《曼达洛人》的时候发现的，优点是有最新的片源，刚刚看了一下，竟然有最新大热的《你好，李焕英》，资源质量一般，虽然看视频没有广告，但是浮窗广告有点多，影响观感，适合喜欢尝鲜但是对资源质量要求不高的同学。</p><p>  资源存量指数：★★★☆☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★☆☆☆☆</p></li><li><p><a href="https://91kanju.com/vod-play/57173-2-1.html">91看剧</a></p><p>  这个网站的资源以电视剧为主，也有不少电影资源，资源比较多，但是有些资源加载时间比较长，资源质量一般，刚刚测试了一下不用翻墙也可以访问。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://www.wandouys.com/">豌豆影视</a></p><p>  这是我用得最久的免费电影网站，它片源多，新上映的电影也可以在上面找到。缺点是需要翻墙才能解析到视频网址（网址解析之后不用翻墙可以看），视频质量没有保障，喜欢高清电影的同学可能要失望了；网站有时候不稳定，看视频会卡顿。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★★☆☆</p><p>  个人推荐指数：★★★☆☆</p></li><li><p><a href="https://速影tv.com/movie/5.html">速影TV</a></p><p>  这个网站个人不常用，不记得是怎么发现的了，它的片源比较多，但是资源质量不高，貌似需要翻墙才可以看。虽不常用，但是找不到片源的时候，在这上面找找也可能有意外收获。</p><p>  资源存量指数：★★★★☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://ddrk.me/the-witches/">低端电影</a></p><p>  这个网站是前段时间无意中从google中搜索到的，优点是广告少，片源都是高清的电影，还不用翻墙；缺点是资源量不大，不过许多经典电影和电视剧的资源都可以在里面找到，很不错，十分推荐。</p><p>  资源存量指数：★★☆☆☆</p><p>  视频质量指数：★★★★★</p><p>  个人推荐指数：★★★★★</p></li></ul><ul><li><p><a href="https://www.d123movies.to/">123movies</a></p><p>  这个网站是国外的免费电影、电视剧网站，网站的视频都提供了英文字幕，特别适合于学习英语，非常不错，十分推荐。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★★★★</p><p>  个人推荐指数：★★★★★</p><p>  上面推荐的网站有时候可能会被封掉，最后再推荐一个存储电影资源网址的<a href="http://www.dyhz1.com/">站点</a>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
