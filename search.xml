<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习参考资料</title>
      <link href="2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/"/>
      <url>2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/</url>
      
        <content type="html"><![CDATA[<p>机器学习参考资料：</p><ul><li><p>机器学习参考书籍：</p><ul><li>《神经网络与深度学习》书籍及PPT：<a href="https://nndl.github.io/">https://nndl.github.io/</a></li><li>《统计学习方法》李航著</li><li>《机器学习》周志华著</li><li>《南瓜书》：<a href="https://datawhalechina.github.io/pumpkin-book/%EF%BC%8C">https://datawhalechina.github.io/pumpkin-book/，</a> <a href="https://github.com/datawhalechina/pumpkin-book">https://github.com/datawhalechina/pumpkin-book</a></li><li>《迁移学习》杨强等著</li><li>《联邦学习》杨强等著</li><li>Python Machine Learning： <a href="https://github.com/rasbt/python-machine-learning-book">https://github.com/rasbt/python-machine-learning-book</a></li><li>深度学习：英文版（ <a href="https://www.deeplearningbook.org/%EF%BC%89%E3%80%81%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%88">https://www.deeplearningbook.org/）、中文版（</a> <a href="https://github.com/exacity/deeplearningbook-chinese%EF%BC%89">https://github.com/exacity/deeplearningbook-chinese）</a></li><li>《强化学习Reinforcement Learning（第2版）》[加]Richard S.Sutton [美]Andrew G. Barto著，俞凯等译</li></ul></li><li><p>数学类参考书籍：</p><ul><li>凸优化Convex Optimization（<a href="http://stanford.edu/~boyd/cvxbook/%EF%BC%89%E3%80%81">http://stanford.edu/~boyd/cvxbook/）、</a></li><li>线性代数 <a href="https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/index.htm">https://ocw.mit.edu/courses/mathematics/18-06sc-linear-algebra-fall-2011/index.htm</a></li><li>概率论与统计：1）斯坦福课程CS109 Probability for Computer Scientists： <a href="http://web.stanford.edu/class/cs109/%EF%BC%9B2%EF%BC%89Introduction">http://web.stanford.edu/class/cs109/；2）Introduction</a> to Probability, Statistics, and Random Processes： <a href="https://www.probabilitycourse.com/">https://www.probabilitycourse.com/</a></li></ul></li><li><p>机器学习库/平台：</p><ul><li>SKlearn（<a href="https://scikit-learn.org/stable/%EF%BC%89%EF%BC%8CSKlearn%E7%9A%84User">https://scikit-learn.org/stable/），SKlearn的User</a> Guide里总结了很多机器学习模型，可以学习下<a href="https://scikit-learn.org/stable/user_guide.html%E3%80%82%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0%E7%9A%84Python">https://scikit-learn.org/stable/user_guide.html。上面提到的Python</a> Machine Learning书籍中就大量使用SKlearn的API。</li><li>Pytorch： <a href="https://pytorch.org/tutorials/">https://pytorch.org/tutorials/</a></li><li>TensorFlow</li><li>Keras（ <a href="https://keras.io/%EF%BC%89%E7%AD%89%E3%80%82">https://keras.io/）等。</a> </li></ul></li><li><p>线上课程：</p><ul><li>吴恩达教授的视频教学课程（ <a href="https://www.coursera.org/learn/machine-learning%EF%BC%89">https://www.coursera.org/learn/machine-learning）</a></li><li>李宏毅-台湾大学（<a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html%EF%BC%89">http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML20.html）</a></li><li>Google的深度学习课程（<a href="https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187%EF%BC%89">https://www.udacity.com/course/intro-to-tensorflow-for-deep-learning--ud187）</a></li><li>李飞飞教授的计算机视觉课程（<a href="http://cs231n.stanford.edu)/">http://cs231n.stanford.edu）</a></li><li>Richard Socher 的自然语言处理课程（<a href="http://cs224d.stanford.edu)等./">http://cs224d.stanford.edu）等。</a></li></ul></li><li><p>其他资料：</p><ul><li>Machine Learning and Artificial Intelligence and their role in networking： <a href="https://www.bilibili.com/video/av70398058/">https://www.bilibili.com/video/av70398058/</a></li><li>链接：<a href="https://pan.baidu.com/s/1qgYRbtfCLZE8d0MuCSrRLw">https://pan.baidu.com/s/1qgYRbtfCLZE8d0MuCSrRLw</a>  密码:1am4</li><li>链接：<a href="https://pan.baidu.com/s/1YAujUyivMKZcOCUxB9GZlw">https://pan.baidu.com/s/1YAujUyivMKZcOCUxB9GZlw</a> 提取码：wru7<!-- + 博客： --></li></ul></li></ul><blockquote><p>内容摘自<a href="https://tingwang1122.github.io/">王老师</a>的个人主页。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的资源</title>
      <link href="2021/09/19/you-yong-de-zi-yuan/"/>
      <url>2021/09/19/you-yong-de-zi-yuan/</url>
      
        <content type="html"><![CDATA[<p>有用的资源</p><!-- <br> --><ul><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/paper-reading.pdf">How to Read a Paper</a>, by <a href="http://blizzard.cs.uwaterloo.ca/keshav/wiki/index.php/Main_Page">Prof. Srinivasan Keshav</a>.</p></li><li><p><a href="http://dustintran.com/blog/a-research-to-engineering-workflow">A Research to Engineering Workflow</a>, by <a href="http://dustintran.com/">Dr. Dustin Tran</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/mathwriting.pdf">Mathematical Writing</a>, by <a href="https://www-cs-faculty.stanford.edu/~knuth/">Donald E. Knuth</a>,<a href="https://larrabee.soe.ucsc.edu/">Tracy Larrabee</a> and <a href="http://www.math.utah.edu/~roberts/">Paul M. Roberts</a>.</p></li></ul><!-- + [Whitesides' Group: Writing a Paper](), by [George M. Whitesides](https://gmwgroup.harvard.edu/people/george-m-whitesides). --><ul><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/review-writing.pdf">Writing reviews for systems conferences</a>, by <a href="http://people.inf.ethz.ch/troscoe/">Timothy Roscoe</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/how-to-write-a-paper.pdf">How to write a paper</a>, by <a href="http://www-edc.eng.cam.ac.uk/people/mfa2.html">Mike Ashby</a>.</p></li><li><p><a href="https://github.com/Skylyong/Skylyong.github.io/tree/main/files/Leading_Paper_Discussions.pdf">Pointers for Leading Paper Discussions</a>, by <a href="https://www2.eecs.berkeley.edu/Faculty/Homepages/katz.html">Randy H. Katz</a>.</p></li><li><p><a href="https://leongo.cn/2021/09/19/ji-qi-xue-xi-can-kao-zi-liao/">Machine Learning Materials for Beginners</a>.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信标签整理</title>
      <link href="2021/08/14/wei-xin-biao-qian-zheng-li/"/>
      <url>2021/08/14/wei-xin-biao-qian-zheng-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近对微信通讯录做了一次比较彻底的整理，记录一下。</p></blockquote><p>我根据兴趣、人生阶段、亲疏关系和生活四个维度来分类，每个维度的具体分类标签如下：</p><ul><li>按兴趣： 兴趣-户外，兴趣-跑步，兴趣-阅读，兴趣-美食等</li><li>按人生阶段划分为：中学，本科，研究生，兼职等，每一个阶段又可以做进一步划分。<ul><li>中学-同学，中学-校友，中学-老师</li><li>本科-同学，本科-校友，本科-老师</li><li>研究生-同学，研究生-校友，研究生-老师</li><li>兼职-同事，兼职-同行</li></ul></li><li>按亲疏关系可分为：<ul><li>家人</li><li>亲戚</li><li>朋友</li><li>有缘相逢</li></ul></li><li>生活涉及的东西比较杂，我是把“照相、打印和水电等”都放在了“生活便利”这一个标签里面，然后在名字上面做备注，比如“张三|打印”。此外，我把医生、法律人士做了单独的标签，最后加了一个“大佬”标签，方便时刻关注大佬的动态、向大佬靠齐。<ul><li>生活便利</li><li>生活-医务</li><li>生活-法律</li><li>大佬</li></ul></li></ul><p>分好之后才感觉这种二级分类有点繁琐，先用一段时间看看，不行的话再做优化。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具箱</title>
      <link href="2021/08/14/gong-ju-xiang/"/>
      <url>2021/08/14/gong-ju-xiang/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://www.jibing57.com/2019/03/24/share-ShadowsocksX-NG-to-iOS/">Mac下共享ShadowsocksX-NG的梯子给iOS</a></li><li><a href="https://www.cnblogs.com/jserhub/p/11770585.html">GitHub 设置和取消代理，加速 git clone</a></li><li><a href="https://www.zxgj.cn/g/rznl">在线智商测试</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教师资格证考试学习笔记</title>
      <link href="2021/08/13/jiao-shi-zi-ge-zheng-kao-shi-xue-xi-bi-ji/"/>
      <url>2021/08/13/jiao-shi-zi-ge-zheng-kao-shi-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="科目一"><a href="#科目一" class="headerlink" title="科目一"></a><a href="">科目一</a></h3><h3 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=7">科目二</a></h3><h4 id="P2-教育的定义属性和功能"><a href="#P2-教育的定义属性和功能" class="headerlink" title="P2 教育的定义属性和功能"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=2">P2 教育的定义属性和功能</a></h4><ul><li><p>教育的定义</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210813230300.png" alt="img" style="zoom:50%;" /></li></ul><ul><li><p>教育的属性</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225203354.png" alt="20210225203354" style="zoom:50%;" /></li><li><p>教育的功能</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225203732.png" alt="20210225203732" style="zoom:50%;" /></li></ul><h4 id="P3-教育的起源和发展"><a href="#P3-教育的起源和发展" class="headerlink" title="P3 教育的起源和发展"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=3">P3 教育的起源和发展</a></h4><ul><li><p>教育的起源</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225204527.png" alt="20210225204527" style="zoom:50%;" /><p> 最古老的教育起源论是：神话起源论；第一个正式学说：生物起源论；现代广泛认可的学说：劳动起源论。</p></li><li><p>教育的发展</p><ul><li><p>原始社会</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225205341.png" alt="20210225205341" style="zoom:50%;" /></li><li><p>古代社会</p><ul><li>奴隶社会</li></ul><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225205938.png" alt="20210225205938" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225210046.png" alt="20210225210046" style="zoom:50%;" /><ul><li><p>封建社会</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225210603.png" alt="20210225210603" style="zoom:67%;" /><ul><li>近现代教育</li></ul></li></ul></li></ul></li></ul><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225210924.png" alt="20210225210924" style="zoom: 50%;" /><h4 id="P4-教育学的产生与发展"><a href="#P4-教育学的产生与发展" class="headerlink" title="P4 教育学的产生与发展"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=4&spm_id_from=pageDriver">P4 教育学的产生与发展</a></h4><ul><li>教育学的概念</li></ul><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225211556.png" alt="20210225211556" style="zoom:50%;" />  <ul><li><p>教育学的萌芽阶段</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225212025.png" alt="20210225212025" style="zoom:50%;" /> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20210225212534.png" alt="20210225212534" style="zoom:50%;" /></li></ul><h4 id="P5-教育学的产生与发展"><a href="#P5-教育学的产生与发展" class="headerlink" title="P5 教育学的产生与发展"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=5&spm_id_from=pageDriver">P5 教育学的产生与发展</a></h4><ul><li>学习目标：掌握并识记教育学独立发展阶段及多样化发展阶段代表人物及其著作、教育思想。</li></ul><h4 id="P6"><a href="#P6" class="headerlink" title="P6"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=6&spm_id_from=pageDriver">P6</a></h4><h4 id="P7-教育与社会发展"><a href="#P7-教育与社会发展" class="headerlink" title="P7 教育与社会发展"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=7">P7 教育与社会发展</a></h4><h4 id="P8-教育与人的发展"><a href="#P8-教育与人的发展" class="headerlink" title="P8 教育与人的发展"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=8&spm_id_from=pageDriver">P8 教育与人的发展</a></h4><h4 id="P9-教育制度"><a href="#P9-教育制度" class="headerlink" title="P9 教育制度"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=9&spm_id_from=pageDriver">P9 教育制度</a></h4><ul><li><p>教育制度的概念</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210228232341.png" alt="20210228232341" style="zoom:50%;" /><p>教育制度的概念分为广义教育制度和狭义教育制度，其中广义教育制度主要指国民教育制度，狭义的教育制度指学校教育制度，简称学制。</p></li><li><p>建立学制的依据</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210228233027.png" alt="20210228233027" style="zoom:50%;" /></li><li><p>学制的形式发展</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210228233313.png" alt="20210228233313" style="zoom:50%;" /><ul><li><p>现代学制的类型</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210228233821.png" alt="20210228233821" style="zoom:50%;" /><p>分支制：初中之后分支。</p></li><li><p>我国现代学制的沿革</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210228234156.png" alt="20210228234156" style="zoom:50%;" /></li></ul><p>《钦定学堂章程》是第一个现代学制，但是它没有实施；《凑定学堂章程》第一个实行的现代学制，提出“中学为体，西学为用”的思想。</p><ul><li>现代教育制度发展趋势<ul><li>义务教育</li><li>终身教育</li></ul></li></ul></li></ul><h4 id="P10-教育目的"><a href="#P10-教育目的" class="headerlink" title="P10 教育目的"></a><a href="https://www.bilibili.com/video/BV1sk4y1q7pM?p=10&spm_id_from=pageDriver">P10 教育目的</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> 教师资格证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google访问助手安装</title>
      <link href="2021/08/13/google-fang-wen-zhu-shou-an-zhuang/"/>
      <url>2021/08/13/google-fang-wen-zhu-shou-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="Google访问助手安装"><a href="#Google访问助手安装" class="headerlink" title="Google访问助手安装"></a>Google访问助手安装</h3><p>今天用图书馆电脑的时候发现不能访问google，非常不方便搜索文献，因此研究了一下google上网助手，记录一下。</p><ul><li><h3 id="IGG谷歌访问助手"><a href="#IGG谷歌访问助手" class="headerlink" title="IGG谷歌访问助手"></a><a href="https://iguge.app/">IGG谷歌访问助手</a></h3><blockquote><p>该助手具有如下特点：</p><ul><li>免费提供谷歌搜索</li><li>微软onedrive加速</li><li>不包含YouTube，谷歌网盘</li></ul></blockquote></li><li><h3 id="google上网助手"><a href="#google上网助手" class="headerlink" title="google上网助手"></a><a href="https://chrome.google.com/webstore/detail/%E8%B0%B7%E6%AD%8C%E4%B8%8A%E7%BD%91%E5%8A%A9%E6%89%8B/nonmafimegllfoonjgplbabhmgfanaka?utm_source=chrome-ntp-icon">google上网助手</a></h3><blockquote><p>该助手具备IGG谷歌访问助手的特点，但是安装的时候需要登录Chrome商店才能够下载，如果没有KX上网，建议读者选择安装“IGG谷歌访问助手”方式访问谷歌。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 干货 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google访问助手 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用数据集整理</title>
      <link href="2021/08/13/chang-yong-shu-ju-ji-zheng-li/"/>
      <url>2021/08/13/chang-yong-shu-ju-ji-zheng-li/</url>
      
        <content type="html"><![CDATA[<h3 id="常用数据集整理"><a href="#常用数据集整理" class="headerlink" title="常用数据集整理"></a>常用数据集整理</h3><p>前沿：所谓”巧妇难为无米之炊“，作为人工智能领域的学习者，免不了要跟数据打交道，有时候我们不得不耗费大量的精力来收集相关数据集。因此， 整理一些常用的数据集，以便不时之需。</p><h4 id="对话数据集"><a href="#对话数据集" class="headerlink" title="对话数据集"></a>对话数据集</h4><h4 id="nlp方向的生物医学"><a href="#nlp方向的生物医学" class="headerlink" title="nlp方向的生物医学"></a>nlp方向的生物医学</h4><ul><li>Symcat’s database</li><li>mz database</li><li>dxy database</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课程设计】图的创建和遍历</title>
      <link href="2021/08/13/tu-de-chuang-jian-he-bian-li/"/>
      <url>2021/08/13/tu-de-chuang-jian-he-bian-li/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>本课程设计主要完成邻接矩阵和邻接表两种不同存储方式的图的建立和遍历，其中遍历部分分别进行了DFS和BFS两种不同形式的遍历。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#include&lt;stdio.h></span><span class="token comment" spellcheck="true">#include&lt;stdlib.h></span><span class="token comment" spellcheck="true">#include&lt;string.h> </span><span class="token comment" spellcheck="true">#include&lt;stack></span><span class="token comment" spellcheck="true">#include&lt;queue></span>using namespace std<span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>图的存储结构定义<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">/</span><span class="token comment" spellcheck="true">#define MaxVerNum 30           </span><span class="token comment" spellcheck="true">#define Vextype char</span><span class="token comment" spellcheck="true">#define EdgeInfoType int</span> <span class="token comment" spellcheck="true">#define INF 999      //无穷大 </span><span class="token comment" spellcheck="true">#define MAXSIZE 100</span> typedef  struct<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    Vextype  vexs<span class="token punctuation">[</span>MaxVerNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    EdgeInfoType edges<span class="token punctuation">[</span>MaxVerNum<span class="token punctuation">]</span><span class="token punctuation">[</span>MaxVerNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    int n<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;MGragh;</span> typedef  struct node<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int adjvex<span class="token punctuation">;</span>    EdgeInfoType  Info<span class="token punctuation">;</span>    struct node <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;EdgeNode;</span> typedef struct vnode<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    Vextype  vertex<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>firstedge<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;VertexNode;</span> typedef  struct<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    VertexNode  adjlist<span class="token punctuation">[</span>MaxVerNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    int   n<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;ALGraph;</span> int visited<span class="token punctuation">[</span>MaxVerNum<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token operator">//</span>顶点访问标记  <span class="token operator">/</span><span class="token operator">*</span>建立图G的邻接矩阵  <span class="token operator">*</span><span class="token operator">/</span>int returnId<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">,</span> char c<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token operator">//</span>返回c在数组中的下标    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>MaxVerNum<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>void CreateGraph<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    scanf<span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     char c<span class="token punctuation">;</span>    int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> getchar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    Vextype s<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    EdgeInfoType cost<span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            g<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>e<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        scanf<span class="token punctuation">(</span><span class="token string">"%c %c %d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>e<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>returnId<span class="token punctuation">(</span>g<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>returnId<span class="token punctuation">(</span>g<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">/</span><span class="token operator">*</span> 根据图的邻接矩阵建立图的邻接表 <span class="token operator">*</span><span class="token operator">/</span>void CreateALGraph<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>mg<span class="token punctuation">,</span> ALGraph <span class="token operator">*</span>alg<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    alg<span class="token operator">-</span><span class="token operator">></span>n <span class="token operator">=</span> mg<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> alg<span class="token operator">-</span><span class="token operator">></span>e <span class="token operator">=</span> mg<span class="token operator">-</span><span class="token operator">></span>e<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>alg<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        alg<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vertex <span class="token operator">=</span> mg<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    int i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    EdgeNode <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> alg<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> alg<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mg<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                s <span class="token operator">=</span> <span class="token punctuation">(</span>EdgeNode<span class="token operator">*</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>EdgeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token operator">-</span><span class="token operator">></span>adjvex <span class="token operator">=</span> j<span class="token punctuation">;</span>                s<span class="token operator">-</span><span class="token operator">></span>Info <span class="token operator">=</span> mg<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                s<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> NULL<span class="token punctuation">;</span>                EdgeNode<span class="token operator">*</span>p <span class="token operator">=</span> alg<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>                s<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                alg<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>打印图<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span> void printGragh<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    printf<span class="token punctuation">(</span><span class="token string">"\n图G的邻接矩阵\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"顶点：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        printf<span class="token punctuation">(</span><span class="token string">"%c\t"</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    printf<span class="token punctuation">(</span><span class="token string">"\n邻接矩阵：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            printf<span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        printf<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>打印图<span class="token punctuation">(</span>邻接表<span class="token punctuation">)</span> void printALGragh<span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    printf<span class="token punctuation">(</span><span class="token string">"\n图G的邻接表\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        printf<span class="token punctuation">(</span><span class="token string">"%c:"</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>         EdgeNode<span class="token operator">*</span> edge <span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>edge<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            printf<span class="token punctuation">(</span><span class="token string">"-->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            printf<span class="token punctuation">(</span><span class="token string">"%d:%d\t"</span><span class="token punctuation">,</span> edge<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">,</span> edge<span class="token operator">-</span><span class="token operator">></span>Info<span class="token punctuation">)</span><span class="token punctuation">;</span>            edge <span class="token operator">=</span> edge<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        printf<span class="token punctuation">(</span><span class="token string">"%\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>   <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>DFS<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">//</span>从顶点v开始图<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span>的深度遍历 void DFS_MG<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">,</span> int v<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int j<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>j<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span>  <span class="token operator">&amp;</span><span class="token operator">&amp;</span>  !visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            DFS_MG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>图的<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span>的深度遍历 void DFSTranverse_MG<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">//</span>初始化访问数组visited的元素值为false    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //节点尚未访问</span>            DFS_MG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>从顶点v开始图<span class="token punctuation">(</span>邻接表<span class="token punctuation">)</span>的深度遍历void DFS_ALG<span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>g<span class="token punctuation">,</span> int v<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>     EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span>g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            DFS_ALG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">//</span>递归深度遍历        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>图<span class="token punctuation">(</span>邻接表<span class="token punctuation">)</span>的深度遍历void DFSTranverse_ALG<span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">//</span>初始化访问数组visited的元素值为false    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //节点尚未访问</span>            DFS_ALG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>BFS<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">/</span> <span class="token operator">//</span>从顶点v开始图<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span>的广度遍历 void BFS_MG<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">,</span> int v<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>     int j<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>int<span class="token operator">></span> Q<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Q<span class="token punctuation">.</span>push<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>!Q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                    v <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>j<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> g<span class="token operator">-</span><span class="token operator">></span>edges<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">//</span> INFINITY<span class="token punctuation">)</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>vexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span>push<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>图<span class="token punctuation">(</span>邻接矩阵<span class="token punctuation">)</span>的广度遍历void BFSTranverse_MG<span class="token punctuation">(</span>MGragh <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">//</span>初始化访问数组visited的元素值为false    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //节点尚未访问</span>            BFS_MG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>从顶点v开始图<span class="token punctuation">(</span>邻接表<span class="token punctuation">)</span>的广度遍历 void BFS_ALG<span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>g<span class="token punctuation">,</span> int v<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    queue<span class="token operator">&lt;</span>int <span class="token operator">></span> Q<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span>push<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>!Q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;     </span>        v <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Q<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            visited<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            printf<span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> g<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">]</span><span class="token punctuation">.</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        Q<span class="token punctuation">.</span>push<span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>adjvex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>            p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">//</span>图<span class="token punctuation">(</span>邻接表<span class="token punctuation">)</span>的广度遍历 void BFSTranverse_ALG<span class="token punctuation">(</span>ALGraph <span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    int i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">//</span>初始化访问数组visited的元素值为false    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>g<span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>!visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; //节点尚未访问</span>            BFS_ALG<span class="token punctuation">(</span>g<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>初始化与销毁<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">/</span>MGragh <span class="token operator">*</span>init_MGraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    MGragh <span class="token operator">*</span>mg <span class="token operator">=</span> <span class="token punctuation">(</span>MGragh <span class="token operator">*</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>MGragh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mg<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        mg<span class="token operator">-</span><span class="token operator">></span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        mg<span class="token operator">-</span><span class="token operator">></span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     <span class="token keyword">return</span> mg<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> ALGraph <span class="token operator">*</span>init_ALGraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    ALGraph <span class="token operator">*</span>alg <span class="token operator">=</span> <span class="token punctuation">(</span>ALGraph <span class="token operator">*</span><span class="token punctuation">)</span>malloc<span class="token punctuation">(</span>sizeof<span class="token punctuation">(</span>ALGraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>alg<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        alg<span class="token operator">-</span><span class="token operator">></span>n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        alg<span class="token operator">-</span><span class="token operator">></span>e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>MaxVerNum<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span>            alg<span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge <span class="token operator">=</span> NULL<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     <span class="token keyword">return</span> alg<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> void destroy_MGraph<span class="token punctuation">(</span>MGragh <span class="token operator">**</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        free<span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>g <span class="token operator">=</span> NULL<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> void destroy_ALGraph<span class="token punctuation">(</span>ALGraph <span class="token operator">**</span>g<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>n<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        EdgeNode <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstedge<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            EdgeNode <span class="token operator">*</span>q <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            free<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        free<span class="token punctuation">(</span><span class="token operator">*</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>g <span class="token operator">=</span> NULL<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span> <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span>main函数<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span><span class="token operator">/</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    freopen<span class="token punctuation">(</span><span class="token string">"数据.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">//</span>创建图（邻接矩阵）     MGragh <span class="token operator">*</span>mG <span class="token operator">=</span> init_MGraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CreateGraph<span class="token punctuation">(</span>mG<span class="token punctuation">)</span><span class="token punctuation">;</span>    printGragh<span class="token punctuation">(</span>mG<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">//</span>创建图（邻接表）     ALGraph <span class="token operator">*</span>alG <span class="token operator">=</span> init_ALGraph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CreateALGraph<span class="token punctuation">(</span>mG<span class="token punctuation">,</span> alG<span class="token punctuation">)</span><span class="token punctuation">;</span>    printALGragh<span class="token punctuation">(</span>alG<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">//</span>DFS遍历    printf<span class="token punctuation">(</span><span class="token string">"\nDFS遍历:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"邻接矩阵:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFSTranverse_MG<span class="token punctuation">(</span>mG<span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"\n邻接表:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFSTranverse_ALG<span class="token punctuation">(</span>alG<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">//</span>BFS遍历    printf<span class="token punctuation">(</span><span class="token string">"\n\nBFS遍历:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"邻接矩阵:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BFSTranverse_MG<span class="token punctuation">(</span>mG<span class="token punctuation">)</span><span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"\n邻接表:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BFSTranverse_ALG<span class="token punctuation">(</span>alG<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">//</span>销毁图    destroy_MGraph<span class="token punctuation">(</span><span class="token operator">&amp;</span>mG<span class="token punctuation">)</span><span class="token punctuation">;</span>    destroy_ALGraph<span class="token punctuation">(</span><span class="token operator">&amp;</span>alG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">//</span>运行成功 <span class="token number">2019</span>年<span class="token number">5</span>月<span class="token number">14</span>日<span class="token number">0</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token number">36</span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210813224449.png" alt="img" style="zoom: 67%;" />]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/08/09/svm-xue-xi-bi-ji/"/>
      <url>2021/08/09/svm-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="SVM学习笔记"><a href="#SVM学习笔记" class="headerlink" title="SVM学习笔记"></a>SVM学习笔记</h2><p><a href="https://www.deeplearningbook.org/">https://www.deeplearningbook.org/</a></p><p><a href="http://page.mi.fu-berlin.de/rojas/neural/neuron.pdf">http://page.mi.fu-berlin.de/rojas/neural/neuron.pdf</a></p><p><a href="https://www.svm-tutorial.com/2014/11/svm-understanding-math-part-1/">https://www.svm-tutorial.com/2014/11/svm-understanding-math-part-1/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pandas学习</title>
      <link href="2021/08/06/pandas-xue-xi/"/>
      <url>2021/08/06/pandas-xue-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Video url: <a href="https://www.youtube.com/watch?v=vmEHCJofslg">https://www.youtube.com/watch?v=vmEHCJofslg</a></p><p>Pandas document: <a href="https://pandas.pydata.org/pandas-docs/stable/reference/index.html#api">https://pandas.pydata.org/pandas-docs/stable/reference/index.html#api</a></p><p>Pracice Pandas:   <a href="https://stratascratch.com/?via=keith">https://stratascratch.com/?via=keith</a></p></blockquote><h3 id="1-Loading-data-into-Pandas"><a href="#1-Loading-data-into-Pandas" class="headerlink" title="1. Loading data into Pandas"></a>1. Loading data into Pandas</h3><blockquote><p>1.1 Loading data from csv format file</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># read data from csv format file</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'pokemon_data.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><blockquote><p> 1.2 Loading data from txt format file</p></blockquote><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># read data from txt format file</span>df_txt <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'pokemon_data.txt'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df_txt<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="2-Read-Data-in-Pandas"><a href="#2-Read-Data-in-Pandas" class="headerlink" title="2. Read Data in Pandas"></a>2. Read Data in Pandas</h3><blockquote><p>2.1 Read head</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span></code></pre><p>2.2 Read each Column</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>Name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span> <span class="token string">'Type 1'</span><span class="token punctuation">,</span> <span class="token string">'HP'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>2.3 Read each Row</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># print the top 4 rows</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>2.4 Read a specific location(R,C)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="3-Sorting-Describing-Data"><a href="#3-Sorting-Describing-Data" class="headerlink" title="3. Sorting/Describing Data"></a>3. Sorting/Describing Data</h3><blockquote><p> 3.1 View data describe</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>3.2 Sorting</p><pre class=" language-python"><code class="language-python">sort_res <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">,</span><span class="token string">'HP'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="4-Making-changes-to-the-data"><a href="#4-Making-changes-to-the-data" class="headerlink" title="4. Making changes to the data"></a>4. Making changes to the data</h3><blockquote><p>4.1 Create a new column</p><pre class=" language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'Total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'HP'</span><span class="token punctuation">]</span> <span class="token operator">+</span> df<span class="token punctuation">[</span><span class="token string">'Attack'</span><span class="token punctuation">]</span>df<span class="token punctuation">[</span><span class="token string">'Total'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>4.2 Delete one column</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Total'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="5-Save-data-to-file"><a href="#5-Save-data-to-file" class="headerlink" title="5. Save data to file"></a>5. Save data to file</h3><blockquote><pre class=" language-python"><code class="language-python">df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'new_data.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="6-Filtering-Data"><a href="#6-Filtering-Data" class="headerlink" title="6. Filtering Data"></a>6. Filtering Data</h3><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 过滤出满足条件的数据，过滤出来的数据会保留原来的序号</span>new_df <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Type 1'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Grass'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Type 2'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Poison'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将过滤出来的数据的序号进行重置</span>new_df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 过滤出“Name”列中包含“Mega”字段的数据</span>new_df <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token operator">~</span>df<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'Mega'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 过滤出“Type 1”列中包含“first”和“grass”字段是数据，并且不区别大小写</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Type 1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'fire|Grass'</span><span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># Ignore case</span><span class="token comment" spellcheck="true"># 用正则表达式过滤“Name”列中满足条件的数据</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'^pi[a-z]*'</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre></blockquote><h3 id="7-Conditional-changes"><a href="#7-Conditional-changes" class="headerlink" title="7. Conditional changes"></a>7. Conditional changes</h3><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 把type 1 列中满足条件(等于'Fire')的内容改为Flamer</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'Type 1'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Fire'</span><span class="token punctuation">,</span> <span class="token string">'Type 1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Flamer'</span></code></pre></blockquote><h3 id="8-Aggregate-Statistics-Groupby"><a href="#8-Aggregate-Statistics-Groupby" class="headerlink" title="8. Aggregate Statistics(Groupby)"></a>8. Aggregate Statistics(Groupby)</h3><blockquote><pre class=" language-python"><code class="language-python">res <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Type 1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'HP'</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="9-Working-with-large-amounts-of-data"><a href="#9-Working-with-large-amounts-of-data" class="headerlink" title="9. Working with large amounts of data"></a>9. Working with large amounts of data</h3><blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分批读取数据，一次读100行</span><span class="token keyword">for</span> df <span class="token keyword">in</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'pokemon_data.csv'</span><span class="token punctuation">,</span> chunk_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习</title>
      <link href="2021/08/05/pytorch-xue-xi/"/>
      <url>2021/08/05/pytorch-xue-xi/</url>
      
        <content type="html"><![CDATA[<!-- ## Pytorch 框架学习 --><p>课程[链接](https: // <a href="http://www.youtube.com/">www.youtube.com</a> / watch?v = c36lUUr864M)</p><h3 id="1-Tensor"><a href="#1-Tensor" class="headerlink" title="1. Tensor"></a>1. Tensor</h3><h4 id="1-1-How-to-create-tensor"><a href="#1-1-How-to-create-tensor" class="headerlink" title="1.1 How to create tensor"></a>1.1 How to create tensor</h4><blockquote><p>构造tensor的方法主要有六种，分别如下：</p><ol><li><p>x = torch.ones(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.zeros(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.rand(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.empty(3, 5, dtype=torch.float, requires_grad = True )</p></li><li><p>x = torch.tensor([1,2,3], dtype=torch.float, requires_grad = True )</p></li><li><p>x_numpy = np.array([1,2,3])<br>x = torch.from_numpy(x_numpy)</p></li></ol></blockquote><h4 id="1-2-对Tensor的各种操作"><a href="#1-2-对Tensor的各种操作" class="headerlink" title="1.2 对Tensor的各种操作"></a>1.2 对Tensor的各种操作</h4><blockquote><ol><li><p>查看数据类型：x.dtype</p></li><li><p>查看size：x.size()</p></li><li><p>如果tensor只有一个值，查看实数值：x.item()</p></li><li><p>改变tensor的形状大小：x = x.view(num_row, num_col)</p></li><li><p>将tensor转为numpy: z = x.detach().numpy()</p></li></ol><p> ​       注意：numpy只能存放到cpu上面,并且不能是包含梯度的tensor，转换之后共享相同的内存</p><ol start="6"><li>构造新的不包含梯度的tensor：z = x.detach()</li></ol><ol start="7"><li>对tensor进行各种转换： .to() eg: x.to(int)</li></ol></blockquote><h4 id="1-3-基本运算"><a href="#1-3-基本运算" class="headerlink" title="1.3 基本运算"></a>1.3 基本运算</h4><blockquote><ol><li>add: z = x+y</li><li>minus: z = x-y</li><li>multi: z = x*y</li><li>div: z = x/y</li><li>切片操作：切片操作十分灵活，用到的时候查询文档</li></ol></blockquote><h3 id="2-Autograd"><a href="#2-Autograd" class="headerlink" title="2. Autograd"></a>2. Autograd</h3><h4 id="2-1-Calculate-the-gradients"><a href="#2-1-Calculate-the-gradients" class="headerlink" title="2.1 Calculate the gradients"></a>2.1 Calculate the gradients</h4><blockquote><p>用 z.backward() 来计算z关于变量的梯度，如果正向计算出来的z是一个实数值，则backward的参数为默认值就好，如果z是一个向量，则调用backward()的时候需要传入一个与z的size相同的向量.</p><p>  如下面的示例所示。</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>y<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">5</span>z <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>y<span class="token punctuation">)</span>z<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dz/dx jacobian matrix to get the grad</span><span class="token comment" spellcheck="true"># z.backward()这一步是用雅可比矩阵来计算梯度，如果正向计算出来的z是</span><span class="token comment" spellcheck="true"># 一个实数值，则backward的参数为默认值就好，如果z是一个向量，则调用</span><span class="token comment" spellcheck="true"># backward()的时候需要传入一个与z的size相同的向量</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># y = x*x*2+x</span><span class="token comment" spellcheck="true"># v = torch.tensor([1.00,0.10,0.200], dtype=torch.float32)</span><span class="token comment" spellcheck="true"># y.backward(v)</span><span class="token comment" spellcheck="true"># </span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span></code></pre><h4 id="2-2-How-to-prevent-pytorch-from-tracking-the-history-and-calculating-this-grad-fn-attribute"><a href="#2-2-How-to-prevent-pytorch-from-tracking-the-history-and-calculating-this-grad-fn-attribute" class="headerlink" title="2.2 How to prevent pytorch from tracking the history and calculating this grad fn attribute."></a>2.2 How to prevent pytorch from tracking the history and calculating this grad fn attribute.</h4><blockquote><p>一共有三种方法让tensor不被计算图追踪梯度，分别是：</p><p>1） x.requires_grad_(False)</p><p>2） x.detach()</p><p>3） with torch.no_grad(): pass</p><p>具体示例如下所示：</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让张量x不在追踪梯度的方法有三种</span><span class="token comment" spellcheck="true"># x.requires_grad_(False)</span><span class="token comment" spellcheck="true"># x.detach()</span><span class="token comment" spellcheck="true"># with torch.no_grad():</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x with grad</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># y without grad</span></code></pre></blockquote><h4 id="2-3-梯度累积"><a href="#2-3-梯度累积" class="headerlink" title="2.3 梯度累积"></a>2.3 梯度累积</h4><blockquote><p>调用backward()来计算梯度的时候，当前轮次的梯度，是之前所有轮次梯度的累积和，在梯度下降学习中这是我们不想看到的，可以调用zero_()函数来将梯度变为0.</p><p>示例如下：</p><pre class=" language-python"><code class="language-python">weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model_output <span class="token operator">=</span> <span class="token punctuation">(</span>weights<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>    model_output<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>weights<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     weights.grad.zero_()</span>    <span class="token comment" spellcheck="true"># 输出结果为：</span><span class="token comment" spellcheck="true"># tensor([3., 3., 3.])</span><span class="token comment" spellcheck="true"># tensor([6., 6., 6.])</span><span class="token comment" spellcheck="true"># 第一个epoch为3，第二个epoch为6，说明梯度在累加</span><span class="token comment" spellcheck="true"># 因为梯度累积是我们不希望看到的，所以每次迭代的时候我们希望梯度</span><span class="token comment" spellcheck="true"># 能够清零，梯度清零用.grad.zero_()函数</span></code></pre></blockquote><h3 id="3-Backpropagation"><a href="#3-Backpropagation" class="headerlink" title="3. Backpropagation"></a>3. Backpropagation</h3><blockquote><p>调用backward()函数来进行反向传播，计算梯度，示例如下：</p><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>w<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token comment" spellcheck="true">## output:</span><span class="token comment" spellcheck="true"># tensor(1., grad_fn=&lt;PowBackward0>)</span><span class="token comment" spellcheck="true"># tensor(-2.)</span></code></pre></blockquote><h3 id="4-Optimize-model-with-automatic-gradient-computation"><a href="#4-Optimize-model-with-automatic-gradient-computation" class="headerlink" title="4. Optimize model with automatic gradient computation"></a>4. Optimize model with automatic gradient computation</h3><h4 id="4-1-用numpy实现回归算法"><a href="#4-1-用numpy实现回归算法" class="headerlink" title="4.1 用numpy实现回归算法"></a>4.1 用numpy实现回归算法</h4><blockquote><p>实现回归算法分为如下几步：</p><p>​    1） 数据准备</p><p>​    2）定义function</p><p>​    3）定义loss function</p><p>​    4） 定义梯度计算公式</p><p>​    5） 编写training loop部分代码</p><p>实现代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># f = w * x </span><span class="token comment" spellcheck="true"># f = 2 * x</span><span class="token comment" spellcheck="true"># 1. 用numpy手动实现</span><span class="token comment" spellcheck="true"># prepare dataset</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>w <span class="token operator">=</span> <span class="token number">0.0</span><span class="token comment" spellcheck="true"># model prediction</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> w<span class="token operator">*</span>x<span class="token comment" spellcheck="true"># loss = MSE</span><span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># gradient</span><span class="token keyword">def</span> <span class="token function">gradient</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">*</span><span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction before training: f(5) = &amp;#123;forward(5):.5f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Training</span>learning_rate <span class="token operator">=</span> <span class="token number">0.1</span>n_iters <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>    dw <span class="token operator">=</span> gradient<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>    w <span class="token operator">-=</span> learning_rate<span class="token operator">*</span>dw    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch &amp;#123;i+1&amp;#125;: w = &amp;#123;w:.3f&amp;#125;, loss = &amp;#123;l:.10f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction after training: f(5) = &amp;#123;forward(5):.5f&amp;#125;'</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="4-2-用pytorch替换数据类型和梯度计算"><a href="#4-2-用pytorch替换数据类型和梯度计算" class="headerlink" title="4.2 用pytorch替换数据类型和梯度计算"></a>4.2 用pytorch替换数据类型和梯度计算</h4><blockquote><p>代码实现思路与4.1一样，没有做任何变化。</p><p>示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 2. Do with pytorch</span>X <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> requires_grad <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># model prediction</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> w<span class="token operator">*</span>x<span class="token comment" spellcheck="true"># loss = MSE</span><span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction before training: f(5) = &amp;#123;forward(5):.5f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Training</span>learning_rate <span class="token operator">=</span> <span class="token number">0.0001</span>n_iters <span class="token operator">=</span> <span class="token number">10000</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> forward<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        w <span class="token operator">-=</span> learning_rate<span class="token operator">*</span>w<span class="token punctuation">.</span>grad        w<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch &amp;#123;i+1&amp;#125;: w = &amp;#123;w:.3f&amp;#125;, loss = &amp;#123;l:.10f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction after training: f(5) = &amp;#123;forward(5):.5f&amp;#125;'</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="4-3-用pytorch来做梯度计算和优化"><a href="#4-3-用pytorch来做梯度计算和优化" class="headerlink" title="4.3 用pytorch来做梯度计算和优化"></a>4.3 用pytorch来做梯度计算和优化</h4><blockquote><p>4.2 我们用了backward()函数来自动计算梯度，但是梯度下降优化算法依然是我们在4.1版本中的手工编写的公式，这里我们在之前的基础上面更进一步，用pytorch框架中的optimizer来替换掉手工编写的梯度下降方法，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1） Design model (input, output size, forward pass)</span><span class="token comment" spellcheck="true"># 2) Construct loss and optimizer</span><span class="token comment" spellcheck="true"># 3) Training loop</span><span class="token comment" spellcheck="true">#    - forward pass: compute prediction</span><span class="token comment" spellcheck="true">#    - backward pass: gradients</span><span class="token comment" spellcheck="true">#    - update weight</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnX <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>x_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>n_samples<span class="token punctuation">,</span> n_features <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token keyword">print</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">,</span> n_features<span class="token punctuation">)</span>input_size <span class="token operator">=</span> n_featuresoutput_size <span class="token operator">=</span> n_featuresmodel <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction before training: f(5) = &amp;#123;model(x_test).item():.5f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Training</span>learning_rate <span class="token operator">=</span> <span class="token number">0.01</span>n_iters <span class="token operator">=</span> <span class="token number">1000</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#     w.grad.zero_()</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span>w<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch &amp;#123;i+1&amp;#125;: w = &amp;#123;w[0][0].item():.3f&amp;#125;, loss = &amp;#123;l:.10f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction after training: f(5) = &amp;#123;model(x_test).item():.5f&amp;#125;'</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="4-4-定义更加复杂的模型"><a href="#4-4-定义更加复杂的模型" class="headerlink" title="4.4 定义更加复杂的模型"></a>4.4 定义更加复杂的模型</h4><blockquote><p>4.3 及其之前的工作，我们对model的定义都及其的简单，这里我们对model进行改进，通过自定义一个LinearRegress对象来定义一个包含两层全连接的网络建模我们的model，隐藏层的激活函数我们选用了relu()激活函数。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1） Design model (input, output size, forward pass)</span><span class="token comment" spellcheck="true"># 2) Construct loss and optimizer</span><span class="token comment" spellcheck="true"># 3) Training loop</span><span class="token comment" spellcheck="true">#    - forward pass: compute prediction</span><span class="token comment" spellcheck="true">#    - backward pass: gradients</span><span class="token comment" spellcheck="true">#    - update weight</span><span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nnX <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>x_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>n_samples<span class="token punctuation">,</span> n_features <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token keyword">print</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">,</span> n_features<span class="token punctuation">)</span>input_size <span class="token operator">=</span> n_featuresoutput_size <span class="token operator">=</span> n_features<span class="token comment" spellcheck="true"># model = nn.Linear(input_size, output_size)</span><span class="token keyword">class</span> <span class="token class-name">LinearRegress</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LinearRegress<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># define layers</span>        self<span class="token punctuation">.</span>lin1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lin2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span>  self<span class="token punctuation">.</span>lin1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>lin2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        model <span class="token operator">=</span> LinearRegress<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction before training: f(5) = &amp;#123;model(x_test).item():.5f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Training</span>learning_rate <span class="token operator">=</span> <span class="token number">0.01</span>n_iters <span class="token operator">=</span> <span class="token number">1000</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>X<span class="token punctuation">)</span>        l <span class="token operator">=</span> loss<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">)</span>        l<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#     w.grad.zero_()</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#         [w, b] = model.parameters()</span><span class="token comment" spellcheck="true">#         print(f'epoch &amp;#123;i+1&amp;#125;: parameters = &amp;#123;model.parameters()&amp;#125;, loss = &amp;#123;l:.10f&amp;#125;')</span>        <span class="token keyword">for</span> parameters <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Prediction after training: f(5) = &amp;#123;model(x_test).item():.5f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Now pytorch can do most of the work for us, of course we still have to design our model</span><span class="token comment" spellcheck="true"># and have to know which loss and optimizer we want to use but we don't have to worry about</span><span class="token comment" spellcheck="true"># the underlying algorithms anymore.</span></code></pre></blockquote><h4 id="4-5-综合示例1"><a href="#4-5-综合示例1" class="headerlink" title="4.5 综合示例1"></a>4.5 综合示例1</h4><blockquote><p>学习完了4.1-4.3的内容，我们对如何手工建模一个模型有了初步的了解，并且知道了pytorch建模深度学习的一般过程，以及它对应的每一个部分的作用，下面我们通过一个综合的示例来加深对所学知识的理解。</p><p>在该示例中，我们首先调用sklearn的datasets库来构建带噪声的逻辑回归数据集，然后构造一个线性模型，并对线性模型进行训练。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 5. 综合示例1</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># 0) create data</span>x_numpy<span class="token punctuation">,</span> y_numpy <span class="token operator">=</span> datasets<span class="token punctuation">.</span>make_regression<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> noise<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x_numpy<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>y_numpy<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(x.shape)</span><span class="token comment" spellcheck="true"># print(y.shape)</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>view<span class="token punctuation">(</span>y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(y.shape)</span>n_sample<span class="token punctuation">,</span> n_features <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token comment" spellcheck="true"># 1) model</span>input_size <span class="token operator">=</span> n_featuresoutput_size <span class="token operator">=</span> <span class="token number">1</span>model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2）loss and optimizer</span>learning_rate <span class="token operator">=</span> <span class="token number">0.01</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3) training loop</span>num_epochs <span class="token operator">=</span> <span class="token number">1000</span>num_iter <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># foreard pass and loss</span> y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span> loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># backward pass</span> loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># updata</span> optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>num_iter <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch:&amp;#123;epoch+1&amp;#125;, loss=&amp;#123;loss.item():.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plot</span>predicted <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_numpy<span class="token punctuation">,</span> y_numpy<span class="token punctuation">,</span> <span class="token string">'ro'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_numpy<span class="token punctuation">,</span> predicted<span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805210347.png" alt="image-20210805210341931" style="zoom:50%;" /></blockquote><h4 id="4-6-综合示例2"><a href="#4-6-综合示例2" class="headerlink" title="4.6  综合示例2"></a>4.6  综合示例2</h4><blockquote><p>之前的示例中我们没有对训练后的模型进行测试，在这个例子中我们增加了模型测试，并且调用sklearn中内置的“乳腺癌”数据集来完成示例，并且对输入特征做了归一化处理。</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 5. 综合示例2</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment" spellcheck="true"># 0) prepare data</span>bc <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_breast_cancer<span class="token punctuation">(</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span>y <span class="token operator">=</span> bc<span class="token punctuation">.</span>data<span class="token punctuation">,</span> bc<span class="token punctuation">.</span>targetn_samples<span class="token punctuation">,</span> n_features <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token comment" spellcheck="true"># print(X.shape)</span><span class="token comment" spellcheck="true"># print(y.shape)</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># scale 对每一列的特征做均值方差归一化处理，如果不做的话学习出来的模型的准确率大大降低</span>sc <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print('X_test before transform:', X_test)</span>X_train <span class="token operator">=</span> sc<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>X_test <span class="token operator">=</span> sc<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print('X_test after transform:', X_test.mean(), X_test.std())</span>X_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>X_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>X_test<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>y_train<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>y_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>y_test<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>y_train <span class="token operator">=</span> y_train<span class="token punctuation">.</span>view<span class="token punctuation">(</span>y_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>y_test <span class="token operator">=</span> y_test<span class="token punctuation">.</span>view<span class="token punctuation">(</span>y_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1) model</span><span class="token comment" spellcheck="true"># f = wx + b, sigmoid at the end</span><span class="token keyword">class</span> <span class="token class-name">LogisticRegression</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_input_features<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>LogisticRegression<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_input_features<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        y_pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> y_pred    model <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>n_features<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2) loss and optimizer</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr <span class="token operator">=</span> learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3) training loop</span>num_epochs <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># foreard pass and loss</span>    y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># backward pass</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># updates</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch:&amp;#123;epoch+1&amp;#125;, loss = &amp;#123;loss.item():.4f&amp;#125;'</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> model<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>    y_pred_cls <span class="token operator">=</span> y_pred<span class="token punctuation">.</span>round<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对sigmoid出来的值进行四舍五入</span><span class="token comment" spellcheck="true">#     print(f'y_pred=&amp;#123;y_pred&amp;#125;, y_pred_cls=&amp;#123;y_pred_cls&amp;#125;')</span>    acc <span class="token operator">=</span> y_pred_cls<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>y_test<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>float<span class="token punctuation">(</span>y_test<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'acc = &amp;#123;acc:.4f&amp;#125;'</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="5-Dataset-and-Dataload-Class"><a href="#5-Dataset-and-Dataload-Class" class="headerlink" title="5. Dataset and Dataload Class"></a>5. Dataset and Dataload Class</h3><h4 id="5-1-Dataset-and-Dataload"><a href="#5-1-Dataset-and-Dataload" class="headerlink" title="5.1 Dataset and Dataload"></a>5.1 Dataset and Dataload</h4><blockquote><p>pytorch中由dataset类管理数据集，可以通过继承dataset类来自定义数据集，代码模板如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> a signel data<span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> length of dataset</code></pre><p>定义好dataset之后，可以通过DataLoader来构造可供训练的迭代器，代码如下：</p><pre class=" language-python"><code class="language-python">dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>示例如下所示：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''epoch = 1 forward and backward pass of ALL training samplesbach_size = number of training samples in one forward &amp; backward passnumber of iterations = number of passes, each pass using [batch_size] number of samplese.g. 100 samples, batch_size = 20 --> 100/20 = 5 iterations for 1 epoch'''</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token punctuation">,</span> DataLoader<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'pytorchLearning'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/Desktop/pytorchLearning'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print (os.getcwd())</span><span class="token keyword">class</span> <span class="token class-name">WineDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># data loading</span>     xy <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'./data/wine/wine.csv'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span>n_samples <span class="token operator">=</span> xy<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>n_samples<span class="token comment" spellcheck="true"># # How we can use dataset</span><span class="token comment" spellcheck="true"># dataset = WineDataset()</span><span class="token comment" spellcheck="true"># first_data = dataset[0]</span><span class="token comment" spellcheck="true"># features, label = first_data</span><span class="token comment" spellcheck="true"># print(features, label)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># # How we can use dataload</span><span class="token comment" spellcheck="true"># dataloader = DataLoader(dataset=dataset, batch_size=4, shuffle=True, num_workers=2)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># dataiter = iter(dataloader)</span><span class="token comment" spellcheck="true"># data = dataiter.next()</span><span class="token comment" spellcheck="true"># features, label = data</span><span class="token comment" spellcheck="true"># print(features, label)</span>dataset <span class="token operator">=</span> WineDataset<span class="token punctuation">(</span><span class="token punctuation">)</span>dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># training loop</span>num_epochs<span class="token operator">=</span><span class="token number">2</span>total_samples <span class="token operator">=</span> len<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span>n_iterations <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>total_samples<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>total_samples<span class="token punctuation">,</span> n_iterations<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># forward backward, update</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch &amp;#123;epoch+1&amp;#125;/&amp;#123;num_epochs&amp;#125;, step &amp;#123;i+1&amp;#125;/&amp;#123;n_iterations&amp;#125;, inputs &amp;#123;inputs.shape&amp;#125;'</span><span class="token punctuation">)</span></code></pre></blockquote><h4 id="5-2-Transforms-for-the-dataset"><a href="#5-2-Transforms-for-the-dataset" class="headerlink" title="5.2 Transforms for the dataset"></a>5.2 Transforms for the dataset</h4><blockquote><p>pytorch通过传入transforms类来对输入的数据进行某种变化，transforms类可以调用库定义好的，也可以根据需要自定义。</p><p>示例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''Transforms can be applied to PIL images, tensor, ndarrays, or custom dataduring criterion of the datasetcomplete list of built-in transforms:https://pytorch.org/docs/stable/torchvision/transforms.htmlOn images---------CenterCrop, Grayscale, Pad, RandomAffine,RandomCrop, RandomHorizontalFlip, RandomHorizonResize, scaleOn Tensors----------LinearTransformation, Normalize, RandomErasingConversion----------ToPILIamage: from tensor or ndarrayToTensor: from numpy.ndarray or PILImageGeneric-------Use LambdaCustom------Write own ClassCompose mutiple Transforms--------------------------composed = transforms.Compose([Rescale(256),                                RandomCrop(224)])torchvision.transforms.Rescale(256)torchvision.transforms.ToTensor()'''</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">class</span> <span class="token class-name">WineDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> transform<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'./data/wine/wine.csv'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>n_samples <span class="token operator">=</span> xy<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># note that we do not convert to tensor here</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        sample <span class="token operator">=</span> self<span class="token punctuation">.</span>x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">:</span>            sample <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>sample<span class="token punctuation">)</span>        <span class="token keyword">return</span> sample    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>n_samples<span class="token keyword">class</span> <span class="token class-name">ToTensor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> targets <span class="token operator">=</span> sample        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>targets<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MulTransform</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> factor<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>factor <span class="token operator">=</span> factor    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sample<span class="token punctuation">)</span><span class="token punctuation">:</span>        inputs<span class="token punctuation">,</span> target <span class="token operator">=</span> sample        inputs <span class="token operator">*=</span> self<span class="token punctuation">.</span>factor        <span class="token keyword">return</span> inputs<span class="token punctuation">,</span> targetdataset <span class="token operator">=</span> WineDataset<span class="token punctuation">(</span>transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>first_data <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>features<span class="token punctuation">,</span> label <span class="token operator">=</span> first_data<span class="token keyword">print</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>composed <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MulTransform<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把两个transforms合并一起应用</span>dataset <span class="token operator">=</span> WineDataset<span class="token punctuation">(</span>transform<span class="token operator">=</span>composed<span class="token punctuation">)</span>first_data <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>features<span class="token punctuation">,</span> label <span class="token operator">=</span> first_data<span class="token keyword">print</span><span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>features<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="6-Softmax-and-Cross-Entropy"><a href="#6-Softmax-and-Cross-Entropy" class="headerlink" title="6. Softmax and Cross-Entropy"></a>6. Softmax and Cross-Entropy</h3><h4 id="6-1-Softmax"><a href="#6-1-Softmax" class="headerlink" title="6.1 Softmax"></a>6.1 Softmax</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Softmax</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>outputs <span class="token operator">=</span> softmax<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'softmax numpy:'</span><span class="token punctuation">,</span> outputs<span class="token punctuation">)</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>outputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'softmax torch:'</span><span class="token punctuation">,</span> outputs<span class="token punctuation">)</span></code></pre><h4 id="6-2-Cross-entropy"><a href="#6-2-Cross-entropy" class="headerlink" title="6.2 Cross entropy"></a>6.2 Cross entropy</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Cross entropy</span><span class="token keyword">def</span> <span class="token function">cross_entropy</span><span class="token punctuation">(</span>actual<span class="token punctuation">,</span> predicted<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>actual<span class="token operator">*</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>predicted<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># y must be one hot encoded</span><span class="token comment" spellcheck="true"># if class 0: [1 0 0]</span><span class="token comment" spellcheck="true"># if class 1: [0 1 0]</span><span class="token comment" spellcheck="true"># if class 2: [0 0 1]</span>Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># y_pred has probabilities</span>y_pred_good <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred_bad <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> cross_entropy<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_pred_good<span class="token punctuation">)</span>l2 <span class="token operator">=</span> cross_entropy<span class="token punctuation">(</span>Y<span class="token punctuation">,</span> y_pred_bad<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss1 numpy:&amp;#123;l1:.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss2 numpy:&amp;#123;l2:.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># cross entropy by pytorch</span><span class="token comment" spellcheck="true"># in pytorch: Use nn.CrossEntropyLoss()</span><span class="token comment" spellcheck="true"># No softmax at the end!</span>loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># nsamples x nclasses = 1x3</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred_good <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred_bad <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_pred_good<span class="token punctuation">,</span> y<span class="token punctuation">)</span>l2 <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_pred_bad<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss1 numpy:&amp;#123;l1:.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss2 numpy:&amp;#123;l2:.4f&amp;#125;'</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> prediction1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y_pred_good<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> prediction2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y_pred_bad<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prediction1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prediction2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 samples</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred_good <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y_pred_bad <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">2.0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_pred_good<span class="token punctuation">,</span> y<span class="token punctuation">)</span>l2 <span class="token operator">=</span> loss<span class="token punctuation">(</span>y_pred_bad<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss1 numpy:&amp;#123;l1.item():.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Loss2 numpy:&amp;#123;l2.item():.4f&amp;#125;'</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> prediction1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y_pred_good<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span> prediction2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>y_pred_bad<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prediction1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>prediction2<span class="token punctuation">)</span></code></pre><h3 id="7-Activation-function"><a href="#7-Activation-function" class="headerlink" title="7. Activation function"></a>7. Activation function</h3><blockquote><p>Activation functions apply a non-linear transform and decide whether a neural should be activated or not.</p><h4 id="Most-popular-activation-functions"><a href="#Most-popular-activation-functions" class="headerlink" title="Most popular activation functions"></a>Most popular activation functions</h4><ol><li>Step function –&gt; Not used in practice</li><li>Sigmoid</li><li>TanH</li><li>ReLU</li><li>Leaky ReLU</li><li>Softmax</li></ol></blockquote><h3 id="8-综合练习-MNIST"><a href="#8-综合练习-MNIST" class="headerlink" title="8. 综合练习 MNIST"></a>8. 综合练习 MNIST</h3><blockquote><ol><li><p>MNIST</p></li><li><p>DataLoader, Transformation</p></li><li><p>Multilayer Neural Net, activation function</p></li><li><p>Loss and Optimizer</p></li><li><p>Tra</p><p>代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> math                                 <span class="token comment" spellcheck="true"># device config</span><span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> optimizer                                 device <span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># hyper parameters</span>input_size <span class="token operator">=</span> <span class="token number">784</span> <span class="token comment" spellcheck="true"># 28x28</span>hidden_size <span class="token operator">=</span> <span class="token number">128</span>num_classes <span class="token operator">=</span> <span class="token number">10</span>num_epochs <span class="token operator">=</span> <span class="token number">2</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span>                                 <span class="token comment" spellcheck="true"># MNIST DataSet</span>train_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                           transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                           transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                           shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>test_dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                           shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>examples <span class="token operator">=</span> iter<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>features<span class="token punctuation">,</span> label <span class="token operator">=</span> examples<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>label<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>                                 <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>features<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># model</span><span class="token keyword">class</span> <span class="token class-name">NeuralNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>NeuralNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>                                     <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>l1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>l2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out                                 model <span class="token operator">=</span> NeuralNet<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># loss and optimizer</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># training loop</span>n_total_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>images<span class="token punctuation">,</span> label<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 100, 1, 28, 28</span>        <span class="token comment" spellcheck="true"># 100, 784</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        label <span class="token operator">=</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                                         <span class="token comment" spellcheck="true"># forward</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> label<span class="token punctuation">)</span>                                         <span class="token comment" spellcheck="true"># backward</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                                         <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'epoch &amp;#123;epoch+1&amp;#125; / &amp;#123;num_epochs&amp;#125;, step &amp;#123;i+1&amp;#125; / &amp;#123;n_total_steps&amp;#125;, loss &amp;#123;loss.item():.4f&amp;#125;'</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># test</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n_correct <span class="token operator">=</span> <span class="token number">0</span>    n_sample <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> images<span class="token punctuation">,</span> label <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        label <span class="token operator">=</span> label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(outputs)</span>                                         <span class="token comment" spellcheck="true"># value, index</span>        _<span class="token punctuation">,</span> prdiction <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        n_correct <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>prdiction<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        n_sample <span class="token operator">+=</span> label<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                                     <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Acc: &amp;#123;100.0*n_correct / n_sample&amp;#125;'</span><span class="token punctuation">)</span>                                 </code></pre><p>运行结果：</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805213343.png" alt="image-20210805213343033" style="zoom:50%;" /></li></ol></blockquote><h3 id="9-Convolutional-Neural-Net-CNN"><a href="#9-Convolutional-Neural-Net-CNN" class="headerlink" title="9.  Convolutional Neural Net(CNN)"></a>9.  Convolutional Neural Net(CNN)</h3><blockquote><p>这里我们通过构造CNN模型并对图片进行分类，采用“CIFAR10”数据集，然后自定义Model，调用“交叉熵损失函数”和“SGD”优化器来对模型训练，模型训练结束之后对分类器的分类准确率进行了测试。</p><p>实验代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token comment" spellcheck="true"># device config</span>device <span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hyper parameters</span>num_epochs <span class="token operator">=</span> <span class="token number">4</span>batch_size <span class="token operator">=</span> <span class="token number">4</span>learning_rate <span class="token operator">=</span><span class="token number">0.001</span><span class="token comment" spellcheck="true"># dataset has PILImage images of range[0,1]</span><span class="token comment" spellcheck="true"># We transform them to Tensor of normalised range[-1, 1]</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>train_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                             download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                             download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>transform<span class="token punctuation">)</span>train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                           shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>test_dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                           shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>classes <span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'plane'</span><span class="token punctuation">,</span> <span class="token string">'car'</span><span class="token punctuation">,</span><span class="token string">'bird'</span><span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'deer'</span><span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">,</span><span class="token string">'frog'</span><span class="token punctuation">,</span>          <span class="token string">'horse'</span><span class="token punctuation">,</span><span class="token string">'ship'</span><span class="token punctuation">,</span><span class="token string">'truck'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">imshow</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> img <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.5</span>  <span class="token comment" spellcheck="true"># unnormalize</span>    npimg <span class="token operator">=</span> img<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>npimg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># model</span><span class="token keyword">class</span> <span class="token class-name">ConvNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ConvNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xmodel <span class="token operator">=</span> ConvNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>n_total_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token punctuation">(</span>images<span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># origin shape:[4,3,32,32] = 4,3, 1024</span>        <span class="token comment" spellcheck="true"># input_layer:3 input channels, 6 output channels, 5 kernel size</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Forward pass</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Backward and optimizer</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Epoch [&amp;#123;epoch+1&amp;#125;/&amp;#123;num_epochs&amp;#125;], Step [&amp;#123;i+1&amp;#125;/&amp;#123;n_total_steps&amp;#125;], Loss: &amp;#123;loss.item():.4f&amp;#125;'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># test</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n_correct <span class="token operator">=</span> <span class="token number">0</span>    n_samples <span class="token operator">=</span> <span class="token number">0</span>    n_class_correct <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    n_class_samples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> images<span class="token punctuation">,</span> labels <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># max returns (value ,index)</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        n_samples <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        n_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            label <span class="token operator">=</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            pred <span class="token operator">=</span> predicted<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>label <span class="token operator">==</span> pred<span class="token punctuation">)</span><span class="token punctuation">:</span>                n_class_correct<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            n_class_samples<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    acc <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> n_correct <span class="token operator">/</span> n_samples    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Accuracy of the network: &amp;#123;acc&amp;#125; %'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        acc <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> n_class_correct<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> n_class_samples<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Accuracy of &amp;#123;classes[i]&amp;#125;: &amp;#123;acc&amp;#125; %'</span><span class="token punctuation">)</span></code></pre></blockquote><h3 id="10-Transfer-Learning"><a href="#10-Transfer-Learning" class="headerlink" title="10. Transfer Learning"></a>10. Transfer Learning</h3><blockquote><p>这里我们学习迁移学习，主要学习如下三个知识点：</p><ol><li><p>ImageFolder: how we can use ImageFolder</p></li><li><p>Scheduler: how we use a scheduler to change the learning rate</p></li><li><p>Transfer Learning</p><p>迁移学习是指在某一个任务上训练好模型，然后将训练好的模型迁移到另外一个任务中，固定模型的某些参数，对另外一些参数进行学习，以便模型能够适应新的任务。</p><p>实验代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Transfer Learning</span>                                 <span class="token comment" spellcheck="true"># 1) ImageFolder: how we can use ImageFolder</span><span class="token comment" spellcheck="true"># 2) Scheduler: how we use a scheduler to change the learning rate</span><span class="token comment" spellcheck="true"># 3) Transfer Learning:</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> lr_scheduler<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> models<span class="token punctuation">,</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> copy                                 <span class="token comment" spellcheck="true"># device config</span>device <span class="token operator">=</span>torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span>                                 mean <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">)</span>std <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                 data_transforms <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'train'</span><span class="token punctuation">:</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'val'</span><span class="token punctuation">:</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>                                 <span class="token comment" spellcheck="true"># import data</span>data_dir <span class="token operator">=</span> <span class="token string">'data/hymenoptera_data'</span>sets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'val'</span><span class="token punctuation">]</span>image_datasets <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x:datasets.ImageFolder(os.path.join(data_dir, x),</span>                                         data_transforms<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> sets<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>dataloaders <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,</span>                                            shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>               <span class="token keyword">for</span> x <span class="token keyword">in</span> sets<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>dataset_sizes <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;x: len(image_datasets[x]) for x in sets&amp;#125;</span>class_names <span class="token operator">=</span> image_datasets<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>classes<span class="token keyword">print</span><span class="token punctuation">(</span>class_names<span class="token punctuation">)</span>                             <span class="token keyword">def</span> <span class="token function">imshow</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Imshow for Tensor."""</span>    inp <span class="token operator">=</span> inp<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    inp <span class="token operator">=</span> std <span class="token operator">*</span> inp <span class="token operator">+</span> mean    inp <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>inp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># Get a batch of training data</span>inputs<span class="token punctuation">,</span> classes <span class="token operator">=</span> next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>dataloaders<span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># Make a grid from batch</span>out <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                              imshow<span class="token punctuation">(</span>out<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token punctuation">[</span>class_names<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> classes<span class="token punctuation">]</span><span class="token punctuation">)</span>                              <span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> scheduler<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    since <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                                  best_model_wts <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>                                      <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Epoch &amp;#123;epoch+1&amp;#125; / &amp;#123;num_epochs&amp;#125;'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span>                                          <span class="token comment" spellcheck="true"># Each epoch has a training and validation phase</span>        <span class="token keyword">for</span> phase <span class="token keyword">in</span> sets<span class="token punctuation">:</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span><span class="token string">'train'</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>                                              running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            running_correct <span class="token operator">=</span> <span class="token number">0.0</span>                                              <span class="token comment" spellcheck="true"># Iterate over data.</span>            <span class="token keyword">for</span> inputs<span class="token punctuation">,</span> labels <span class="token keyword">in</span> dataloaders<span class="token punctuation">[</span>phase<span class="token punctuation">]</span><span class="token punctuation">:</span>                inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                                                  <span class="token comment" spellcheck="true"># forward</span>                <span class="token comment" spellcheck="true"># track history if only training</span>                <span class="token keyword">with</span> torch<span class="token punctuation">.</span>set_grad_enabled<span class="token punctuation">(</span>phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>                    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>                    _<span class="token punctuation">,</span> preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                                                      <span class="token comment" spellcheck="true"># backward + optimizer only if in training phase</span>                    <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                  <span class="token comment" spellcheck="true"># statistics</span>                running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span>inputs<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                running_correct <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>preds <span class="token operator">==</span> labels<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                                              <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'train'</span><span class="token punctuation">:</span>                scheduler<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                                              epoch_loss <span class="token operator">=</span> running_loss <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>            epoch_acc <span class="token operator">=</span> running_correct<span class="token punctuation">.</span>double<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> dataset_sizes<span class="token punctuation">[</span>phase<span class="token punctuation">]</span>                                              <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'&amp;#123;phase&amp;#125; Loss: &amp;#123;epoch_loss:.4f&amp;#125; Acc: &amp;#123;epoch_acc:.4f&amp;#125;'</span><span class="token punctuation">)</span>                                              <span class="token comment" spellcheck="true"># deep copy the model to</span>            <span class="token keyword">if</span> phase <span class="token operator">==</span> <span class="token string">'val'</span> <span class="token operator">and</span> epoch_acc <span class="token operator">></span> best_acc<span class="token punctuation">:</span>                best_acc <span class="token operator">=</span> epoch_acc                best_model_wts <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                      time_elapsed <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>since    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Training complete in &amp;#123;time_elapsed//60:.0f&amp;#125;m &amp;#123;time_elapsed%60:.0fs&amp;#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Best val Acc: &amp;#123;best_acc:4f&amp;#125;'</span><span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true">#load best model weights</span>    model<span class="token punctuation">.</span>load_state_dic<span class="token punctuation">(</span>best_model_wts<span class="token punctuation">)</span>    <span class="token keyword">return</span> model                              model <span class="token operator">=</span> models<span class="token punctuation">.</span>resnet18<span class="token punctuation">(</span>pretrained<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># Here, we need to freeze all the network except the final layer.</span><span class="token comment" spellcheck="true"># We need to set requires_grad == False to freeze the parameters so that the gradients are not computed in backward()</span><span class="token keyword">for</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>                              num_ftrs <span class="token operator">=</span> model<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>in_features                              model<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_ftrs<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>                              criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># Observe that all parameters are being optimized</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># scheduler</span>step_lr_schedule <span class="token operator">=</span> lr_scheduler<span class="token punctuation">.</span>StepLR<span class="token punctuation">(</span>optimizer<span class="token punctuation">,</span> step_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> gamma<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Every 7 step， learning rate multiple by 0.1</span>                              model <span class="token operator">=</span> train_model<span class="token punctuation">(</span>model<span class="token punctuation">,</span> criterion<span class="token punctuation">,</span> optimizer<span class="token punctuation">,</span> step_lr_schedule<span class="token punctuation">,</span> num_epochs<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span></code></pre></li></ol></blockquote><h3 id="11-Tensorboard"><a href="#11-Tensorboard" class="headerlink" title="11. Tensorboard"></a>11. Tensorboard</h3><blockquote><p>Tensorbard是很好的可视化工具，具体可以参考如下的代码。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Tensorboard</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true">############## TENSORBOARD ########################</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token comment" spellcheck="true"># default `log_dir` is "runs" - we'll be more specific here</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">'runs/mnist1'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true"># Device configuration</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'cuda'</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hyper-parameters</span>input_size <span class="token operator">=</span> <span class="token number">784</span>  <span class="token comment" spellcheck="true"># 28x28</span>hidden_size <span class="token operator">=</span> <span class="token number">500</span>num_classes <span class="token operator">=</span> <span class="token number">10</span>num_epochs <span class="token operator">=</span> <span class="token number">1</span>batch_size <span class="token operator">=</span> <span class="token number">64</span>learning_rate <span class="token operator">=</span> <span class="token number">0.001</span><span class="token comment" spellcheck="true"># MNIST dataset</span>train_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span>                                           train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                           transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>MNIST<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">'./data'</span><span class="token punctuation">,</span>                                          train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                          transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Data loader</span>train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>                                           batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                           shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>test_dataset<span class="token punctuation">,</span>                                          batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                                          shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>examples <span class="token operator">=</span> iter<span class="token punctuation">(</span>test_loader<span class="token punctuation">)</span>example_data<span class="token punctuation">,</span> example_targets <span class="token operator">=</span> examples<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>example_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># plt.show()</span><span class="token comment" spellcheck="true">############## TENSORBOARD ########################</span>img_grid <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>example_data<span class="token punctuation">)</span>writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">'mnist_images'</span><span class="token punctuation">,</span> img_grid<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># writer.close()</span><span class="token comment" spellcheck="true"># sys.exit()</span><span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true"># Fully connected neural network with one hidden layer</span><span class="token keyword">class</span> <span class="token class-name">NeuralNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>NeuralNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_size <span class="token operator">=</span> input_size        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>l2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>l1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>l2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># no activation and no softmax at the end</span>        <span class="token keyword">return</span> outmodel <span class="token operator">=</span> NeuralNet<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Loss and optimizer</span>criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true">############## TENSORBOARD ########################</span>writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>model<span class="token punctuation">,</span> example_data<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># writer.close()</span><span class="token comment" spellcheck="true"># sys.exit()</span><span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true"># Train the model</span>running_loss <span class="token operator">=</span> <span class="token number">0.0</span>running_correct <span class="token operator">=</span> <span class="token number">0</span>n_total_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>images<span class="token punctuation">,</span> labels<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># origin shape: [100, 1, 28, 28]</span>        <span class="token comment" spellcheck="true"># resized: [100, 784]</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Forward pass</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Backward and optimize</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        _<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        running_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Epoch [&amp;#123;epoch + 1&amp;#125;/&amp;#123;num_epochs&amp;#125;], Step [&amp;#123;i + 1&amp;#125;/&amp;#123;n_total_steps&amp;#125;], Loss: &amp;#123;loss.item():.4f&amp;#125;'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">############## TENSORBOARD ########################</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'training loss'</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> epoch <span class="token operator">*</span> n_total_steps <span class="token operator">+</span> i<span class="token punctuation">)</span>            running_accuracy <span class="token operator">=</span> running_correct <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">/</span> predicted<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">'accuracy'</span><span class="token punctuation">,</span> running_accuracy<span class="token punctuation">,</span> epoch <span class="token operator">*</span> n_total_steps <span class="token operator">+</span> i<span class="token punctuation">)</span>            running_correct <span class="token operator">=</span> <span class="token number">0</span>            running_loss <span class="token operator">=</span> <span class="token number">0.0</span>            <span class="token comment" spellcheck="true">###################################################</span><span class="token comment" spellcheck="true"># Test the model</span><span class="token comment" spellcheck="true"># In test phase, we don't need to compute gradients (for memory efficiency)</span>class_labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>class_preds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n_correct <span class="token operator">=</span> <span class="token number">0</span>    n_samples <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> images<span class="token punctuation">,</span> labels <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>        images <span class="token operator">=</span> images<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># max returns (value ,index)</span>        values<span class="token punctuation">,</span> predicted <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        n_samples <span class="token operator">+=</span> labels<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        n_correct <span class="token operator">+=</span> <span class="token punctuation">(</span>predicted <span class="token operator">==</span> labels<span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>        class_probs_batch <span class="token operator">=</span> <span class="token punctuation">[</span>F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>output<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> output <span class="token keyword">in</span> outputs<span class="token punctuation">]</span>        class_preds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>class_probs_batch<span class="token punctuation">)</span>        class_labels<span class="token punctuation">.</span>append<span class="token punctuation">(</span>predicted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 10000, 10, and 10000, 1</span>    <span class="token comment" spellcheck="true"># stack concatenates tensors along a new dimension</span>    <span class="token comment" spellcheck="true"># cat concatenates tensors in the given dimension</span>    class_preds <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>batch<span class="token punctuation">)</span> <span class="token keyword">for</span> batch <span class="token keyword">in</span> class_preds<span class="token punctuation">]</span><span class="token punctuation">)</span>    class_labels <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>class_labels<span class="token punctuation">)</span>    acc <span class="token operator">=</span> <span class="token number">100.0</span> <span class="token operator">*</span> n_correct <span class="token operator">/</span> n_samples    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'Accuracy of the network on the 10000 test images: &amp;#123;acc&amp;#125; %'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">############## TENSORBOARD ########################</span>    classes <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> classes<span class="token punctuation">:</span>        labels_i <span class="token operator">=</span> class_labels <span class="token operator">==</span> i        preds_i <span class="token operator">=</span> class_preds<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>        writer<span class="token punctuation">.</span>add_pr_curve<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> labels_i<span class="token punctuation">,</span> preds_i<span class="token punctuation">,</span> global_step<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">###################################################</span></code></pre></blockquote><h3 id="12-Saving-and-Loading-model"><a href="#12-Saving-and-Loading-model" class="headerlink" title="12. Saving and Loading model"></a>12. Saving and Loading model</h3><blockquote><pre><code>2 DIFFERENT WAYS OF SAVING# 1) lazy way: save whole modeltorch.save(model, PATH)# model class must be defined somewheremodel = torch.load(PATH)model.eval()# 2) recommended way: save only the state_dicttorch.save(model.state_dict(), PATH)# model must be created again with parametersmodel = Model(*args, **kwargs)model.load_state_dict(torch.load(PATH))model.eval()</code></pre><p> 示例代码如下:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_input_features<span class="token punctuation">)</span><span class="token punctuation">:</span>    super<span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_input_features<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y_predmodel <span class="token operator">=</span> Model<span class="token punctuation">(</span>n_input_features<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># train your model...</span><span class="token comment" spellcheck="true">####################save all ######################################</span><span class="token keyword">for</span> param <span class="token keyword">in</span> model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save and load entire model</span>FILE <span class="token operator">=</span> <span class="token string">"model.pth"</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">,</span> FILE<span class="token punctuation">)</span>loaded_model <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>FILE<span class="token punctuation">)</span>loaded_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> param <span class="token keyword">in</span> loaded_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token comment" spellcheck="true">############save only state dict #########################</span><span class="token comment" spellcheck="true"># save only state dict</span>FILE <span class="token operator">=</span> <span class="token string">"model.pth"</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> FILE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>loaded_model <span class="token operator">=</span> Model<span class="token punctuation">(</span>n_input_features<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>loaded_model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>FILE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># it takes the loaded dictionary, not the path file itself</span>loaded_model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>loaded_model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###########load checkpoint#####################</span>learning_rate <span class="token operator">=</span> <span class="token number">0.01</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>learning_rate<span class="token punctuation">)</span>checkpoint <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">"epoch"</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token string">"model_state"</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"optim_state"</span><span class="token punctuation">:</span> optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>FILE <span class="token operator">=</span> <span class="token string">"checkpoint.pth"</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>checkpoint<span class="token punctuation">,</span> FILE<span class="token punctuation">)</span>model <span class="token operator">=</span> Model<span class="token punctuation">(</span>n_input_features<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>checkpoint <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>FILE<span class="token punctuation">)</span>model<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'model_state'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>optimizer<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>checkpoint<span class="token punctuation">[</span><span class="token string">'optim_state'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>epoch <span class="token operator">=</span> checkpoint<span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">]</span>model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># - or -</span><span class="token comment" spellcheck="true"># model.train()</span><span class="token keyword">print</span><span class="token punctuation">(</span>optimizer<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Remember that you must call model.eval() to set dropout and batch normalization layers </span><span class="token comment" spellcheck="true"># to evaluation mode before running inference. Failing to do this will yield </span><span class="token comment" spellcheck="true"># inconsistent inference results. If you wish to resuming training, </span><span class="token comment" spellcheck="true"># call model.train() to ensure these layers are in training mode.</span><span class="token triple-quoted-string string">""" SAVING ON GPU/CPU # 1) Save on GPU, Load on CPUdevice = torch.device("cuda")model.to(device)torch.save(model.state_dict(), PATH)device = torch.device('cpu')model = Model(*args, **kwargs)model.load_state_dict(torch.load(PATH, map_location=device))# 2) Save on GPU, Load on GPUdevice = torch.device("cuda")model.to(device)torch.save(model.state_dict(), PATH)model = Model(*args, **kwargs)model.load_state_dict(torch.load(PATH))model.to(device)# Note: Be sure to use the .to(torch.device('cuda')) function # on all model inputs, too!# 3) Save on CPU, Load on GPUtorch.save(model.state_dict(), PATH)device = torch.device("cuda")model = Model(*args, **kwargs)model.load_state_dict(torch.load(PATH, map_location="cuda:0"))  # Choose whatever GPU device number you wantmodel.to(device)# This loads the model to a given GPU device. # Next, be sure to call model.to(torch.device('cuda')) to convert the model’s parameter tensors to CUDA tensors"""</span></code></pre></blockquote><h3 id="13-Summary"><a href="#13-Summary" class="headerlink" title="13. Summary"></a>13. Summary</h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210805230250.png" alt="pytorch" style="zoom:50%;" />]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/07/20/li-bao-chun-writing-perfect-papers/"/>
      <url>2021/07/20/li-bao-chun-writing-perfect-papers/</url>
      
        <content type="html"><![CDATA[<h3 id="李葆春——Writing-Perfect-Papers"><a href="#李葆春——Writing-Perfect-Papers" class="headerlink" title="李葆春——Writing Perfect Papers"></a>李葆春——<a href="https://www.bilibili.com/video/BV18v411n7mr?share_source=copy_web">Writing Perfect Papers</a></h3><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210720225101.png" alt="WechatIMG19487" style="zoom:200%;" />]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Huggingface 预训练模型权重下载的问题</title>
      <link href="2021/07/01/huggingface-yu-xun-lian-mo-xing-quan-chong-xia-zai-de-wen-ti/"/>
      <url>2021/07/01/huggingface-yu-xun-lian-mo-xing-quan-chong-xia-zai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转自<a href="https://www.bilibili.com/read/cv8231417">Hugging face预训练模型</a>和<a href="https://cloud.tencent.com/developer/article/1745037">Huggingface 预训练模型权重下载的问题</a></p></blockquote><p>Hugging face是一个专注于NLP的公司，拥有一个开源的预训练模型库 Transformers ，里面囊括了非常多的模型例如 BERT GPT 等.</p><h4 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h4><p>官网的模型库的地址如下：<a href="https://huggingface.co/models">https://huggingface.co/models</a> </p><h4 id="使用模型"><a href="#使用模型" class="headerlink" title="使用模型"></a>使用模型</h4><p>首先需要安装transformers库，使用以下命令安装：</p><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> transformers</code></pre><p>接下来在代码中调用 <font color=red> AutoTokenizer.from_pretrained</font> 和 <font color=red> AutoModel.from_pretrained </font>即可, 例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> <span class="token operator">*</span>model_name <span class="token operator">=</span> <span class="token string">'hfl/chinese-xlnet-base'</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span></code></pre><p>运行后系统会自动下载相关的模型文件并存放在电脑中。使用Windows模型保存的路径在 <font color=red> C:\Users[用户名].cache\torch\transformers</font>目录下，根据模型的不同下载的东西也不相同</p><p>使用Linux模型保存的路径在 <font color=red> ~/.cache/torch/transformers/ </font>目录下。</p><h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>这些前提是你的电脑有网络可以直接使用代码下载相应的模型文件，但是问题是有些机器是没有外网连接权限或者下载速度非常慢。</p><p>这时候就需要把模型文件下载后在导入代码中，还是以刚才的  <font color=red> hfl/chinese-xlnet-base </font>模型为例，直接在官网搜索模型，点击进入模型的详情界面</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210701024119.png" alt="20210701024119"></p><p>在界面中找到 Files</p><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210701024235.png" alt="20210701024235"></p><p>把弹窗内的文件全部下载下来</p><p>我们假设文件保存在<font color=red> E:\models\hfl\chinese-xlnet-base\ </font>目录下</p><p>我们只需要把<font color=red>model_name </font>修改为下载的文件夹即可</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> <span class="token operator">*</span>model_name <span class="token operator">=</span> <span class="token string">'E:/models/hfl/chinese-xlnet-base/'</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_name<span class="token punctuation">)</span></code></pre><p>这样问题就解决了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 预训练模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter notebook 本地服务器搭建</title>
      <link href="2021/06/21/jupyter-notebook-ben-di-fu-wu-qi-da-jian/"/>
      <url>2021/06/21/jupyter-notebook-ben-di-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<p>今天在实验室的服务器主机上面搭建了jupyter notebook服务器，记录一下搭建步骤，方便以后查看。</p><h4 id="服务器端操作"><a href="#服务器端操作" class="headerlink" title="服务器端操作"></a>服务器端操作</h4><h5 id="生成Jupyter-Notebook配置文件"><a href="#生成Jupyter-Notebook配置文件" class="headerlink" title="生成Jupyter Notebook配置文件"></a>生成Jupyter Notebook配置文件</h5><pre class=" language-bash"><code class="language-bash">$ jupyter notebook --generate-config</code></pre><h5 id="设置登录密码"><a href="#设置登录密码" class="headerlink" title="设置登录密码"></a>设置登录密码</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在命令行输入python命令，进入python交互界面，输入如下命令</span>from notebook.auth <span class="token function">import</span> <span class="token function">passwd</span>passwd<span class="token punctuation">(</span><span class="token punctuation">)</span>Enter password:Verify password:Out<span class="token punctuation">[</span>2<span class="token punctuation">]</span>: <span class="token string">'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'</span></code></pre><p>将生成的代码添加到配置文件中</p><pre class=" language-bash"><code class="language-bash">c.NotebookApp.password <span class="token operator">=</span> u<span class="token string">'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'</span></code></pre><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><pre class=" language-bash"><code class="language-bash">$ vim ~/.jupyter/jupyter_notebook_config.py</code></pre><p>在配置文件中添加如下内容</p><pre class=" language-bash"><code class="language-bash">c.NotebookApp.allow_origin <span class="token operator">=</span> <span class="token string">'*'</span>c.NotebookApp.ip <span class="token operator">=</span> <span class="token string">'0.0.0.0'</span> <span class="token comment" spellcheck="true">#所有绑定服务器的IP都能访问，若想只在特定ip访问，输入ip地址即可</span>c.NotebookApp.port <span class="token operator">=</span> 2021 <span class="token comment" spellcheck="true">#将端口设置为自己喜欢的吧，默认是8888</span>c.NotebookApp.open_browser <span class="token operator">=</span> False <span class="token comment" spellcheck="true">#我们并不想在服务器上直接打开Jupyter Notebook，所以设置成False</span>c.NotebookApp.notebook_dir <span class="token operator">=</span> <span class="token string">'/home/jupyter_projects'</span> <span class="token comment" spellcheck="true">#这里是设置Jupyter的根目录，若不设置将默认root的根目录，不安全</span>c.NotebookApp.allow_root <span class="token operator">=</span> True <span class="token comment" spellcheck="true"># 为了安全，Jupyter默认不允许以root权限启动jupyter</span>c.NotebookApp.allow_remote_access <span class="token operator">=</span> Truec.NotebookApp.password <span class="token operator">=</span> u<span class="token string">'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'</span></code></pre><h5 id="启动jupyter-notebook"><a href="#启动jupyter-notebook" class="headerlink" title="启动jupyter notebook"></a>启动jupyter notebook</h5><p>在终端输入如下命令启动jupyter notebook：</p><pre class=" language-bash"><code class="language-bash">jupyter notebook</code></pre><h4 id="客服端电脑操作"><a href="#客服端电脑操作" class="headerlink" title="客服端电脑操作"></a>客服端电脑操作</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> username@ipaddress -L 2021:127.0.0.1:2021</code></pre><p>最后在本地浏览器输入地址：127.0.0.1:2021 访问</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习中的各种熵</title>
      <link href="2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/"/>
      <url>2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="概念和定义"><a href="#概念和定义" class="headerlink" title="概念和定义"></a>概念和定义</h3><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><h4 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h4><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><p><a href="https://www.cnblogs.com/Arborday/p/10727147.html">https://www.cnblogs.com/Arborday/p/10727147.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/35379531">https://zhuanlan.zhihu.com/p/35379531</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="2021/04/08/git-chang-yong-ming-ling/"/>
      <url>2021/04/08/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="git基于历史commit创建分支"><a href="#git基于历史commit创建分支" class="headerlink" title="git基于历史commit创建分支"></a>git基于历史commit创建分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log<span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">></span> <span class="token operator">&lt;</span>SHA1<span class="token operator">></span> <span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch name<span class="token operator">></span><span class="token comment" spellcheck="true">#也可以直接执行下面的命令</span><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>branch name<span class="token operator">></span> <span class="token operator">&lt;</span>SHA1<span class="token operator">></span> </code></pre><h4 id="git对分支的操作"><a href="#git对分支的操作" class="headerlink" title="git对分支的操作"></a>git对分支的操作</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看远程分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true">#查看本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true">#创建分支</span><span class="token function">git</span> branch branch_name<span class="token comment" spellcheck="true">#切换到分支</span><span class="token function">git</span> checkout branch_name<span class="token comment" spellcheck="true">#删除本地分支</span><span class="token function">git</span> branch -d branch_name<span class="token comment" spellcheck="true">#重命名本地分支</span><span class="token function">git</span> branch -m old new<span class="token comment" spellcheck="true">#重命名远程分支：将远程分支删除，然后将本地分支重命名，最后将本地分支推到远程</span><span class="token function">git</span> push --delete origin old <span class="token comment" spellcheck="true">#删除远程分支</span><span class="token function">git</span> branch -m old new <span class="token comment" spellcheck="true">#重命名本地分支</span><span class="token function">git</span> push origin new <span class="token comment" spellcheck="true">#将本地分支推送到远程</span></code></pre><h4 id="git对比两个分支差异"><a href="#git对比两个分支差异" class="headerlink" title="git对比两个分支差异"></a><a href="https://www.jianshu.com/p/bb97fabb475e">git对比两个分支差异</a></h4>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP知识体系</title>
      <link href="2021/04/08/nlp-zhi-shi-ti-xi/"/>
      <url>2021/04/08/nlp-zhi-shi-ti-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分：机器学习基础篇"><a href="#第一部分：机器学习基础篇" class="headerlink" title="第一部分：机器学习基础篇"></a>第一部分：机器学习基础篇</h3><h4 id="第一章：自然语言处理概述"><a href="#第一章：自然语言处理概述" class="headerlink" title="第一章：自然语言处理概述"></a>第一章：自然语言处理概述</h4><ul><li><p> 自然语言处理的现状与前景</p></li><li><p>自然语言处理应用</p></li><li><p>自然语言处理经典任务</p></li></ul><h4 id="第二章：数据结构与算法基础"><a href="#第二章：数据结构与算法基础" class="headerlink" title="第二章：数据结构与算法基础"></a>第二章：数据结构与算法基础</h4><ul><li><p>时间复杂度、空间复杂度</p></li><li><p>动态规划</p></li><li><p>贪心算法</p></li><li><p>各种排序算法</p></li></ul><h4 id="第三章：分类与逻辑回归"><a href="#第三章：分类与逻辑回归" class="headerlink" title="第三章：分类与逻辑回归"></a>第三章：分类与逻辑回归</h4><ul><li><p>逻辑回归</p></li><li><p>最大似然估计</p></li><li><p>优化与梯度下降法</p></li><li><p>随机梯度下降法</p></li></ul><h4 id="第四章：模型泛化与调参"><a href="#第四章：模型泛化与调参" class="headerlink" title="第四章：模型泛化与调参"></a>第四章：模型泛化与调参</h4><ul><li><p>理解过拟合、防止过拟合</p></li><li><p>L1与L2正则</p></li><li><p>交叉验证</p></li><li><p>正则与MAP估计</p></li></ul><h3 id="第二部分：文本处理篇"><a href="#第二部分：文本处理篇" class="headerlink" title="第二部分：文本处理篇"></a>第二部分：文本处理篇</h3><h4 id="第五章：文本预处理与表示"><a href="#第五章：文本预处理与表示" class="headerlink" title="第五章：文本预处理与表示"></a>第五章：文本预处理与表示</h4><ul><li><p>各类分词算法</p></li><li><p>词的标准化</p></li><li><p>拼写纠错、停用词</p></li><li><p>独热编码表示</p></li><li><p>tf-idf与相似度</p></li><li><p>分布式表示与词向量</p></li><li><p>词向量可视化与评估</p></li></ul><h4 id="第六章：词向量技术"><a href="#第六章：词向量技术" class="headerlink" title="第六章：词向量技术"></a>第六章：词向量技术</h4><ul><li><p>独热编码的优缺点</p></li><li><p>分布式表示的优点</p></li><li><p>静态词向量与动态词向量</p></li><li><p>SkipGram与CBOW</p></li><li><p>SkipGram详解</p></li><li><p>Negative  Sampling</p></li></ul><h4 id="第七章：语言模型"><a href="#第七章：语言模型" class="headerlink" title="第七章：语言模型"></a>第七章：语言模型</h4><ul><li><p>语言模型的作用</p></li><li><p>马尔科夫假设</p></li><li><p>UniGram, BiGram, NGram模型</p></li><li><p>语言模型的评估</p></li><li><p>语言模型的平滑技术</p></li></ul><h3 id="第三部分：序列模型篇"><a href="#第三部分：序列模型篇" class="headerlink" title="第三部分：序列模型篇"></a>第三部分：序列模型篇</h3><h4 id="第八章：隐马尔科夫模型"><a href="#第八章：隐马尔科夫模型" class="headerlink" title="第八章：隐马尔科夫模型"></a>第八章：隐马尔科夫模型</h4><ul><li><p>HMM的应用</p></li><li><p>HMM的Inference</p></li><li><p>维特比算法</p></li><li><p>前向、后向算法</p></li><li><p>HMM的参数估计详解</p></li></ul><h4 id="第九章：线性条件随机场"><a href="#第九章：线性条件随机场" class="headerlink" title="第九章：线性条件随机场"></a>第九章：线性条件随机场</h4><ul><li><p>有向图与无向图</p></li><li><p>生成模型与判别模型</p></li><li><p>从HMM与MEMM</p></li><li><p>MEMM中的标签偏置</p></li><li><p>Log-Linear模型介绍</p></li><li><p>从Log-Linear到LinearCRF</p></li><li><p>LinearCRF的参数估计</p></li></ul><h3 id="第四部分：深度学习与预训练篇"><a href="#第四部分：深度学习与预训练篇" class="headerlink" title="第四部分：深度学习与预训练篇"></a>第四部分：深度学习与预训练篇</h3><h4 id="第十章：深度学习基础"><a href="#第十章：深度学习基础" class="headerlink" title="第十章：深度学习基础"></a>第十章：深度学习基础</h4><ul><li><p>理解神经网络</p></li><li><p>各种常见的激活函数</p></li><li><p>反向传播算法</p></li><li><p>浅层模型与深度模型对比</p></li><li><p>深度学习中的层次表示</p></li><li><p>深度学习中的过拟合</p></li></ul><h4 id="第十一章：RNN与LSTM"><a href="#第十一章：RNN与LSTM" class="headerlink" title="第十一章：RNN与LSTM"></a>第十一章：RNN与LSTM</h4><ul><li><p>从HMM到RNN模型</p></li><li><p>RNN中的梯度问题</p></li><li><p>梯度消失与LSTM</p></li><li><p>LSTM到GRU</p></li><li><p>双向LSTM</p></li><li><p>双向深度LSTM</p></li></ul><h4 id="第十二章：Seq2Seq模型与注意力机制"><a href="#第十二章：Seq2Seq模型与注意力机制" class="headerlink" title="第十二章：Seq2Seq模型与注意力机制"></a>第十二章：Seq2Seq模型与注意力机制</h4><ul><li><p>Seq2Seq模型</p></li><li><p>Greedy Decoding</p></li><li><p>Beam Search</p></li><li><p>长依赖所存在的问题</p></li><li><p>注意力机制的实现</p></li></ul><h4 id="第十三章：动态词向量与ELMo技术"><a href="#第十三章：动态词向量与ELMo技术" class="headerlink" title="第十三章：动态词向量与ELMo技术"></a>第十三章：动态词向量与ELMo技术</h4><ul><li><p>基于上下文的词向量技术</p></li><li><p>图像识别中的层次表示</p></li><li><p>文本领域中的层次表示</p></li><li><p>ELMo模型</p></li><li><p>ELMo的预训练与测试</p></li><li><p>ELMo的优缺点</p></li></ul><h4 id="第十四章：自注意力机制与Transformer"><a href="#第十四章：自注意力机制与Transformer" class="headerlink" title="第十四章：自注意力机制与Transformer"></a>第十四章：自注意力机制与Transformer</h4><ul><li><p>LSTM模型的缺点</p></li><li><p>Transformer概述</p></li><li><p>理解自注意力机制</p></li><li><p>位置信息的编码</p></li><li><p>理解Encoder和Decoder区别</p></li><li><p>理解Transformer的训练与预测</p></li><li><p>Transformer的缺点</p></li></ul><h4 id="第十五章：BERT与ALBERT"><a href="#第十五章：BERT与ALBERT" class="headerlink" title="第十五章：BERT与ALBERT"></a>第十五章：BERT与ALBERT</h4><ul><li><p>自编码介绍</p></li><li><p>Transformer Encoder</p></li><li><p>Masked语言模型</p></li><li><p>BERT模型</p></li><li><p>BERT的不同训练方式</p></li><li><p>ALBERT </p></li></ul><h4 id="第十六章：BERT的其他变种"><a href="#第十六章：BERT的其他变种" class="headerlink" title="第十六章：BERT的其他变种"></a>第十六章：BERT的其他变种</h4><ul><li><p>RoBERTa模型</p></li><li><p>SpanBERT模型</p></li><li><p>FinBERT模型</p></li><li><p>引入先验知识</p></li><li><p>K-BERT</p></li><li><p>KG-BERT</p></li></ul><h4 id="第十七章：GPT与XLNet"><a href="#第十七章：GPT与XLNet" class="headerlink" title="第十七章：GPT与XLNet"></a>第十七章：GPT与XLNet</h4><ul><li><p>Transformer Encoder回顾</p></li><li><p>GPT-1, GPT-2,  GPT-3</p></li><li><p>ELMo的缺点</p></li><li><p>语言模型下同时考虑上下文</p></li><li><p>Permutation LM</p></li><li><p>双流自注意力机制</p></li></ul><h3 id="第五部分：信息抽取与知识图谱篇"><a href="#第五部分：信息抽取与知识图谱篇" class="headerlink" title="第五部分：信息抽取与知识图谱篇"></a>第五部分：信息抽取与知识图谱篇</h3><h4 id="第十八章：命名识别与实体消歧"><a href="#第十八章：命名识别与实体消歧" class="headerlink" title="第十八章：命名识别与实体消歧"></a>第十八章：命名识别与实体消歧</h4><ul><li><p>信息抽取的应用和关键技术</p></li><li><p>命名实体识别</p></li><li><p>NER识别常用技术</p></li><li><p>实体统一技术</p></li><li><p>实体消歧技术</p></li><li><p>指代消解</p></li></ul><h4 id="第十九章：关系抽取"><a href="#第十九章：关系抽取" class="headerlink" title="第十九章：关系抽取"></a>第十九章：关系抽取</h4><ul><li><p>关系抽取的应用</p></li><li><p>基于规则的方法</p></li><li><p>基于监督学习的方法</p></li><li><p>Bootstrap方法</p></li><li><p>Distant Supervision方法</p></li></ul><h4 id="第二十章：句法分析"><a href="#第二十章：句法分析" class="headerlink" title="第二十章：句法分析"></a>第二十章：句法分析</h4><ul><li><p>句法分析的应用</p></li><li><p>CFG介绍</p></li><li><p>从CFG到PCFG</p></li><li><p>评估语法树</p></li><li><p>寻找最好的语法树</p></li><li><p>CKY算法</p></li></ul><h4 id="第二十一章：依存文法分析"><a href="#第二十一章：依存文法分析" class="headerlink" title="第二十一章：依存文法分析"></a>第二十一章：依存文法分析</h4><ul><li><p>从语法分析到依存文法分析</p></li><li><p>依存文法分析的应用</p></li><li><p>基于图算法的依存文法分析</p></li><li><p>基于Transition-based的依存文法分析</p></li><li><p>依存文法的应用案例</p></li></ul><h4 id="第二十二章：知识图谱"><a href="#第二十二章：知识图谱" class="headerlink" title="第二十二章：知识图谱"></a>第二十二章：知识图谱</h4><ul><li><p>知识图谱的重要性</p></li><li><p>知识图谱中的实体与关系</p></li><li><p>非结构化数据与构造知识图谱</p></li><li><p>知识图谱设计</p></li><li><p>图算法的应用</p></li></ul><h3 id="第六部分：模型压缩与图神经网络篇"><a href="#第六部分：模型压缩与图神经网络篇" class="headerlink" title="第六部分：模型压缩与图神经网络篇"></a>第六部分：模型压缩与图神经网络篇</h3><h4 id="第二十三章：模型的压缩"><a href="#第二十三章：模型的压缩" class="headerlink" title="第二十三章：模型的压缩"></a>第二十三章：模型的压缩</h4><ul><li><p>模型压缩重要性</p></li><li><p>常见的模型压缩总览</p></li><li><p>基于矩阵分解的压缩技术</p></li><li><p>基于蒸馏的压缩技术</p></li><li><p>基于贝叶斯模型的压缩技术</p></li><li><p>模型的量化</p></li></ul><h4 id="第二十四章：基于图的学习"><a href="#第二十四章：基于图的学习" class="headerlink" title="第二十四章：基于图的学习"></a>第二十四章：基于图的学习</h4><ul><li><p>图的表示</p></li><li><p>图与知识图谱</p></li><li><p>关于图的常见算法</p></li><li><p>Deepwalk和Node2vec</p></li><li><p>TransE图嵌入算法</p></li><li><p>DSNE图嵌入算法</p></li></ul><h4 id="第二十五章：图神经网络"><a href="#第二十五章：图神经网络" class="headerlink" title="第二十五章：图神经网络"></a>第二十五章：图神经网络</h4><ul><li><p>卷积神经网络回顾</p></li><li><p>在图中设计卷积操作</p></li><li><p>图中的信息传递</p></li><li><p>图卷积神经网络</p></li><li><p>图卷积神经网络的经典应用</p></li></ul><h4 id="第二十六章：GraphSage与GAT"><a href="#第二十六章：GraphSage与GAT" class="headerlink" title="第二十六章：GraphSage与GAT"></a>第二十六章：GraphSage与GAT</h4><ul><li><p>从GCN到GraphSAge</p></li><li><p>注意力机制回归</p></li><li><p>GAT模型详解</p></li><li><p>GAT与GCN比较</p></li><li><p>对于异构数据的处理</p></li></ul><h4 id="第二十七章：图神经网络的其他应用"><a href="#第二十七章：图神经网络的其他应用" class="headerlink" title="第二十七章：图神经网络的其他应用"></a>第二十七章：图神经网络的其他应用</h4><ul><li><p>Node Classification</p></li><li><p>Graph Classification</p></li><li><p>Link Prediction</p></li><li><p>社区挖掘</p></li><li><p>推荐系统</p></li><li><p>图神经网络的未来发展</p></li></ul><h3 id="部分可练习的案例"><a href="#部分可练习的案例" class="headerlink" title="部分可练习的案例"></a>部分可练习的案例</h3><ol><li>实现一个拼写纠错器</li><li>从零实现Word2Vec词向量</li><li>利用SkipGram做推荐</li><li>从零实现HMM模型</li><li>基于Linear-CRF的词性分类器实现</li><li>从零实现深度学习反向传播算法</li><li>实现AI程序帮助写程序</li><li>实现AI程序帮助写文章</li><li>基于Transformer的机器翻译</li><li>基于KG-BERT的知识图谱学习</li><li>基于知识图谱的风控系统</li><li>基于知识图谱的个性化教学</li><li>利用蒸馏算法压缩Transformer</li><li>利用GCN实现社交推荐</li><li>基于GAT的虚假新闻检测</li></ol><h3 id="项目作业"><a href="#项目作业" class="headerlink" title="项目作业"></a>项目作业</h3><ol><li><p>豆瓣电影评分预测</p><p> 涉及到的知识点：</p><ul><li><p>中文分词技术</p></li><li><p>独热编码、tf-idf</p></li><li><p>分布式表示与Word2Vec</p></li><li><p>BERT向量、句子向量</p></li></ul></li></ol><ol start="2"><li><p>智能客服问答系统</p><p> 涉及到的知识点：</p><ul><li><p>问答系统搭建流程</p></li><li><p>文本的向量化表示</p></li><li><p>FastText</p></li><li><p>倒排表</p></li><li><p>问答系统中的召回、排序</p></li></ul></li></ol><ol start="3"><li><p>基于Linear-CRF的医疗实体识别</p><p> 涉及到的知识点：</p><ul><li><p>命名实体识别</p></li><li><p>特征工程</p></li><li><p>评估标准</p></li><li><p>过拟合</p></li></ul></li></ol><ol start="4"><li><p>基于闲聊的对话系统搭建</p><p> 涉及到的知识点：</p><ul><li><p>常见的对话系统技术</p></li><li><p>闲聊型对话系统框架</p></li><li><p>数据的处理技术</p></li><li><p>BERT的使用</p></li><li><p>Transformer的使用</p></li></ul></li></ol><ol start="5"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>医疗专业词汇的使用</p></li><li><p>获取问句的意图</p></li><li><p>问句的解释、提取关键实体</p></li><li><p>转化为查询语句</p></li></ul></li></ol><ol start="6"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>文本摘要生成介绍</p></li><li><p>关键词提取技术</p></li><li><p>图神经网络的摘要生成</p></li><li><p>基于生成式的摘要提取技术</p></li><li><p>文本摘要质量的评估</p></li></ul></li></ol><h3 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h3><table><thead><tr><th>主题</th><th>论文名称</th></tr></thead><tbody><tr><td>机器学习</td><td>XGBoost: A Scalable Tree Boosting System</td></tr><tr><td>机器学习</td><td>Regularization and Variable Selection via the Elastic Net</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>GloVe: Global Vectors for Word Representation</td></tr><tr><td>词向量</td><td>Deep Contexualized Word Representations</td></tr><tr><td>词向量</td><td>Attention is All You Need</td></tr><tr><td>词向量</td><td>BERT: Pretraining of Deep Bidirectional Transformers for Language Understanding</td></tr><tr><td>词向量</td><td>XLNet: Generalized Autoregressive Pretraining for Language Understanding</td></tr><tr><td>词向量</td><td>KG-BERT: BERT for Knowledge Graph Completion</td></tr><tr><td>词向量</td><td>Language Models are Few-shot Learners</td></tr><tr><td>图学习</td><td>Semi-supervised Classification with Graph Convolutional Networks</td></tr><tr><td>图学习</td><td>Graph Attention Networks</td></tr><tr><td>图学习</td><td>GraphSAGE: Inductive Representation Learning on Large Graphs</td></tr><tr><td>图学习</td><td>Node2Vec: Scalable Feature Learning for Networks</td></tr></tbody></table><p>参考链接: <a href="https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g">https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月31日 小雨 最小路径和</title>
      <link href="2021/04/01/zui-xiao-lu-jing-he/"/>
      <url>2021/04/01/zui-xiao-lu-jing-he/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/minimum-path-sum/">64</a>题，和之前的第62题一样，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210401021549.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题的解题思路和之前的第<a href="https://leongo.cn/2021/03/30/bu-tong-lu-jing/">62题</a>很相似，定义dp[i][j]为从第(i, j)点走到右下角的最短路径，则有dp[i][j] = dp[i+1][j] + dp[i][j+1].</p><p>然后我们来考虑边界条件，此题的边际和第62题的边际一样，不同的是边界上面dp值，当在下边界的时候dp[m-1][j] = sum(gird[m-1][j:-1]), 在左边界的时候<br>dp[i][n-1] = sum(grid[i:-1][n-1])， dp[m-1][n-1] = grid[m-1][n-1].</p><p>最终答案为: dp[0][0]</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#这里纠结了不少时间</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> sum<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>         col <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> grid<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">-</span>sum<span class="token punctuation">(</span>col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>一开始声明二维数组的时候用了浅拷贝，改变某一行的值的时候，其他行的值也会跟着改变，但是我这么搞，竟然通过了60多个样例，好像是在第63个样例的时候卡住了（挠头），后面一个个的把dp里面的值打印出来看，才发现原来是用了浅拷贝，导致这样的问题，换成了迭代生成式后，终于AC了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab搭建笔记</title>
      <link href="2021/03/31/gitlab-da-jian-bi-ji/"/>
      <url>2021/03/31/gitlab-da-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="安装gitlab："><a href="#安装gitlab：" class="headerlink" title="安装gitlab："></a><a href="https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_13.8.7-ee.0_amd64.deb">安装gitlab</a>：</h4><pre class=" language-bash"><code class="language-bash">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span></code></pre><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p> 之前已经配置好了，略</p><h4 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a><a href="https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab">gitlab配置</a></h4><p>打开/etc/gitlab/gitlab.rb</p><pre class=" language-bash"><code class="language-bash">external_url <span class="token string">'http://gitlab.bytenlp.site'</span><span class="token comment" spellcheck="true"># 系统端口冲突，我把端口改为了85</span>nginx<span class="token punctuation">[</span><span class="token string">'listen_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 85</code></pre><h4 id="让配置生效，并重启gitlab服务"><a href="#让配置生效，并重启gitlab服务" class="headerlink" title="让配置生效，并重启gitlab服务"></a>让配置生效，并重启gitlab服务</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 重新配置gitlab</span><span class="token function">sudo</span> gitlab-ctl reconfigure<span class="token comment" spellcheck="true"># 重启gitlab</span>gitlab-ctl restart </code></pre><h4 id="在浏览器输入”ip-端口号”查看效果，详细参考这里"><a href="#在浏览器输入”ip-端口号”查看效果，详细参考这里" class="headerlink" title="在浏览器输入”ip:端口号”查看效果，详细参考这里"></a>在浏览器输入”ip:端口号”查看效果，详细参考<a href="https://www.jianshu.com/p/ade38a53b1ac">这里</a></h4><p>参考教程：</p><ul><li> <a href="https://www.jianshu.com/p/bf7b09e234c8">https://www.jianshu.com/p/bf7b09e234c8</a></li><li> <a href="https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a><br>sudo apt-get install gitlab-ee=13.8.7-ee.0</li><li><a href="https://www.jianshu.com/p/ade38a53b1ac">https://www.jianshu.com/p/ade38a53b1ac</a></li></ul><p>测试一下</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语口语练习电影推荐</title>
      <link href="2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/"/>
      <url>2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>我是从喜马拉雅路转粉过来听课的，<a href="https://www.ximalaya.com/waiyu/19111514/">张老师</a>推荐的东西必然是干货。因此利用周末时间搜集整理了一些老师课上推荐的视频资源，方便自己也分享给大家。</p><h4 id="电影推荐"><a href="#电影推荐" class="headerlink" title="电影推荐"></a>电影推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1f1MKRhiGnhXPakdql9BFcQ">The Queen</a> (提取码:gysn)</p></li><li><p><a href="https://pan.baidu.com/s/1thHrc_mUaHD8pFyZwI4g2g">The King’s Speech</a> (提取码:gr42）</p></li><li><p><a href="https://pan.baidu.com/s/1hIyXIJ53H-p_rsCxR0f22Q">Downton Abbey</a> (提取码:cyb9)</p></li><li><p><a href="https://pan.baidu.com/s/1cFcyl3ZZ5TomwZnk0IbbTg">The Holiday</a> (提取码:48ks) 字幕 (提取码:4vix)</p></li><li><p><a href="https://pan.baidu.com/s/1PjDRYpgfXw557lkICTZiWQ">Coco</a> (提取码:tkwx)</p></li><li><p><a href="https://pan.baidu.com/s/10o4jLTT9etBVNlhE9pLgEQ">Darkest Hours</a> (提取码:okwz)</p></li><li><p><a href="https://pan.baidu.com/s/1s406g4lKsv2YPreZ3egBPw">Wonder</a> (提取码:yjog)</p></li><li><p><a href="https://pan.baidu.com/s/1cygoZKcHhtBgF3wA46LXHg">Harry Potter</a> (提取码:cg1w)</p></li><li><p><a href="https://pan.baidu.com/s/1Nptp0lnqBEsoWiGygB7Qgw">Big Hero 6</a> (提取码:g4q4)</p></li><li><p><a href="https://pan.baidu.com/s/1iLHz4MQpkWRUAz6ApnM_yA">Zootopia</a>（提取码:8tmm)</p></li><li><p><a href="https://ddrk.me/frozen-2013/">Frozen 1</a></p></li><li><p><a href="https://ddrk.me/frozen-2/">Frozen 2</a></p></li></ul><h4 id="电视剧推荐"><a href="#电视剧推荐" class="headerlink" title="电视剧推荐"></a>电视剧推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1oLZdVtC2dxQsntKqFpYGzA">Miranda</a> (提取码:ogrp)</p></li><li><p><a href="https://ddrk.me/the-it-crowd/">The IT Crowd</a></p></li><li><p><a href="https://pan.baidu.com/s/1urGHdiTmz4STpnXnGgnw9Q">Friends 磁力链接</a> (提取码: ldlu)（磁力链接可用迅雷下载，具体操作可自行搜索）</p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E6%91%A9%E7%99%BB%E5%AE%B6%E5%BA%AD">Modern Family</a></p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E7%94%9F%E6%B4%BB%E5%A4%A7%E7%88%86%E7%82%B8">TBBT 生活大爆炸</a>（高清下载磁力<a href="magnet:?xt=urn:btih:49CF1C0B0305D8F5031CB99840C09F06EABB79F6&dn=The+Big+Bang+Theory+Season+1-11+Complete+720p&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://9.rarbg.to:2920/announce&tr=udp://tracker.opentrackr.org:1337&tr=udp://tracker.internetwarriors.net:1337/announce&tr=udp://tracker.leechers-paradise.org:6969/announce&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://tracker.pirateparty.gr:6969/announce&tr=udp://tracker.cyberia.is:6969/announce">链接</a>）</p></li></ul><h4 id="科普记录片推荐"><a href="#科普记录片推荐" class="headerlink" title="科普记录片推荐"></a>科普记录片推荐</h4><ul><li><a href="https://www.bilibili.com/video/av70632732?p=2&spm_id_from=pageDriver">国家地理科普101</a></li></ul><p>资料整理不易，如果觉得好的话，记得打赏支持一波，一块钱也是奖励。</p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习视频整理</title>
      <link href="2021/03/31/xue-xi-shi-pin-zheng-li/"/>
      <url>2021/03/31/xue-xi-shi-pin-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="MIT计算机科学导论"><a href="#MIT计算机科学导论" class="headerlink" title="MIT计算机科学导论"></a>MIT计算机科学导论</h4><p>MIT计算机科学导论教学视频，中英文字幕可以随意切换，老师发音很好，强推</p><ul><li><p><a href="https://www.bilibili.com/video/BV1sJ411n7aJ?from=search&seid=18376503429056860180">6.0001基础</a></p></li><li><p><a href="https://www.bilibili.com/video/av83124797?spm_id_from=333.788.b_636f6d6d656e74.4">6.0002进价</a></p></li><li><p><a href="https://book.douban.com/subject/30155590/">教材</a></p></li><li><p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/index.htm">6.0002课后练习</a></p></li><li><p><a href="https://pan.baidu.com/s/1hqxh8ag#list/path=%2F">配套ppt</a></p></li></ul><p>没有找到与最新视频配套的slide，只找到15年的.</p><h4 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h4>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课程设计】最小生成树应用</title>
      <link href="2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/"/>
      <url>2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>本次课程设计要求在n个城市之间架设n-1条线路，实现这几个城市之间的网络通信，要求网络经济代价最低。具体要求如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi1iN2U3M2JhMjE3ODgyMWVmLmpwZw?x-oss-process=image/format,png"></p><p>问题分析<br>根据设计要求，我们假设城市之间的距离越大架设网线的经济代价越大，因此可以用两个城市之间的距离作为边的权重。</p><p>n个城市之间最多可以生成 1+2+…+(n-1)条边，分别计算出每条边的长度然后对他们进行升序排序，利用并查集得到由n-1条边组成的最小生成树，问题便得到解决。</p><p>为了解决上述问题，需要构建一个城市结构体CITY来表示城市，并且还需要构建EDGE结构体来表示城市与城市的边，并利用随机函数生成城市的坐标。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize (10000)</span><span class="token comment" spellcheck="true">//n的取值最大为MaxSize</span><span class="token comment" spellcheck="true">/*---------------------结构体定义---------------------*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> City<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//城市结构体</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市ID</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市的坐标</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>CITY<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> edges<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//边结构体</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s为起始顶点 e为终止顶点</span>    <span class="token keyword">double</span> cost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的权值，即两个顶点之间的距离</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>EDGE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*---------------------生成城市并显示---------------------*/</span><span class="token keyword">void</span> <span class="token function">CreateCityPos</span><span class="token punctuation">(</span>CITY <span class="token operator">*</span><span class="token operator">&amp;</span> city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//随机生成城市坐标</span>    city <span class="token operator">=</span> <span class="token punctuation">(</span>CITY<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CITY<span class="token punctuation">)</span><span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置随机数的种子</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机生成n个城市的x,y坐标值</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowCityPos</span><span class="token punctuation">(</span>CITY<span class="token operator">*</span>city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示城市信息，城市序号、x坐标和y坐标</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n各城市的编号及坐标:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:[%d, %d]\n"</span><span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*---------------------计算城市两两之间的距离，生成边数组---------------------*/</span><span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算n的前n项和，用于根据顶点确定边的数目 当顶点为n时 则最多可以产生Sum(n-1)条边</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">double</span> <span class="token function">CityDist</span><span class="token punctuation">(</span><span class="token keyword">const</span> CITY<span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> CITY<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算两个城市之间的距离</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>x <span class="token operator">-</span> b<span class="token operator">-></span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-></span>x <span class="token operator">-</span> b<span class="token operator">-></span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>y <span class="token operator">-</span> b<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-></span>y <span class="token operator">-</span> b<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateEdges</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span> <span class="token operator">&amp;</span> e<span class="token punctuation">,</span> CITY<span class="token operator">*</span> city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据城市信息生成城市之间的边</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EDGE<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的总数为Sum(n-1)</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>s <span class="token operator">=</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始顶点</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>e <span class="token operator">=</span> city<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止顶点</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>cost <span class="token operator">=</span> <span class="token function">CityDist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>city<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的权值</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowCityEdges</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span>edges<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印边信息</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n各城市间的距离(城市1-城市2:边权值（距离）)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//show edges:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d : %f\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*--------------------KrusKal求最小生成树----------------------*/</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//比较函数 比较两条边的权值 用于排序</span>    EDGE<span class="token operator">*</span> aa<span class="token punctuation">,</span> <span class="token operator">*</span>bb<span class="token punctuation">;</span>    aa <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span> bb <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>aa<span class="token operator">-></span>cost <span class="token operator">-</span> bb<span class="token operator">-></span>cost <span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最小生成树</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到根节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> a <span class="token operator">=</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">KrusKal</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//KrusKal算法生成最小生成树</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化并查集</span>        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n最小生成树的边及权值:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">getRoot</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token function">getRoot</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将边并入生成树</span>            v<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d: %f\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印并入生成树的边的两个顶点和权值</span>            sum <span class="token operator">+</span><span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算生成树的总权值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n生成树总权值sum =%f\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*------------------------------KrusKal END-------------------------------------*/</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    CITY<span class="token operator">*</span>city<span class="token punctuation">;</span>    EDGE<span class="token operator">*</span> edges<span class="token punctuation">;</span>    <span class="token function">CreateCityPos</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建城市</span>    <span class="token function">ShowCityPos</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示城市</span>     <span class="token function">CreateEdges</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建边（根据所有城市两两之间的距离来创建）</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>EDGE<span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对边按权值进行升序排序</span>    <span class="token function">ShowCityEdges</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示排序后的边</span>     <span class="token function">KrusKal</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用KrusKal算法生成最小生成树</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行成功 2019年5月21日10:53:07</span> <span class="token comment" spellcheck="true">/*程序说明：基本思想：1、首先生成n个城市，每个城市的坐标随机生成，这部分由CreateCityPos（）函数实现；             2、计算n个城市两两之间的距离（距离计算由CityDist()完成），并保存到边数组中，这部分由CreateEdges（）函数实现；         3、由边数组(edges[])根据KrusKal算法求最小生成树，这部分由KrusKal（）函数实现，要注意的是进行KrusKal算法之前，需要对edges[]中的元素按照         权值进行升序排序，因此调用了stdlib.h头文件中的qsort()函数来进行排序。*/</span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi03MjhiZjIyMGNkYzY5NTIyLnBuZw?x-oss-process=image/format,png"></p><p>n为城市的数量，由用户从终端输入。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月30日 多云 不同路径</title>
      <link href="2021/03/30/bu-tong-lu-jing/"/>
      <url>2021/03/30/bu-tong-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/unique-paths/">62</a>题，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330183906.png" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330184245.png" style="zoom:67%;" /><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>根据题面，假设机器人在位置(i, j), 不考虑边界条件，则它可以采取的动作有两个：向下(i+1)或者向右(j+1),定义dp[i][j]为机器人从(i,j)点走到点(m-1, n-1)的路径数，则有：dp[i][j] = dp[i+1][j] + dp[i][j+1],<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330191859.png" style="zoom:67%;" /><br>然后我们再来考虑边界条件，当机器人在红框区域(此时 $i =m-1,  j \in [0 ~, n-2]$ )、蓝框区域（此时 $ i \in [0, m-2] , j=n-1$ )和点(m-1, n-2)时为边界，当机器人在边界上时，它到终点的距离都为1.</p><p>最终答案为dp[0][0]。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">*</span>m        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> m<span class="token number">-1</span> <span class="token operator">or</span> j <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变分学习笔记</title>
      <link href="2021/03/29/bian-fen-xue-xi-bi-ji/"/>
      <url>2021/03/29/bian-fen-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="变分推断"><a href="#变分推断" class="headerlink" title="变分推断"></a>变分推断</h1><h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><ul><li><p>文章LAD题目分析</p><span id="more"></span><p>对文本进行自动分析，然后自动从中找出topic</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325161624.png" style="zoom:50%;" /></li><li><p>交通数据分析</p><p>美国湾区出租车数据分析，用变分推断的方法可以在一台笔记本电脑上面完成大量数据的计算</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162352.png" style="zoom:50%;" /></li></ul><h3 id="贝叶斯推断概述"><a href="#贝叶斯推断概述" class="headerlink" title="贝叶斯推断概述"></a>贝叶斯推断概述</h3><h4 id="目标优缺点"><a href="#目标优缺点" class="headerlink" title="目标优缺点"></a>目标优缺点</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162622.png"></p><h4 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162730.png" style="zoom:67%;" /><blockquote><p>接下来主要讲解变分贝叶斯方法，变分贝叶斯方法是近似贝叶斯推断的一大类方法，变分贝叶斯方法又有很多子类，Mean-field变分推断是其中比较有代表性的一类。接下来结合讲解的方法讲三个例子：univariate Gaussian、Mixture of Gaussians和LDA</p></blockquote><h3 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a><a href="https://www.bilibili.com/video/BV1Qf4y1e7jN?from=search&seid=14715651649240686105">贝叶斯推断</a></h3> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325164141.png" style="zoom:67%;" /><blockquote><p>Data是观测变量，Parameters是模型的参数，通过对观测变量$x$取值的观测，我们可以更新参数$z$, 这里$p(x) = \int_{z}^{}{p(x,z)dz}$，实际应用中$z$是一个高维的分布，很难计算$p(z|x)$</p></blockquote><h3 id="近似贝叶斯推断"><a href="#近似贝叶斯推断" class="headerlink" title="近似贝叶斯推断_"></a><a href="https://www.bilibili.com/video/BV1a5411H7eW?from=search&seid=14715651649240686105">近似贝叶斯推断</a>_</h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325210910.png"></p><blockquote><p>直接计算$p(z|x)$复杂度很高很难，然后就有了近似计算（推断）。常用的近似计算有：MCMC方法和基于优化的方法，MCMC方法虽然精度高但是数据量大时计算很慢，基于随机梯度的优化方法可以使用并行加速，因此可以大大的加速计算速度。<br>基于随机梯度优化方法的思路为：找到一个简单的分布$q^*(z) \in Q$来近似p(z|x), 目标$q^*(z)$应该是$Q$中，与$p(z|x)$某种距离最小的那个。<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325212515.png"><br>为什么要用KL散步来度量两个分布的距离呢？<br>KL满足可导和凸性，使得它的计算更快；<br>我们没法通过上式求得$q^*(z)$，需要通过下面的转换把优化KL最小问题进行转换为求$q(z)$使得ELBO最大的问题.<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214048.png"></p></blockquote><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214709.png"></p><blockquote><p>这里的$log p(x)$是一个固定的常数。</p></blockquote><h3 id="平均场推断"><a href="#平均场推断" class="headerlink" title="平均场推断"></a><a href="https://www.bilibili.com/video/BV1Ki4y1w7Z9/?spm_id_from=autoNext">平均场推断</a></h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325223324.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次系统奔溃的反思和总结</title>
      <link href="2021/03/28/ji-yi-ci-xi-tong-ben-kui-de-fan-si-he-zong-jie/"/>
      <url>2021/03/28/ji-yi-ci-xi-tong-ben-kui-de-fan-si-he-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>3月15日，mac电脑无缘无故的崩掉了，本以为是一个小问题，拿去环茂直营店直接给判了死刑，主板全部换掉，顺带还换了屏幕，最悲剧的是最新版本mac的硬盘是直接焊死在主板上面的，换了主板硬盘也没有了，里面的数据也没了。</p></blockquote><span id="more"></span><blockquote><p>陆陆续续花了一周才把电脑系统恢复到之前的状态，当然因为没有备份，丢掉的数据是真的丢掉了。</p></blockquote><blockquote><p>为了防止类似的事情再次发生，也为了方便以后重装系统的时候能够节省时间，把这几天折腾的内容总结记录如下：</p></blockquote><h4 id="mac数据备份"><a href="#mac数据备份" class="headerlink" title="mac数据备份"></a>mac数据备份</h4><h5 id="iCloud方式备份"><a href="#iCloud方式备份" class="headerlink" title="iCloud方式备份"></a>iCloud方式备份</h5><p> iCloud适合备份一些关键的数据量不是特别大的数据，比如照片、邮件、通讯录、钥匙串和备忘录等数据；开启iCloud比较简单：在偏好设置里面搜索“iCloud”，然后根据提示设置就好了。</p><h5 id="TimeMachine方式备份"><a href="#TimeMachine方式备份" class="headerlink" title="TimeMachine方式备份"></a>TimeMachine方式备份</h5><p>建议使用mac的同学，花点时间学学TimeMachine的使用方法，这个<strong>一定要开启</strong>，我之前就是觉得弄TimeMachine比较麻烦，造成了数据无法挽回，<br>官方的教程在<a href="https://support.apple.com/zh-cn/HT201250">这里</a>。</p><h5 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h5><p>OneDrive是微软推出的云端网盘，普通用户好像只有5G的存储空间，部分学校会为学生购买存储空间，比如我们学校为每个学生购买了1T的存储空间，用学校分配的邮箱在<a href="https://www.microsoft.com/zh-cn/education/products/office">这里</a>就可以申请到。使用OneDrive在跨平台共享数据上比较方便，但是目前同步数据速度还比较慢，使用体验不太好。</p><h4 id="百度云备份"><a href="#百度云备份" class="headerlink" title="百度云备份"></a>百度云备份</h4><p>百度云就不用多说了，大家都会用，免费的速度是真慢，付费的速度快，但是每次上传或者下载文件要打开客户端，不像OneDrive那样方便。</p><h4 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h4><h5 id="论文阅读管理"><a href="#论文阅读管理" class="headerlink" title="论文阅读管理"></a>论文阅读管理</h5><ul><li><a href="https://www.papersapp.com/">Papers</a></li></ul><h5 id="轻写作、记笔记"><a href="#轻写作、记笔记" class="headerlink" title="轻写作、记笔记"></a>轻写作、记笔记</h5><ul><li><a href="https://macdown.uranusjr.com/">MacDown</a></li><li><a href="https://typora.io/">Typora</a></li><li><a href="https://www.notion.so/">Notion</a></li><li><a href="https://www.onenote.com/download%3Fomkt%3Dzh-CN">OneNote</a></li></ul><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><ul><li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li><li><a href="https://www.sublimetext.com/">Sublime Text</a></li><li><a href="https://code.visualstudio.com/">Vscode</a></li></ul><h5 id="沟通聊天"><a href="#沟通聊天" class="headerlink" title="沟通聊天"></a>沟通聊天</h5><ul><li><a href="https://im.qq.com/download/">QQ</a></li><li><a href="https://weixin.qq.com/">微信</a></li></ul><h5 id="office系列"><a href="#office系列" class="headerlink" title="office系列"></a>office系列</h5><blockquote><p>我是从学校公共数据库下载的，大家自行搜索吧。</p></blockquote><h5 id="Adobe系列"><a href="#Adobe系列" class="headerlink" title="Adobe系列"></a>Adobe系列</h5><blockquote><p>电脑修完之后，工程师把主板软件升级了，导致学校提供的Adobe安装包都没法用，找了好几天才找到下面这两个可用的安装包:</p></blockquote><ul><li><a href="https://www.didixk.com/21013.html">Adobe PhotoShop 2021</a></li><li><a href="https://www.didixk.com/21013.html">Adobe Illustrator 2021</a></li></ul><h5 id="音影娱乐"><a href="#音影娱乐" class="headerlink" title="音影娱乐"></a>音影娱乐</h5><ul><li><a href="https://vox.rocks/mac-music-player">vox music player</a></li><li><a href="https://iina.io/">IINA视频播放器</a></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li><a href="https://www.royalapps.com/ts/mac/features">Royal Tsx </a>: ssh ftp客户端工具 </li><li><a href="http://www.math.ecnu.edu.cn/~jypan/vpn_ecnu/">VPN</a>：有时候需要用它来登录学校的vpn</li><li><a href="https://support.google.com/chrome/answer/95346?co=GENIE.Platform=Desktop&hl=zh-Hans">google chrome</a></li><li><a href="https://pan.baidu.com/download#pan">百度网盘</a></li><li><a href="https://cloud.tencent.com/act/event/tencentmeeting_free">腾讯会议</a></li><li><a href="https://www.ghpym.com/xmindzen.html">Xmid破解版</a></li><li><a href="https://www.eudic.net/v4/en/app/eudic">欧路词典</a>, 激活方式点<a href="https://www.macdo.cn/17456.html">这里</a>。</li><li><a href="https://www.mac-downloader.com/">Folx下载器</a></li><li> 小飞机：就不分享了，懂得都懂，大家自行搜索吧</li></ul><h6 id="会议信息"><a href="#会议信息" class="headerlink" title="会议信息"></a>会议信息</h6><ul><li><a href="https://aideadlin.es/?sub=ML,CV,NLP,RO,SP,DM">AiDeadlines</a></li><li><a href="https://www.conferenceeye.cn/#/layout/home">会议之眼</a></li></ul><h6 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h6><blockquote><p>也是因为对主板软件升了级，导致很多版本的虚拟机都没法用，找了很久才搞定。</p></blockquote><ul><li>Parallels Desktop：安装包在我的OneDrive网盘里，具体下载链接不记得了。</li></ul><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><h5 id="GitHub设置代理加速"><a href="#GitHub设置代理加速" class="headerlink" title="GitHub设置代理加速"></a>GitHub设置代理加速</h5><blockquote><p>拿到电脑之后，发现GitHub网页都没法打开，即使用了科学上网也没法打开，或者加载很慢，<br>这个时候我们就需要设置代理加速了，具体操作步骤请参考之前写的内容。</p></blockquote><h5 id="个人博客恢复"><a href="#个人博客恢复" class="headerlink" title="个人博客恢复"></a>个人博客恢复</h5><blockquote><p>由于之前博客的内容都放在了本地，配置文件和解析前的文档都没有了，后续有时间的时候再参照<a href="https://leongo.cn/2021/02/21/build/">这个</a>教程恢复一下。</p></blockquote><p>虽然折腾了这么久，但是mac是真的好用，让我再次选择的话，我还是会不犹豫的选择mac, 最后大家一定要记得经常<strong>备份！ 备份！ 备份！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub加速方法</title>
      <link href="2021/03/28/github-jia-su-fang-fa/"/>
      <url>2021/03/28/github-jia-su-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="设置代理加速GitHub"><a href="#设置代理加速GitHub" class="headerlink" title="设置代理加速GitHub"></a>设置代理加速GitHub</h3><p>由于github网站服务器在国外，国内上传和下载数据速度较慢，假如你已经有具备了科学上网的条件，可以通过设置代理的方式来提高数据传输速度。</p><p>以下设置均建立在具备科学上网的前提下，下文中的小飞机指某款用于科学上网的工具。</p><h4 id="设置http代理"><a href="#设置http代理" class="headerlink" title="设置http代理"></a>设置http代理</h4><p>在命令行输入如下的命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://127.0.0.1:1087<span class="token function">export</span> https_proxy<span class="token operator">=</span>http://127.0.0.1:1087<span class="token comment" spellcheck="true">#设置http代理，端口号对应的是小飞机的http代理端口号</span><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1087<span class="token function">git</span> config --global https.proxy http://127.0.0.1:1087<span class="token comment" spellcheck="true">#配置github用户名和邮箱</span><span class="token function">git</span> config --global user.name github_id<span class="token function">git</span> config --global user.email github_email<span class="token comment" spellcheck="true">#取消代理设置</span><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy<span class="token comment" spellcheck="true">#查看代理设置</span><span class="token function">git</span> config --list</code></pre><p>http代理端口查询：</p><blockquote><p>在小飞机中找到“http代理 设置”选项，然后点击打开，找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319193849.png" style="zoom:67%;" /><h4 id="设置ssh加速"><a href="#设置ssh加速" class="headerlink" title="设置ssh加速"></a><a href="https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1">设置ssh</a>加速</h4><p><code>在~/.ssh/config</code> 文件（不存在则新建）添加如下内容：</p><pre class=" language-bash"><code class="language-bash">Host github.com   HostName github.com   User <span class="token function">git</span>   <span class="token comment" spellcheck="true"># 走 HTTP 代理，需要 brew install socat</span>   <span class="token comment" spellcheck="true"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1087</span>   <span class="token comment" spellcheck="true"># 走 socks5 代理（如 Shadowsocks）</span>   ProxyCommand nc -v -x 127.0.0.1:1086 %h %p   <span class="token comment" spellcheck="true">#上面1086这个端口号可以在“小飞机”的高级设置中查看</span>   <span class="token comment" spellcheck="true"># 走 socks5 代理（如 Shadowsocks），Windows 平台没有 nc 命令</span>   <span class="token comment" spellcheck="true"># ProxyCommand connect -S 127.0.0.1:1086 %h %p</span></code></pre><p>本地Socks5监听窗口查询：</p><blockquote><p>在小飞机中找到“高级设置”，点击打开就可以找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319194610.png" style="zoom:50%;" /><h3 id="通过修改hosts解决浏览器打不开github网站的方法"><a href="#通过修改hosts解决浏览器打不开github网站的方法" class="headerlink" title="通过修改hosts解决浏览器打不开github网站的方法"></a>通过修改hosts解决浏览器打不开github网站的方法</h3><blockquote><p>假如不具备科学上网的条件，也可以通过修改hosts文件来解决浏览器打不开GitHub的问题，但是通过这种方式只能解决浏览器打开慢的问题，不能够解决在终端克隆项目慢的问题，建议通过代理的方式加速。</p></blockquote><span id="more"></span><p>首先从这个<a href="https://zhuanlan.zhihu.com/p/36154464">网站</a>给出的链接中获取(也可以直接用下面的数据)到如下格式的数据：</p><pre class=" language-bash"><code class="language-bash">140.82.113.4 github.com199.232.69.194 github.global.ssl.fastly.net185.199.108.153 assets-cdn.github.com185.199.110.153 assets-cdn.github.com185.199.111.153 assets-cdn.github.com185.199.109.153 assets-cdn.github.com</code></pre><p>然后将这些数据添加到hosts（mac中的路径为：/private/ect/hosts）文件中就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECNU的春</title>
      <link href="2021/02/22/ecnu-de-chun/"/>
      <url>2021/02/22/ecnu-de-chun/</url>
      
        <content type="html"><![CDATA[<p>最开始令人感受到春气息的是红梅花，红梅花跟腊梅花的区别在于花瓣的颜色和开放的时间不同，腊梅花比红梅花开得更早一些。今年红梅花开的具体日子已经不记得了，只依稀记得那个时候天还很冷，操场上面很少见到跑步运动的人，留校的同学大多都还呆在宿舍，校园里面因此显得十分的冷清。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><center>    <img src="https://raw.githubusercontent.com/Skylyong/i/main/IMG_6820.JPG"  >    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">夏雨路附近的红梅花</div></center><br><p>红梅花开之后好一段时间，早樱也开了，学校里面开放最早的早樱是电竞中心前面的两颗樱树，那段时间有点忙，等我看到的时候花期已经接近了尾声。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><center>    <img     src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG7.jpeg" >    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">电竞中心前的早樱花</div></center><br><p>再往后，天气也慢慢的变得暖和了，校园里面人也多了起来。这段时间的天空往往是湖蓝色的，阳光变得温柔灿烂，晨曦和晚霞尤为美丽动人，傍晚坐在丽娃河边的木凳上欣赏天边美丽的云儿，时不时还能听到大胆的鱼儿蹦出水面的叮咚声，好不惬意。但是阳光却是没有多少温度，路上行人依然裹着厚厚的羽绒服。这个时候玉兰也开始吐出了花骨朵，不多久雪白的玉兰花就完全开放了，挂在高高的没有一丝绿叶的玉兰树上，让人不由得停下脚步来欣赏这份生命的倔强。除了雪白的白玉兰，这园子里面还有紫玉兰，紫玉兰开花比白玉兰稍微晚些，但是并不影响它与白玉兰争鲜斗艳。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG9.jpeg"></p><center>    <!-- <img     src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG9.jpeg" > -->    <div style="color:orange; border-bottom: 0.5px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 0.5px;">5舍后面的白玉兰</div></center><br><p>约莫三月中下旬的时候，这园子里面迎来了它的主角——樱花。</p><p>（未完待续…）</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECNU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="2021/02/21/build/"/>
      <url>2021/02/21/build/</url>
      
        <content type="html"><![CDATA[<p>前沿： <a href="file:///Users/lyong/Desktop/Skylyong.github.io-main/2021/02/21/build/index.html">hexo</a>和<a href="https://themes.gohugo.io/hugo-swift-theme/">hugo</a>是常用的个人博客搭建框架，hexo技术更成熟稳定，但是速度慢，而基于go语言的hugo拥有速度快的优点，但是由于出现较晚，它的技术还不够成熟，也没有相对稳定的主题。</p><h4 id="首次搭建"><a href="#首次搭建" class="headerlink" title="首次搭建"></a>首次搭建</h4><p>今晚用了3个小时搭建了基于hexo的个人博客，现在记录一下。</p><p>主要参考了下面几个链接</p><ul><li><p>博客搭建链接: <a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></p></li><li><p>pure主题使用链接: <a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p></li><li><p>next主题使用教程: <a href="https://theme-next.iissnan.com/theme-settings.html#tags-page">https://theme-next.iissnan.com/theme-settings.html#tags-page</a></p></li><li><p>next主题进一步完善: <a href="https://tding.top/top/">https://tding.top/top/</a></p></li></ul><p>有一点要注意：教程中设置域名解析的时候不应该使用A模式，都应该使用CNAME模式</p><ul><li><p>hexo常用命令</p></li><li><p>新建博客：hexo n “bolg’s name”</p></li><li><p>发布博客用如下三个命令：</p></li></ul><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><h4 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h4><p>今天为博客增加了<a href="http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/">记录阅读次数</a>和<a href="https://vic.kim/2019/05/22/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">站内搜索</a>的功能。其中添加记录阅读次数功能相对麻烦，需要注册<a href="https://console.leancloud.cn/">leancloud</a>的账号，并且按照教程进行相应设置，如果遇到不能够正常显示阅读次数，要安装相关插件；站内搜索功能比较简单，按照链接中的教程一步步操作就好了。</p><h4 id="设置github免费图床"><a href="#设置github免费图床" class="headerlink" title="设置github免费图床"></a>设置github免费图床</h4><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">这里</a>下载对应版本的PicGo(我选择的是2.2.2版本)，然后根据这个<a href="https://learnku.com/articles/48574">教程</a>设置图床，设置好图床后就可以把本地的图片上传到github服务器，生成链接，方便写markdown的时候引用。</p><h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>设置好评论，默认是每一篇文章，包括”关于“等页面下面都会生成评论对话框，如果想关闭某一篇文章下面的评论对话框，可以参考<a href="https://nobige.cn/post/20190718-hexoxiavalineguanbijingzhimougewenzhangyemianpinglun/">这里</a>。</p><h4 id="电脑奔溃，我弃用next主题了"><a href="#电脑奔溃，我弃用next主题了" class="headerlink" title="电脑奔溃，我弃用next主题了"></a>电脑奔溃，我弃用next主题了</h4><ul><li>matery主题配置: <a href="https://www.jianshu.com/p/cf9730925b5c">https://www.jianshu.com/p/cf9730925b5c</a></li><li>matery主题深度配置: <a href="https://bbs.huaweicloud.com/blogs/226867">https://bbs.huaweicloud.com/blogs/226867</a></li><li>matery主题优秀博客: <a href="https://notes.zhangxiaocai.cn/">https://notes.zhangxiaocai.cn/</a></li></ul><h4 id="logo设计"><a href="#logo设计" class="headerlink" title="logo设计"></a>logo设计</h4><ul><li>在线免费logo设计：<a href="http://yeelogo.com/#/">http://yeelogo.com/#/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的免费无广告电影网站推荐</title>
      <link href="2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/"/>
      <url>2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>今日阳光明媚，中午坐在阳台上面感受着春日暖风拂面，不由得让人想找一部电影伴着暖阳体验一番春日周末的慢生活。相信有不少同学跟我一样，不喜欢充视频网站的会员，更不喜欢看电影之前漫长的广告。好在日常生活中碰到好用的电影网站我都会加在收藏夹中，下面整理一下分享给各位喜欢看电影的同学。</p><ul><li><p><a href="http://www.fenggoudy1.com/list-read-id-1.html">疯狗电影</a></p><p>  春节期间看《曼达洛人》的时候发现的，优点是有最新的片源，刚刚看了一下，竟然有最新大热的《你好，李焕英》，资源质量一般，虽然看视频没有广告，但是浮窗广告有点多，影响观感，适合喜欢尝鲜但是对资源质量要求不高的同学。</p><p>  资源存量指数：★★★☆☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★☆☆☆☆</p></li><li><p><a href="https://91kanju.com/vod-play/57173-2-1.html">91看剧</a></p><p>  这个网站的资源以电视剧为主，也有不少电影资源，资源比较多，但是有些资源加载时间比较长，资源质量一般，刚刚测试了一下不用翻墙也可以访问。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://www.wandouys.com/">豌豆影视</a></p><p>  这是我用得最久的免费电影网站，它片源多，新上映的电影也可以在上面找到。缺点是需要翻墙才能解析到视频网址（网址解析之后不用翻墙可以看），视频质量没有保障，喜欢高清电影的同学可能要失望了；网站有时候不稳定，看视频会卡顿。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★★☆☆</p><p>  个人推荐指数：★★★☆☆</p></li><li><p><a href="https://速影tv.com/movie/5.html">速影TV</a></p><p>  这个网站个人不常用，不记得是怎么发现的了，它的片源比较多，但是资源质量不高，貌似需要翻墙才可以看。虽不常用，但是找不到片源的时候，在这上面找找也可能有意外收获。</p><p>  资源存量指数：★★★★☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://ddrk.me/the-witches/">低端电影</a></p><p>  这个网站是前段时间无意中从google中搜索到的，优点是广告少，片源都是高清的电影，还不用翻墙；缺点是资源量不大，不过许多经典电影和电视剧的资源都可以在里面找到，很不错，十分推荐。</p><p>  资源存量指数：★★☆☆☆</p><p>  视频质量指数：★★★★★</p><p>  个人推荐指数：★★★★★</p></li></ul><ul><li><p><a href="https://www.d123movies.to/">123movies</a></p><p>  这个网站是国外的免费电影、电视剧网站，网站的视频都提供了英文字幕，特别适合于学习英语，非常不错，十分推荐。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★★★★</p><p>  个人推荐指数：★★★★★</p><p>  上面推荐的网站有时候可能会被封掉，最后再推荐一个存储电影资源网址的<a href="http://www.dyhz1.com/">站点</a>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
