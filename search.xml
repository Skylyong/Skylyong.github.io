<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习中的各种熵</title>
      <link href="2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/"/>
      <url>2021/04/16/ji-qi-xue-xi-zhong-de-ge-chong-shang/</url>
      
        <content type="html"><![CDATA[<h3 id="概念和定义"><a href="#概念和定义" class="headerlink" title="概念和定义"></a>概念和定义</h3><h4 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h4><h4 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h4><h4 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h4><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><ul><li><p><a href="https://www.cnblogs.com/Arborday/p/10727147.html">https://www.cnblogs.com/Arborday/p/10727147.html</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/35379531">https://zhuanlan.zhihu.com/p/35379531</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令</title>
      <link href="2021/04/08/git-chang-yong-ming-ling/"/>
      <url>2021/04/08/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="git基于历史commit创建分支"><a href="#git基于历史commit创建分支" class="headerlink" title="git基于历史commit创建分支"></a>git基于历史commit创建分支</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log<span class="token function">git</span> branch <span class="token operator">&lt;</span>branch name<span class="token operator">></span> <span class="token operator">&lt;</span>SHA1<span class="token operator">></span> <span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch name<span class="token operator">></span><span class="token comment" spellcheck="true">#也可以直接执行下面的命令</span><span class="token function">git</span> checkout -b <span class="token operator">&lt;</span>branch name<span class="token operator">></span> <span class="token operator">&lt;</span>SHA1<span class="token operator">></span> </code></pre><h4 id="git对分支的操作"><a href="#git对分支的操作" class="headerlink" title="git对分支的操作"></a>git对分支的操作</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看远程分支</span><span class="token function">git</span> branch -a<span class="token comment" spellcheck="true">#查看本地分支</span><span class="token function">git</span> branch<span class="token comment" spellcheck="true">#创建分支</span><span class="token function">git</span> branch branch_name<span class="token comment" spellcheck="true">#切换到分支</span><span class="token function">git</span> checkout branch_name<span class="token comment" spellcheck="true">#删除本地分支</span><span class="token function">git</span> branch -d branch_name<span class="token comment" spellcheck="true">#重命名本地分支</span><span class="token function">git</span> branch -m old new<span class="token comment" spellcheck="true">#重命名远程分支：将远程分支删除，然后将本地分支重命名，最后将本地分支推到远程</span><span class="token function">git</span> push --delete origin old <span class="token comment" spellcheck="true">#删除远程分支</span><span class="token function">git</span> branch -m old new <span class="token comment" spellcheck="true">#重命名本地分支</span><span class="token function">git</span> push origin new <span class="token comment" spellcheck="true">#将本地分支推送到远程</span></code></pre><h4 id="git对比两个分支差异"><a href="#git对比两个分支差异" class="headerlink" title="git对比两个分支差异"></a><a href="https://www.jianshu.com/p/bb97fabb475e">git对比两个分支差异</a></h4>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP知识体系</title>
      <link href="2021/04/08/nlp-zhi-shi-ti-xi/"/>
      <url>2021/04/08/nlp-zhi-shi-ti-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分：机器学习基础篇"><a href="#第一部分：机器学习基础篇" class="headerlink" title="第一部分：机器学习基础篇"></a>第一部分：机器学习基础篇</h3><h4 id="第一章：自然语言处理概述"><a href="#第一章：自然语言处理概述" class="headerlink" title="第一章：自然语言处理概述"></a>第一章：自然语言处理概述</h4><ul><li><p> 自然语言处理的现状与前景</p></li><li><p>自然语言处理应用</p></li><li><p>自然语言处理经典任务</p></li></ul><h4 id="第二章：数据结构与算法基础"><a href="#第二章：数据结构与算法基础" class="headerlink" title="第二章：数据结构与算法基础"></a>第二章：数据结构与算法基础</h4><ul><li><p>时间复杂度、空间复杂度</p></li><li><p>动态规划</p></li><li><p>贪心算法</p></li><li><p>各种排序算法</p></li></ul><h4 id="第三章：分类与逻辑回归"><a href="#第三章：分类与逻辑回归" class="headerlink" title="第三章：分类与逻辑回归"></a>第三章：分类与逻辑回归</h4><ul><li><p>逻辑回归</p></li><li><p>最大似然估计</p></li><li><p>优化与梯度下降法</p></li><li><p>随机梯度下降法</p></li></ul><h4 id="第四章：模型泛化与调参"><a href="#第四章：模型泛化与调参" class="headerlink" title="第四章：模型泛化与调参"></a>第四章：模型泛化与调参</h4><ul><li><p>理解过拟合、防止过拟合</p></li><li><p>L1与L2正则</p></li><li><p>交叉验证</p></li><li><p>正则与MAP估计</p></li></ul><h3 id="第二部分：文本处理篇"><a href="#第二部分：文本处理篇" class="headerlink" title="第二部分：文本处理篇"></a>第二部分：文本处理篇</h3><h4 id="第五章：文本预处理与表示"><a href="#第五章：文本预处理与表示" class="headerlink" title="第五章：文本预处理与表示"></a>第五章：文本预处理与表示</h4><ul><li><p>各类分词算法</p></li><li><p>词的标准化</p></li><li><p>拼写纠错、停用词</p></li><li><p>独热编码表示</p></li><li><p>tf-idf与相似度</p></li><li><p>分布式表示与词向量</p></li><li><p>词向量可视化与评估</p></li></ul><h4 id="第六章：词向量技术"><a href="#第六章：词向量技术" class="headerlink" title="第六章：词向量技术"></a>第六章：词向量技术</h4><ul><li><p>独热编码的优缺点</p></li><li><p>分布式表示的优点</p></li><li><p>静态词向量与动态词向量</p></li><li><p>SkipGram与CBOW</p></li><li><p>SkipGram详解</p></li><li><p>Negative  Sampling</p></li></ul><h4 id="第七章：语言模型"><a href="#第七章：语言模型" class="headerlink" title="第七章：语言模型"></a>第七章：语言模型</h4><ul><li><p>语言模型的作用</p></li><li><p>马尔科夫假设</p></li><li><p>UniGram, BiGram, NGram模型</p></li><li><p>语言模型的评估</p></li><li><p>语言模型的平滑技术</p></li></ul><h3 id="第三部分：序列模型篇"><a href="#第三部分：序列模型篇" class="headerlink" title="第三部分：序列模型篇"></a>第三部分：序列模型篇</h3><h4 id="第八章：隐马尔科夫模型"><a href="#第八章：隐马尔科夫模型" class="headerlink" title="第八章：隐马尔科夫模型"></a>第八章：隐马尔科夫模型</h4><ul><li><p>HMM的应用</p></li><li><p>HMM的Inference</p></li><li><p>维特比算法</p></li><li><p>前向、后向算法</p></li><li><p>HMM的参数估计详解</p></li></ul><h4 id="第九章：线性条件随机场"><a href="#第九章：线性条件随机场" class="headerlink" title="第九章：线性条件随机场"></a>第九章：线性条件随机场</h4><ul><li><p>有向图与无向图</p></li><li><p>生成模型与判别模型</p></li><li><p>从HMM与MEMM</p></li><li><p>MEMM中的标签偏置</p></li><li><p>Log-Linear模型介绍</p></li><li><p>从Log-Linear到LinearCRF</p></li><li><p>LinearCRF的参数估计</p></li></ul><h3 id="第四部分：深度学习与预训练篇"><a href="#第四部分：深度学习与预训练篇" class="headerlink" title="第四部分：深度学习与预训练篇"></a>第四部分：深度学习与预训练篇</h3><h4 id="第十章：深度学习基础"><a href="#第十章：深度学习基础" class="headerlink" title="第十章：深度学习基础"></a>第十章：深度学习基础</h4><ul><li><p>理解神经网络</p></li><li><p>各种常见的激活函数</p></li><li><p>反向传播算法</p></li><li><p>浅层模型与深度模型对比</p></li><li><p>深度学习中的层次表示</p></li><li><p>深度学习中的过拟合</p></li></ul><h4 id="第十一章：RNN与LSTM"><a href="#第十一章：RNN与LSTM" class="headerlink" title="第十一章：RNN与LSTM"></a>第十一章：RNN与LSTM</h4><ul><li><p>从HMM到RNN模型</p></li><li><p>RNN中的梯度问题</p></li><li><p>梯度消失与LSTM</p></li><li><p>LSTM到GRU</p></li><li><p>双向LSTM</p></li><li><p>双向深度LSTM</p></li></ul><h4 id="第十二章：Seq2Seq模型与注意力机制"><a href="#第十二章：Seq2Seq模型与注意力机制" class="headerlink" title="第十二章：Seq2Seq模型与注意力机制"></a>第十二章：Seq2Seq模型与注意力机制</h4><ul><li><p>Seq2Seq模型</p></li><li><p>Greedy Decoding</p></li><li><p>Beam Search</p></li><li><p>长依赖所存在的问题</p></li><li><p>注意力机制的实现</p></li></ul><h4 id="第十三章：动态词向量与ELMo技术"><a href="#第十三章：动态词向量与ELMo技术" class="headerlink" title="第十三章：动态词向量与ELMo技术"></a>第十三章：动态词向量与ELMo技术</h4><ul><li><p>基于上下文的词向量技术</p></li><li><p>图像识别中的层次表示</p></li><li><p>文本领域中的层次表示</p></li><li><p>ELMo模型</p></li><li><p>ELMo的预训练与测试</p></li><li><p>ELMo的优缺点</p></li></ul><h4 id="第十四章：自注意力机制与Transformer"><a href="#第十四章：自注意力机制与Transformer" class="headerlink" title="第十四章：自注意力机制与Transformer"></a>第十四章：自注意力机制与Transformer</h4><ul><li><p>LSTM模型的缺点</p></li><li><p>Transformer概述</p></li><li><p>理解自注意力机制</p></li><li><p>位置信息的编码</p></li><li><p>理解Encoder和Decoder区别</p></li><li><p>理解Transformer的训练与预测</p></li><li><p>Transformer的缺点</p></li></ul><h4 id="第十五章：BERT与ALBERT"><a href="#第十五章：BERT与ALBERT" class="headerlink" title="第十五章：BERT与ALBERT"></a>第十五章：BERT与ALBERT</h4><ul><li><p>自编码介绍</p></li><li><p>Transformer Encoder</p></li><li><p>Masked语言模型</p></li><li><p>BERT模型</p></li><li><p>BERT的不同训练方式</p></li><li><p>ALBERT </p></li></ul><h4 id="第十六章：BERT的其他变种"><a href="#第十六章：BERT的其他变种" class="headerlink" title="第十六章：BERT的其他变种"></a>第十六章：BERT的其他变种</h4><ul><li><p>RoBERTa模型</p></li><li><p>SpanBERT模型</p></li><li><p>FinBERT模型</p></li><li><p>引入先验知识</p></li><li><p>K-BERT</p></li><li><p>KG-BERT</p></li></ul><h4 id="第十七章：GPT与XLNet"><a href="#第十七章：GPT与XLNet" class="headerlink" title="第十七章：GPT与XLNet"></a>第十七章：GPT与XLNet</h4><ul><li><p>Transformer Encoder回顾</p></li><li><p>GPT-1, GPT-2,  GPT-3</p></li><li><p>ELMo的缺点</p></li><li><p>语言模型下同时考虑上下文</p></li><li><p>Permutation LM</p></li><li><p>双流自注意力机制</p></li></ul><h3 id="第五部分：信息抽取与知识图谱篇"><a href="#第五部分：信息抽取与知识图谱篇" class="headerlink" title="第五部分：信息抽取与知识图谱篇"></a>第五部分：信息抽取与知识图谱篇</h3><h4 id="第十八章：命名识别与实体消歧"><a href="#第十八章：命名识别与实体消歧" class="headerlink" title="第十八章：命名识别与实体消歧"></a>第十八章：命名识别与实体消歧</h4><ul><li><p>信息抽取的应用和关键技术</p></li><li><p>命名实体识别</p></li><li><p>NER识别常用技术</p></li><li><p>实体统一技术</p></li><li><p>实体消歧技术</p></li><li><p>指代消解</p></li></ul><h4 id="第十九章：关系抽取"><a href="#第十九章：关系抽取" class="headerlink" title="第十九章：关系抽取"></a>第十九章：关系抽取</h4><ul><li><p>关系抽取的应用</p></li><li><p>基于规则的方法</p></li><li><p>基于监督学习的方法</p></li><li><p>Bootstrap方法</p></li><li><p>Distant Supervision方法</p></li></ul><h4 id="第二十章：句法分析"><a href="#第二十章：句法分析" class="headerlink" title="第二十章：句法分析"></a>第二十章：句法分析</h4><ul><li><p>句法分析的应用</p></li><li><p>CFG介绍</p></li><li><p>从CFG到PCFG</p></li><li><p>评估语法树</p></li><li><p>寻找最好的语法树</p></li><li><p>CKY算法</p></li></ul><h4 id="第二十一章：依存文法分析"><a href="#第二十一章：依存文法分析" class="headerlink" title="第二十一章：依存文法分析"></a>第二十一章：依存文法分析</h4><ul><li><p>从语法分析到依存文法分析</p></li><li><p>依存文法分析的应用</p></li><li><p>基于图算法的依存文法分析</p></li><li><p>基于Transition-based的依存文法分析</p></li><li><p>依存文法的应用案例</p></li></ul><h4 id="第二十二章：知识图谱"><a href="#第二十二章：知识图谱" class="headerlink" title="第二十二章：知识图谱"></a>第二十二章：知识图谱</h4><ul><li><p>知识图谱的重要性</p></li><li><p>知识图谱中的实体与关系</p></li><li><p>非结构化数据与构造知识图谱</p></li><li><p>知识图谱设计</p></li><li><p>图算法的应用</p></li></ul><h3 id="第六部分：模型压缩与图神经网络篇"><a href="#第六部分：模型压缩与图神经网络篇" class="headerlink" title="第六部分：模型压缩与图神经网络篇"></a>第六部分：模型压缩与图神经网络篇</h3><h4 id="第二十三章：模型的压缩"><a href="#第二十三章：模型的压缩" class="headerlink" title="第二十三章：模型的压缩"></a>第二十三章：模型的压缩</h4><ul><li><p>模型压缩重要性</p></li><li><p>常见的模型压缩总览</p></li><li><p>基于矩阵分解的压缩技术</p></li><li><p>基于蒸馏的压缩技术</p></li><li><p>基于贝叶斯模型的压缩技术</p></li><li><p>模型的量化</p></li></ul><h4 id="第二十四章：基于图的学习"><a href="#第二十四章：基于图的学习" class="headerlink" title="第二十四章：基于图的学习"></a>第二十四章：基于图的学习</h4><ul><li><p>图的表示</p></li><li><p>图与知识图谱</p></li><li><p>关于图的常见算法</p></li><li><p>Deepwalk和Node2vec</p></li><li><p>TransE图嵌入算法</p></li><li><p>DSNE图嵌入算法</p></li></ul><h4 id="第二十五章：图神经网络"><a href="#第二十五章：图神经网络" class="headerlink" title="第二十五章：图神经网络"></a>第二十五章：图神经网络</h4><ul><li><p>卷积神经网络回顾</p></li><li><p>在图中设计卷积操作</p></li><li><p>图中的信息传递</p></li><li><p>图卷积神经网络</p></li><li><p>图卷积神经网络的经典应用</p></li></ul><h4 id="第二十六章：GraphSage与GAT"><a href="#第二十六章：GraphSage与GAT" class="headerlink" title="第二十六章：GraphSage与GAT"></a>第二十六章：GraphSage与GAT</h4><ul><li><p>从GCN到GraphSAge</p></li><li><p>注意力机制回归</p></li><li><p>GAT模型详解</p></li><li><p>GAT与GCN比较</p></li><li><p>对于异构数据的处理</p></li></ul><h4 id="第二十七章：图神经网络的其他应用"><a href="#第二十七章：图神经网络的其他应用" class="headerlink" title="第二十七章：图神经网络的其他应用"></a>第二十七章：图神经网络的其他应用</h4><ul><li><p>Node Classification</p></li><li><p>Graph Classification</p></li><li><p>Link Prediction</p></li><li><p>社区挖掘</p></li><li><p>推荐系统</p></li><li><p>图神经网络的未来发展</p></li></ul><h3 id="部分可练习的案例"><a href="#部分可练习的案例" class="headerlink" title="部分可练习的案例"></a>部分可练习的案例</h3><ol><li>实现一个拼写纠错器</li><li>从零实现Word2Vec词向量</li><li>利用SkipGram做推荐</li><li>从零实现HMM模型</li><li>基于Linear-CRF的词性分类器实现</li><li>从零实现深度学习反向传播算法</li><li>实现AI程序帮助写程序</li><li>实现AI程序帮助写文章</li><li>基于Transformer的机器翻译</li><li>基于KG-BERT的知识图谱学习</li><li>基于知识图谱的风控系统</li><li>基于知识图谱的个性化教学</li><li>利用蒸馏算法压缩Transformer</li><li>利用GCN实现社交推荐</li><li>基于GAT的虚假新闻检测</li></ol><h3 id="项目作业"><a href="#项目作业" class="headerlink" title="项目作业"></a>项目作业</h3><ol><li><p>豆瓣电影评分预测</p><p> 涉及到的知识点：</p><ul><li><p>中文分词技术</p></li><li><p>独热编码、tf-idf</p></li><li><p>分布式表示与Word2Vec</p></li><li><p>BERT向量、句子向量</p></li></ul></li></ol><ol start="2"><li><p>智能客服问答系统</p><p> 涉及到的知识点：</p><ul><li><p>问答系统搭建流程</p></li><li><p>文本的向量化表示</p></li><li><p>FastText</p></li><li><p>倒排表</p></li><li><p>问答系统中的召回、排序</p></li></ul></li></ol><ol start="3"><li><p>基于Linear-CRF的医疗实体识别</p><p> 涉及到的知识点：</p><ul><li><p>命名实体识别</p></li><li><p>特征工程</p></li><li><p>评估标准</p></li><li><p>过拟合</p></li></ul></li></ol><ol start="4"><li><p>基于闲聊的对话系统搭建</p><p> 涉及到的知识点：</p><ul><li><p>常见的对话系统技术</p></li><li><p>闲聊型对话系统框架</p></li><li><p>数据的处理技术</p></li><li><p>BERT的使用</p></li><li><p>Transformer的使用</p></li></ul></li></ol><ol start="5"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>医疗专业词汇的使用</p></li><li><p>获取问句的意图</p></li><li><p>问句的解释、提取关键实体</p></li><li><p>转化为查询语句</p></li></ul></li></ol><ol start="6"><li><p>搭建基于医疗知识图谱的问答系统</p><p> 涉及到的知识点：</p><ul><li><p>文本摘要生成介绍</p></li><li><p>关键词提取技术</p></li><li><p>图神经网络的摘要生成</p></li><li><p>基于生成式的摘要提取技术</p></li><li><p>文本摘要质量的评估</p></li></ul></li></ol><h3 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h3><table><thead><tr><th>主题</th><th>论文名称</th></tr></thead><tbody><tr><td>机器学习</td><td>XGBoost: A Scalable Tree Boosting System</td></tr><tr><td>机器学习</td><td>Regularization and Variable Selection via the Elastic Net</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>Evaluation methods for unsupervised word embeddings</td></tr><tr><td>词向量</td><td>GloVe: Global Vectors for Word Representation</td></tr><tr><td>词向量</td><td>Deep Contexualized Word Representations</td></tr><tr><td>词向量</td><td>Attention is All You Need</td></tr><tr><td>词向量</td><td>BERT: Pretraining of Deep Bidirectional Transformers for Language Understanding</td></tr><tr><td>词向量</td><td>XLNet: Generalized Autoregressive Pretraining for Language Understanding</td></tr><tr><td>词向量</td><td>KG-BERT: BERT for Knowledge Graph Completion</td></tr><tr><td>词向量</td><td>Language Models are Few-shot Learners</td></tr><tr><td>图学习</td><td>Semi-supervised Classification with Graph Convolutional Networks</td></tr><tr><td>图学习</td><td>Graph Attention Networks</td></tr><tr><td>图学习</td><td>GraphSAGE: Inductive Representation Learning on Large Graphs</td></tr><tr><td>图学习</td><td>Node2Vec: Scalable Feature Learning for Networks</td></tr></tbody></table><p>参考链接: <a href="https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g">https://mp.weixin.qq.com/s/GPCmLavk7NjHVwgWIb02-g</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月31日 小雨 最小路径和</title>
      <link href="2021/04/01/zui-xiao-lu-jing-he/"/>
      <url>2021/04/01/zui-xiao-lu-jing-he/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/minimum-path-sum/">64</a>题，和之前的第62题一样，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210401021549.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>本题的解题思路和之前的第<a href="https://leongo.cn/2021/03/30/bu-tong-lu-jing/">62题</a>很相似，定义dp[i][j]为从第(i, j)点走到右下角的最短路径，则有dp[i][j] = dp[i+1][j] + dp[i][j+1].</p><p>然后我们来考虑边界条件，此题的边际和第62题的边际一样，不同的是边界上面dp值，当在下边界的时候dp[m-1][j] = sum(gird[m-1][j:-1]), 在左边界的时候<br>dp[i][n-1] = sum(grid[i:-1][n-1])， dp[m-1][n-1] = grid[m-1][n-1].</p><p>最终答案为: dp[0][0]</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#这里纠结了不少时间</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> sum<span class="token punctuation">(</span>grid<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>         col <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> grid<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token operator">-</span>sum<span class="token punctuation">(</span>col<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>一开始声明二维数组的时候用了浅拷贝，改变某一行的值的时候，其他行的值也会跟着改变，但是我这么搞，竟然通过了60多个样例，好像是在第63个样例的时候卡住了（挠头），后面一个个的把dp里面的值打印出来看，才发现原来是用了浅拷贝，导致这样的问题，换成了迭代生成式后，终于AC了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab搭建笔记</title>
      <link href="2021/03/31/gitlab-da-jian-bi-ji/"/>
      <url>2021/03/31/gitlab-da-jian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="安装gitlab："><a href="#安装gitlab：" class="headerlink" title="安装gitlab："></a><a href="https://packages.gitlab.com/gitlab/gitlab-ee/packages/ubuntu/focal/gitlab-ee_13.8.7-ee.0_amd64.deb">安装gitlab</a>：</h4><pre class=" language-bash"><code class="language-bash">curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span></code></pre><h4 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h4><p> 之前已经配置好了，略</p><h4 id="gitlab配置"><a href="#gitlab配置" class="headerlink" title="gitlab配置"></a><a href="https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab">gitlab配置</a></h4><p>打开/etc/gitlab/gitlab.rb</p><pre class=" language-bash"><code class="language-bash">external_url <span class="token string">'http://gitlab.bytenlp.site'</span><span class="token comment" spellcheck="true"># 系统端口冲突，我把端口改为了85</span>nginx<span class="token punctuation">[</span><span class="token string">'listen_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 85</code></pre><h4 id="让配置生效，并重启gitlab服务"><a href="#让配置生效，并重启gitlab服务" class="headerlink" title="让配置生效，并重启gitlab服务"></a>让配置生效，并重启gitlab服务</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 重新配置gitlab</span><span class="token function">sudo</span> gitlab-ctl reconfigure<span class="token comment" spellcheck="true"># 重启gitlab</span>gitlab-ctl restart </code></pre><h4 id="在浏览器输入”ip-端口号”查看效果，详细参考这里"><a href="#在浏览器输入”ip-端口号”查看效果，详细参考这里" class="headerlink" title="在浏览器输入”ip:端口号”查看效果，详细参考这里"></a>在浏览器输入”ip:端口号”查看效果，详细参考<a href="https://www.jianshu.com/p/ade38a53b1ac">这里</a></h4><p>参考教程：</p><ul><li> <a href="https://www.jianshu.com/p/bf7b09e234c8">https://www.jianshu.com/p/bf7b09e234c8</a></li><li> <a href="https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">https://lil-xing.top/2019/08/26/GitLab%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</a><br>sudo apt-get install gitlab-ee=13.8.7-ee.0</li><li><a href="https://www.jianshu.com/p/ade38a53b1ac">https://www.jianshu.com/p/ade38a53b1ac</a></li></ul><p>测试一下</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语口语练习电影推荐</title>
      <link href="2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/"/>
      <url>2021/03/31/ying-yu-kou-yu-lian-xi-dian-ying-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>我是从喜马拉雅路转粉过来听课的，<a href="https://www.ximalaya.com/waiyu/19111514/">张老师</a>推荐的东西必然是干货。因此利用周末时间搜集整理了一些老师课上推荐的视频资源，方便自己也分享给大家。</p><h4 id="电影推荐"><a href="#电影推荐" class="headerlink" title="电影推荐"></a>电影推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1f1MKRhiGnhXPakdql9BFcQ">The Queen</a> (提取码:gysn)</p></li><li><p><a href="https://pan.baidu.com/s/1thHrc_mUaHD8pFyZwI4g2g">The King’s Speech</a> (提取码:gr42）</p></li><li><p><a href="https://pan.baidu.com/s/1hIyXIJ53H-p_rsCxR0f22Q">Downton Abbey</a> (提取码:cyb9)</p></li><li><p><a href="https://pan.baidu.com/s/1cFcyl3ZZ5TomwZnk0IbbTg">The Holiday</a> (提取码:48ks) 字幕 (提取码:4vix)</p></li><li><p><a href="https://pan.baidu.com/s/1PjDRYpgfXw557lkICTZiWQ">Coco</a> (提取码:tkwx)</p></li><li><p><a href="https://pan.baidu.com/s/10o4jLTT9etBVNlhE9pLgEQ">Darkest Hours</a> (提取码:okwz)</p></li><li><p><a href="https://pan.baidu.com/s/1s406g4lKsv2YPreZ3egBPw">Wonder</a> (提取码:yjog)</p></li><li><p><a href="https://pan.baidu.com/s/1cygoZKcHhtBgF3wA46LXHg">Harry Potter</a> (提取码:cg1w)</p></li><li><p><a href="https://pan.baidu.com/s/1Nptp0lnqBEsoWiGygB7Qgw">Big Hero 6</a> (提取码:g4q4)</p></li><li><p><a href="https://pan.baidu.com/s/1iLHz4MQpkWRUAz6ApnM_yA">Zootopia</a>（提取码:8tmm)</p></li><li><p><a href="https://ddrk.me/frozen-2013/">Frozen 1</a></p></li><li><p><a href="https://ddrk.me/frozen-2/">Frozen 2</a></p></li></ul><h4 id="电视剧推荐"><a href="#电视剧推荐" class="headerlink" title="电视剧推荐"></a>电视剧推荐</h4><ul><li><p><a href="https://pan.baidu.com/s/1oLZdVtC2dxQsntKqFpYGzA">Miranda</a> (提取码:ogrp)</p></li><li><p><a href="https://ddrk.me/the-it-crowd/">The IT Crowd</a></p></li><li><p><a href="https://pan.baidu.com/s/1urGHdiTmz4STpnXnGgnw9Q">Friends 磁力链接</a> (提取码: ldlu)（磁力链接可用迅雷下载，具体操作可自行搜索）</p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E6%91%A9%E7%99%BB%E5%AE%B6%E5%BA%AD">Modern Family</a></p></li><li><p><a href="https://www.zxzj.me/vodsearch/-------------.html?wd=%E7%94%9F%E6%B4%BB%E5%A4%A7%E7%88%86%E7%82%B8">TBBT 生活大爆炸</a>（高清下载磁力<a href="magnet:?xt=urn:btih:49CF1C0B0305D8F5031CB99840C09F06EABB79F6&dn=The+Big+Bang+Theory+Season+1-11+Complete+720p&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://9.rarbg.to:2920/announce&tr=udp://tracker.opentrackr.org:1337&tr=udp://tracker.internetwarriors.net:1337/announce&tr=udp://tracker.leechers-paradise.org:6969/announce&tr=udp://tracker.coppersurfer.tk:6969/announce&tr=udp://tracker.pirateparty.gr:6969/announce&tr=udp://tracker.cyberia.is:6969/announce">链接</a>）</p></li></ul><h4 id="科普记录片"><a href="#科普记录片" class="headerlink" title="科普记录片"></a>科普记录片</h4><ul><li><a href="https://www.bilibili.com/video/av70632732?p=2&spm_id_from=pageDriver">国家地理科普101</a></li></ul><p>资料整理不易，如果觉得好的话，记得打赏支持一波，一块钱也是奖励。</p>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习视频整理</title>
      <link href="2021/03/31/xue-xi-shi-pin-zheng-li/"/>
      <url>2021/03/31/xue-xi-shi-pin-zheng-li/</url>
      
        <content type="html"><![CDATA[<h4 id="MIT计算机科学导论"><a href="#MIT计算机科学导论" class="headerlink" title="MIT计算机科学导论"></a>MIT计算机科学导论</h4><p>MIT计算机科学导论教学视频，中英文字幕可以随意切换，老师发音很好，强推</p><ul><li><p><a href="https://www.bilibili.com/video/BV1sJ411n7aJ?from=search&seid=18376503429056860180">6.0001基础</a></p></li><li><p><a href="https://www.bilibili.com/video/av83124797?spm_id_from=333.788.b_636f6d6d656e74.4">6.0002进价</a></p></li><li><p><a href="https://book.douban.com/subject/30155590/">教材</a></p></li><li><p><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-0002-introduction-to-computational-thinking-and-data-science-fall-2016/index.htm">6.0002课后练习</a></p></li><li><p><a href="https://pan.baidu.com/s/1hqxh8ag#list/path=%2F">配套ppt</a></p></li></ul><p>没有找到与最新视频配套的slide，只找到15年的.</p><h4 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h4>]]></content>
      
      
      <categories>
          
          <category> 学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课程设计】最小生成树应用</title>
      <link href="2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/"/>
      <url>2021/03/31/ke-cheng-she-ji-zui-xiao-sheng-cheng-shu-ying-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><p>本次课程设计要求在n个城市之间架设n-1条线路，实现这几个城市之间的网络通信，要求网络经济代价最低。具体要求如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi1iN2U3M2JhMjE3ODgyMWVmLmpwZw?x-oss-process=image/format,png"></p><p>问题分析<br>根据设计要求，我们假设城市之间的距离越大架设网线的经济代价越大，因此可以用两个城市之间的距离作为边的权重。</p><p>n个城市之间最多可以生成 1+2+…+(n-1)条边，分别计算出每条边的长度然后对他们进行升序排序，利用并查集得到由n-1条边组成的最小生成树，问题便得到解决。</p><p>为了解决上述问题，需要构建一个城市结构体CITY来表示城市，并且还需要构建EDGE结构体来表示城市与城市的边，并利用随机函数生成城市的坐标。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MaxSize (10000)</span><span class="token comment" spellcheck="true">//n的取值最大为MaxSize</span><span class="token comment" spellcheck="true">/*---------------------结构体定义---------------------*/</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> City<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//城市结构体</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市ID</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//城市的坐标</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>CITY<span class="token punctuation">;</span> <span class="token keyword">typedef</span> <span class="token keyword">struct</span> edges<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//边结构体</span>    <span class="token keyword">int</span> s<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s为起始顶点 e为终止顶点</span>    <span class="token keyword">double</span> cost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的权值，即两个顶点之间的距离</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>EDGE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*---------------------生成城市并显示---------------------*/</span><span class="token keyword">void</span> <span class="token function">CreateCityPos</span><span class="token punctuation">(</span>CITY <span class="token operator">*</span><span class="token operator">&amp;</span> city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//随机生成城市坐标</span>    city <span class="token operator">=</span> <span class="token punctuation">(</span>CITY<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CITY<span class="token punctuation">)</span><span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置随机数的种子</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//随机生成n个城市的x,y坐标值</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>        city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowCityPos</span><span class="token punctuation">(</span>CITY<span class="token operator">*</span>city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示城市信息，城市序号、x坐标和y坐标</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n各城市的编号及坐标:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:[%d, %d]\n"</span><span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*---------------------计算城市两两之间的距离，生成边数组---------------------*/</span><span class="token keyword">int</span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算n的前n项和，用于根据顶点确定边的数目 当顶点为n时 则最多可以产生Sum(n-1)条边</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">double</span> <span class="token function">CityDist</span><span class="token punctuation">(</span><span class="token keyword">const</span> CITY<span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> CITY<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算两个城市之间的距离</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">-></span>x <span class="token operator">-</span> b<span class="token operator">-></span>x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-></span>x <span class="token operator">-</span> b<span class="token operator">-></span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token operator">-></span>y <span class="token operator">-</span> b<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">-></span>y <span class="token operator">-</span> b<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateEdges</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span> <span class="token operator">&amp;</span> e<span class="token punctuation">,</span> CITY<span class="token operator">*</span> city<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据城市信息生成城市之间的边</span>    e <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>EDGE<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的总数为Sum(n-1)</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>s <span class="token operator">=</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//起始顶点</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>e <span class="token operator">=</span> city<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//终止顶点</span>            <span class="token punctuation">(</span>e <span class="token operator">+</span> cnt<span class="token punctuation">)</span><span class="token operator">-></span>cost <span class="token operator">=</span> <span class="token function">CityDist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>city<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>city<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边的权值</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowCityEdges</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span>edges<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印边信息</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n各城市间的距离(城市1-城市2:边权值（距离）)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//show edges:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d : %f\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*--------------------KrusKal求最小生成树----------------------*/</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//比较函数 比较两条边的权值 用于排序</span>    EDGE<span class="token operator">*</span> aa<span class="token punctuation">,</span> <span class="token operator">*</span>bb<span class="token punctuation">;</span>    aa <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span> bb <span class="token operator">=</span> <span class="token punctuation">(</span>EDGE<span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>aa<span class="token operator">-></span>cost <span class="token operator">-</span> bb<span class="token operator">-></span>cost <span class="token punctuation">)</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最小生成树</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到根节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span> a <span class="token operator">=</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">KrusKal</span><span class="token punctuation">(</span>EDGE<span class="token operator">*</span> edges<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//KrusKal算法生成最小生成树</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    e <span class="token operator">=</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化并查集</span>        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n最小生成树的边及权值:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> e<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">getRoot</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token function">getRoot</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将边并入生成树</span>            v<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d: %f\n"</span><span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>e<span class="token punctuation">,</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印并入生成树的边的两个顶点和权值</span>            sum <span class="token operator">+</span><span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cost<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算生成树的总权值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n生成树总权值sum =%f\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*------------------------------KrusKal END-------------------------------------*/</span> <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    CITY<span class="token operator">*</span>city<span class="token punctuation">;</span>    EDGE<span class="token operator">*</span> edges<span class="token punctuation">;</span>    <span class="token function">CreateCityPos</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建城市</span>    <span class="token function">ShowCityPos</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示城市</span>     <span class="token function">CreateEdges</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> city<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建边（根据所有城市两两之间的距离来创建）</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> <span class="token function">Sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>EDGE<span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对边按权值进行升序排序</span>    <span class="token function">ShowCityEdges</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示排序后的边</span>     <span class="token function">KrusKal</span><span class="token punctuation">(</span>edges<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用KrusKal算法生成最小生成树</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入n:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">solve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行成功 2019年5月21日10:53:07</span> <span class="token comment" spellcheck="true">/*程序说明：基本思想：1、首先生成n个城市，每个城市的坐标随机生成，这部分由CreateCityPos（）函数实现；             2、计算n个城市两两之间的距离（距离计算由CityDist()完成），并保存到边数组中，这部分由CreateEdges（）函数实现；         3、由边数组(edges[])根据KrusKal算法求最小生成树，这部分由KrusKal（）函数实现，要注意的是进行KrusKal算法之前，需要对edges[]中的元素按照         权值进行升序排序，因此调用了stdlib.h头文件中的qsort()函数来进行排序。*/</span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xNzc4Njc2Mi03MjhiZjIyMGNkYzY5NTIyLnBuZw?x-oss-process=image/format,png"></p><p>n为城市的数量，由用户从终端输入。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【每日算法】2021年03月30日 多云 不同路径</title>
      <link href="2021/03/30/bu-tong-lu-jing/"/>
      <url>2021/03/30/bu-tong-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>这道题是LeeCode第<a href="https://leetcode-cn.com/problems/unique-paths/">62</a>题，属于动态规划中的中等难度题目。</p><span id="more"></span><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330183906.png" style="zoom: 67%;" /><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330184245.png" style="zoom:67%;" /><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>根据题面，假设机器人在位置(i, j), 不考虑边界条件，则它可以采取的动作有两个：向下(i+1)或者向右(j+1),定义dp[i][j]为机器人从(i,j)点走到点(m-1, n-1)的路径数，则有：dp[i][j] = dp[i+1][j] + dp[i][j+1],<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210330191859.png" style="zoom:67%;" /><br>然后我们再来考虑边界条件，当机器人在红框区域(此时 $i =m-1,  j \in [0 ~, n-2]$ )、蓝框区域（此时 $ i \in [0, m-2] , j=n-1$ )和点(m-1, n-2)时为边界，当机器人在边界上时，它到终点的距离都为1.</p><p>最终答案为dp[0][0]。</p><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">*</span>m        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> m<span class="token number">-1</span> <span class="token operator">or</span> j <span class="token operator">==</span> n<span class="token number">-1</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变分学习笔记</title>
      <link href="2021/03/29/bian-fen-xue-xi-bi-ji/"/>
      <url>2021/03/29/bian-fen-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="变分推断"><a href="#变分推断" class="headerlink" title="变分推断"></a>变分推断</h1><h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h3><ul><li><p>文章LAD题目分析</p><span id="more"></span><p>对文本进行自动分析，然后自动从中找出topic</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325161624.png" style="zoom:50%;" /></li><li><p>交通数据分析</p><p>美国湾区出租车数据分析，用变分推断的方法可以在一台笔记本电脑上面完成大量数据的计算</p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162352.png" style="zoom:50%;" /></li></ul><h3 id="贝叶斯推断概述"><a href="#贝叶斯推断概述" class="headerlink" title="贝叶斯推断概述"></a>贝叶斯推断概述</h3><h4 id="目标优缺点"><a href="#目标优缺点" class="headerlink" title="目标优缺点"></a>目标优缺点</h4><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162622.png"></p><h4 id="Roadmap"><a href="#Roadmap" class="headerlink" title="Roadmap"></a>Roadmap</h4><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325162730.png" style="zoom:67%;" /><blockquote><p>接下来主要讲解变分贝叶斯方法，变分贝叶斯方法是近似贝叶斯推断的一大类方法，变分贝叶斯方法又有很多子类，Mean-field变分推断是其中比较有代表性的一类。接下来结合讲解的方法讲三个例子：univariate Gaussian、Mixture of Gaussians和LDA</p></blockquote><h3 id="贝叶斯推断"><a href="#贝叶斯推断" class="headerlink" title="贝叶斯推断"></a><a href="https://www.bilibili.com/video/BV1Qf4y1e7jN?from=search&seid=14715651649240686105">贝叶斯推断</a></h3> <img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325164141.png" style="zoom:67%;" /><blockquote><p>Data是观测变量，Parameters是模型的参数，通过对观测变量$x$取值的观测，我们可以更新参数$z$, 这里$p(x) = \int_{z}^{}{p(x,z)dz}$，实际应用中$z$是一个高维的分布，很难计算$p(z|x)$</p></blockquote><h3 id="近似贝叶斯推断"><a href="#近似贝叶斯推断" class="headerlink" title="近似贝叶斯推断_"></a><a href="https://www.bilibili.com/video/BV1a5411H7eW?from=search&seid=14715651649240686105">近似贝叶斯推断</a>_</h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325210910.png"></p><blockquote><p>直接计算$p(z|x)$复杂度很高很难，然后就有了近似计算（推断）。常用的近似计算有：MCMC方法和基于优化的方法，MCMC方法虽然精度高但是数据量大时计算很慢，基于随机梯度的优化方法可以使用并行加速，因此可以大大的加速计算速度。<br>基于随机梯度优化方法的思路为：找到一个简单的分布$q^*(z) \in Q$来近似p(z|x), 目标$q^*(z)$应该是$Q$中，与$p(z|x)$某种距离最小的那个。<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325212515.png"><br>为什么要用KL散步来度量两个分布的距离呢？<br>KL满足可导和凸性，使得它的计算更快；<br>我们没法通过上式求得$q^*(z)$，需要通过下面的转换把优化KL最小问题进行转换为求$q(z)$使得ELBO最大的问题.<br><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214048.png"></p></blockquote><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325214709.png"></p><blockquote><p>这里的$log p(x)$是一个固定的常数。</p></blockquote><h3 id="平均场推断"><a href="#平均场推断" class="headerlink" title="平均场推断"></a><a href="https://www.bilibili.com/video/BV1Ki4y1w7Z9/?spm_id_from=autoNext">平均场推断</a></h3><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210325223324.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次系统奔溃的反思和总结</title>
      <link href="2021/03/28/ji-yi-ci-xi-tong-ben-kui-de-fan-si-he-zong-jie/"/>
      <url>2021/03/28/ji-yi-ci-xi-tong-ben-kui-de-fan-si-he-zong-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>3月15日，mac电脑无缘无故的崩掉了，本以为是一个小问题，拿去环茂直营店直接给判了死刑，主板全部换掉，顺带还换了屏幕，最悲剧的是最新版本mac的硬盘是直接焊死在主板上面的，换了主板硬盘也没有了，里面的数据也没了。</p></blockquote><span id="more"></span><blockquote><p>陆陆续续花了一周才把电脑系统恢复到之前的状态，当然因为没有备份，丢掉的数据是真的丢掉了。</p></blockquote><blockquote><p>为了防止类似的事情再次发生，也为了方便以后重装系统的时候能够节省时间，把这几天折腾的内容总结记录如下：</p></blockquote><h4 id="mac数据备份"><a href="#mac数据备份" class="headerlink" title="mac数据备份"></a>mac数据备份</h4><h5 id="iCloud方式备份"><a href="#iCloud方式备份" class="headerlink" title="iCloud方式备份"></a>iCloud方式备份</h5><p> iCloud适合备份一些关键的数据量不是特别大的数据，比如照片、邮件、通讯录、钥匙串和备忘录等数据；开启iCloud比较简单：在偏好设置里面搜索“iCloud”，然后根据提示设置就好了。</p><h5 id="TimeMachine方式备份"><a href="#TimeMachine方式备份" class="headerlink" title="TimeMachine方式备份"></a>TimeMachine方式备份</h5><p>建议使用mac的同学，花点时间学学TimeMachine的使用方法，这个<strong>一定要开启</strong>，我之前就是觉得弄TimeMachine比较麻烦，造成了数据无法挽回，<br>官方的教程在<a href="https://support.apple.com/zh-cn/HT201250">这里</a>。</p><h5 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h5><p>OneDrive是微软推出的云端网盘，普通用户好像只有5G的存储空间，部分学校会为学生购买存储空间，比如我们学校为每个学生购买了1T的存储空间，用学校分配的邮箱在<a href="https://www.microsoft.com/zh-cn/education/products/office">这里</a>就可以申请到。使用OneDrive在跨平台共享数据上比较方便，但是目前同步数据速度还比较慢，使用体验不太好。</p><h4 id="百度云备份"><a href="#百度云备份" class="headerlink" title="百度云备份"></a>百度云备份</h4><p>百度云就不用多说了，大家都会用，免费的速度是真慢，付费的速度快，但是每次上传或者下载文件要打开客户端，不像OneDrive那样方便。</p><h4 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h4><h5 id="论文阅读管理"><a href="#论文阅读管理" class="headerlink" title="论文阅读管理"></a>论文阅读管理</h5><ul><li><a href="https://www.papersapp.com/">Papers</a></li></ul><h5 id="轻写作、记笔记"><a href="#轻写作、记笔记" class="headerlink" title="轻写作、记笔记"></a>轻写作、记笔记</h5><ul><li><a href="https://macdown.uranusjr.com/">MacDown</a></li><li><a href="https://typora.io/">Typora</a></li><li><a href="https://www.notion.so/">Notion</a></li><li><a href="https://www.onenote.com/download%3Fomkt%3Dzh-CN">OneNote</a></li></ul><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><ul><li><a href="https://www.jetbrains.com/pycharm/">PyCharm</a></li><li><a href="https://www.sublimetext.com/">Sublime Text</a></li><li><a href="https://code.visualstudio.com/">Vscode</a></li></ul><h5 id="沟通聊天"><a href="#沟通聊天" class="headerlink" title="沟通聊天"></a>沟通聊天</h5><ul><li><a href="https://im.qq.com/download/">QQ</a></li><li><a href="https://weixin.qq.com/">微信</a></li></ul><h5 id="office系列"><a href="#office系列" class="headerlink" title="office系列"></a>office系列</h5><blockquote><p>我是从学校公共数据库下载的，大家自行搜索吧。</p></blockquote><h5 id="Adobe系列"><a href="#Adobe系列" class="headerlink" title="Adobe系列"></a>Adobe系列</h5><blockquote><p>电脑修完之后，工程师把主板软件升级了，导致学校提供的Adobe安装包都没法用，找了好几天才找到下面这两个可用的安装包:</p></blockquote><ul><li><a href="https://www.didixk.com/21013.html">Adobe PhotoShop 2021</a></li><li><a href="https://www.didixk.com/21013.html">Adobe Illustrator 2021</a></li></ul><h5 id="音影娱乐"><a href="#音影娱乐" class="headerlink" title="音影娱乐"></a>音影娱乐</h5><ul><li><a href="https://vox.rocks/mac-music-player">vox music player</a></li><li><a href="https://iina.io/">IINA视频播放器</a></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li><a href="https://www.royalapps.com/ts/mac/features">Royal Tsx </a>: ssh ftp客户端工具 </li><li><a href="http://www.math.ecnu.edu.cn/~jypan/vpn_ecnu/">VPN</a>：有时候需要用它来登录学校的vpn</li><li><a href="https://support.google.com/chrome/answer/95346?co=GENIE.Platform=Desktop&hl=zh-Hans">google chrome</a></li><li><a href="https://pan.baidu.com/download#pan">百度网盘</a></li><li><a href="https://cloud.tencent.com/act/event/tencentmeeting_free">腾讯会议</a></li><li><a href="https://www.ghpym.com/xmindzen.html">Xmid破解版</a></li><li><a href="https://www.eudic.net/v4/en/app/eudic">欧路词典</a>, 激活方式点<a href="https://www.macdo.cn/17456.html">这里</a>。</li><li><a href="https://www.mac-downloader.com/">Folx下载器</a></li><li> 小飞机：就不分享了，懂得都懂，大家自行搜索吧</li></ul><h6 id="会议信息"><a href="#会议信息" class="headerlink" title="会议信息"></a>会议信息</h6><ul><li><a href="https://aideadlin.es/?sub=ML,CV,NLP,RO,SP,DM">AiDeadlines</a></li><li><a href="https://www.conferenceeye.cn/#/layout/home">会议之眼</a></li></ul><h6 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h6><blockquote><p>也是因为对主板软件升了级，导致很多版本的虚拟机都没法用，找了很久才搞定。</p></blockquote><ul><li>Parallels Desktop：安装包在我的OneDrive网盘里，具体下载链接不记得了。</li></ul><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><h5 id="GitHub设置代理加速"><a href="#GitHub设置代理加速" class="headerlink" title="GitHub设置代理加速"></a>GitHub设置代理加速</h5><blockquote><p>拿到电脑之后，发现GitHub网页都没法打开，即使用了科学上网也没法打开，或者加载很慢，<br>这个时候我们就需要设置代理加速了，具体操作步骤请参考之前写的内容。</p></blockquote><h5 id="个人博客恢复"><a href="#个人博客恢复" class="headerlink" title="个人博客恢复"></a>个人博客恢复</h5><blockquote><p>由于之前博客的内容都放在了本地，配置文件和解析前的文档都没有了，后续有时间的时候再参照<a href="https://leongo.cn/2021/02/21/build/">这个</a>教程恢复一下。</p></blockquote><p>虽然折腾了这么久，但是mac是真的好用，让我再次选择的话，我还是会不犹豫的选择mac, 最后大家一定要记得经常<strong>备份！ 备份！ 备份！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub加速方法</title>
      <link href="2021/03/28/github-jia-su-fang-fa/"/>
      <url>2021/03/28/github-jia-su-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="设置代理加速GitHub"><a href="#设置代理加速GitHub" class="headerlink" title="设置代理加速GitHub"></a>设置代理加速GitHub</h3><p>由于github网站服务器在国外，国内上传和下载数据速度较慢，假如你已经有具备了科学上网的条件，可以通过设置代理的方式来提高数据传输速度。</p><p>以下设置均建立在具备科学上网的前提下，下文中的小飞机指某款用于科学上网的工具。</p><h4 id="设置http代理"><a href="#设置http代理" class="headerlink" title="设置http代理"></a>设置http代理</h4><p>在命令行输入如下的命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> http_proxy<span class="token operator">=</span>http://127.0.0.1:1087<span class="token function">export</span> https_proxy<span class="token operator">=</span>http://127.0.0.1:1087<span class="token comment" spellcheck="true">#设置http代理，端口号对应的是小飞机的http代理端口号</span><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1087<span class="token function">git</span> config --global https.proxy http://127.0.0.1:1087<span class="token comment" spellcheck="true">#配置github用户名和邮箱</span><span class="token function">git</span> config --global user.name github_id<span class="token function">git</span> config --global user.email github_email<span class="token comment" spellcheck="true">#取消代理设置</span><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy<span class="token comment" spellcheck="true">#查看代理设置</span><span class="token function">git</span> config --list</code></pre><p>http代理端口查询：</p><blockquote><p>在小飞机中找到“http代理 设置”选项，然后点击打开，找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319193849.png" style="zoom:67%;" /><h4 id="设置ssh加速"><a href="#设置ssh加速" class="headerlink" title="设置ssh加速"></a><a href="https://gist.github.com/chuyik/02d0d37a49edc162546441092efae6a1">设置ssh</a>加速</h4><p><code>在~/.ssh/config</code> 文件（不存在则新建）添加如下内容：</p><pre class=" language-bash"><code class="language-bash">Host github.com   HostName github.com   User <span class="token function">git</span>   <span class="token comment" spellcheck="true"># 走 HTTP 代理，需要 brew install socat</span>   <span class="token comment" spellcheck="true"># ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport=1087</span>   <span class="token comment" spellcheck="true"># 走 socks5 代理（如 Shadowsocks）</span>   ProxyCommand nc -v -x 127.0.0.1:1086 %h %p   <span class="token comment" spellcheck="true">#上面1086这个端口号可以在“小飞机”的高级设置中查看</span>   <span class="token comment" spellcheck="true"># 走 socks5 代理（如 Shadowsocks），Windows 平台没有 nc 命令</span>   <span class="token comment" spellcheck="true"># ProxyCommand connect -S 127.0.0.1:1086 %h %p</span></code></pre><p>本地Socks5监听窗口查询：</p><blockquote><p>在小飞机中找到“高级设置”，点击打开就可以找到如下图所示的监听窗口。</p></blockquote><img src="https://raw.githubusercontent.com/Skylyong/i/main/20210319194610.png" style="zoom:50%;" /><h3 id="通过修改hosts解决浏览器打不开github网站的方法"><a href="#通过修改hosts解决浏览器打不开github网站的方法" class="headerlink" title="通过修改hosts解决浏览器打不开github网站的方法"></a>通过修改hosts解决浏览器打不开github网站的方法</h3><blockquote><p>假如不具备科学上网的条件，也可以通过修改hosts文件来解决浏览器打不开GitHub的问题，但是通过这种方式只能解决浏览器打开慢的问题，不能够解决在终端克隆项目慢的问题，建议通过代理的方式加速。</p></blockquote><span id="more"></span><p>首先从这个<a href="https://zhuanlan.zhihu.com/p/36154464">网站</a>给出的链接中获取(也可以直接用下面的数据)到如下格式的数据：</p><pre class=" language-bash"><code class="language-bash">140.82.113.4 github.com199.232.69.194 github.global.ssl.fastly.net185.199.108.153 assets-cdn.github.com185.199.110.153 assets-cdn.github.com185.199.111.153 assets-cdn.github.com185.199.109.153 assets-cdn.github.com</code></pre><p>然后将这些数据添加到hosts（mac中的路径为：/private/ect/hosts）文件中就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 爬坑总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECNU的春</title>
      <link href="2021/02/22/ecnu-de-chun/"/>
      <url>2021/02/22/ecnu-de-chun/</url>
      
        <content type="html"><![CDATA[<p>最开始令人感受到春气息的是红梅花，红梅花跟腊梅花的区别在于花瓣的颜色和开放的时间不同，腊梅花比红梅花开得更早一些。今年红梅花开的具体日子已经不记得了，只依稀记得那个时候天还很冷，操场上面很少见到跑步运动的人，留校的同学大多都还呆在宿舍，校园里面因此显得十分的冷清。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><center>    <img src="https://raw.githubusercontent.com/Skylyong/i/main/IMG_6820.JPG"  >    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">夏雨路附近的红梅花</div></center><br><p>红梅花开之后好一段时间，早樱也开了，学校里面开放最早的早樱是电竞中心前面的两颗樱树，那段时间有点忙，等我看到的时候花期已经接近了尾声。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><center>    <img     src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG7.jpeg" >    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">电竞中心前的早樱花</div></center><br><p>再往后，天气也慢慢的变得暖和了，校园里面人也多了起来。这段时间的天空往往是湖蓝色的，阳光变得温柔灿烂，晨曦和晚霞尤为美丽动人，傍晚坐在丽娃河边的木凳上欣赏天边美丽的云儿，时不时还能听到大胆的鱼儿蹦出水面的叮咚声，好不惬意。但是阳光却是没有多少温度，路上行人依然裹着厚厚的羽绒服。这个时候玉兰也开始吐出了花骨朵，不多久雪白的玉兰花就完全开放了，挂在高高的没有一丝绿叶的玉兰树上，让人不由得停下脚步来欣赏这份生命的倔强。除了雪白的白玉兰，这园子里面还有紫玉兰，紫玉兰开花比白玉兰稍微晚些，但是并不影响它与白玉兰争鲜斗艳。</p><!-- style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"  --><p><img src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG9.jpeg"></p><center>    <!-- <img     src="https://raw.githubusercontent.com/Skylyong/i/main/WechatIMG9.jpeg" > -->    <div style="color:orange; border-bottom: 0.5px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 0.5px;">5舍后面的白玉兰</div></center><br><p>约莫三月中下旬的时候，这园子里面迎来了它的主角——樱花。</p><p>（未完待续…）</p>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECNU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="2021/02/21/build/"/>
      <url>2021/02/21/build/</url>
      
        <content type="html"><![CDATA[<p>前沿： <a href="file:///Users/lyong/Desktop/Skylyong.github.io-main/2021/02/21/build/index.html">hexo</a>和<a href="https://themes.gohugo.io/hugo-swift-theme/">hugo</a>是常用的个人博客搭建框架，hexo技术更成熟稳定，但是速度慢，而基于go语言的hugo拥有速度快的优点，但是由于出现较晚，它的技术还不够成熟，也没有相对稳定的主题。</p><h4 id="首次搭建"><a href="#首次搭建" class="headerlink" title="首次搭建"></a>首次搭建</h4><p>今晚用了3个小时搭建了基于hexo的个人博客，现在记录一下。</p><p>主要参考了下面几个链接</p><ul><li><p>博客搭建链接: <a href="https://zhuanlan.zhihu.com/p/26625249">https://zhuanlan.zhihu.com/p/26625249</a></p></li><li><p>pure主题使用链接: <a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p></li><li><p>next主题使用教程: <a href="https://theme-next.iissnan.com/theme-settings.html#tags-page">https://theme-next.iissnan.com/theme-settings.html#tags-page</a></p></li><li><p>next主题进一步完善: <a href="https://tding.top/top/">https://tding.top/top/</a></p></li></ul><p>有一点要注意：教程中设置域名解析的时候不应该使用A模式，都应该使用CNAME模式</p><ul><li><p>hexo常用命令</p></li><li><p>新建博客：hexo n “bolg’s name”</p></li><li><p>发布博客用如下三个命令：</p></li></ul><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre><h4 id="增加功能"><a href="#增加功能" class="headerlink" title="增加功能"></a>增加功能</h4><p>今天为博客增加了<a href="http://www.yangyong.xyz/2018/01/03/add-hexo-next-post-views/">记录阅读次数</a>和<a href="https://vic.kim/2019/05/22/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/">站内搜索</a>的功能。其中添加记录阅读次数功能相对麻烦，需要注册<a href="https://console.leancloud.cn/">leancloud</a>的账号，并且按照教程进行相应设置，如果遇到不能够正常显示阅读次数，要安装相关插件；站内搜索功能比较简单，按照链接中的教程一步步操作就好了。</p><h4 id="设置github免费图床"><a href="#设置github免费图床" class="headerlink" title="设置github免费图床"></a>设置github免费图床</h4><p>首先在<a href="https://github.com/Molunerfinn/PicGo/releases">这里</a>下载对应版本的PicGo(我选择的是2.2.2版本)，然后根据这个<a href="https://learnku.com/articles/48574">教程</a>设置图床，设置好图床后就可以把本地的图片上传到github服务器，生成链接，方便写markdown的时候引用。</p><h4 id="添加评论功能"><a href="#添加评论功能" class="headerlink" title="添加评论功能"></a>添加评论功能</h4><p>设置好评论，默认是每一篇文章，包括”关于“等页面下面都会生成评论对话框，如果想关闭某一篇文章下面的评论对话框，可以参考<a href="https://nobige.cn/post/20190718-hexoxiavalineguanbijingzhimougewenzhangyemianpinglun/">这里</a>。</p><h4 id="电脑奔溃，我弃用next主题了"><a href="#电脑奔溃，我弃用next主题了" class="headerlink" title="电脑奔溃，我弃用next主题了"></a>电脑奔溃，我弃用next主题了</h4><ul><li>matery主题配置: <a href="https://www.jianshu.com/p/cf9730925b5c">https://www.jianshu.com/p/cf9730925b5c</a></li><li>matery主题深度配置: <a href="https://bbs.huaweicloud.com/blogs/226867">https://bbs.huaweicloud.com/blogs/226867</a></li><li>matery主题优秀博客: <a href="https://notes.zhangxiaocai.cn/">https://notes.zhangxiaocai.cn/</a></li></ul><h4 id="logo设计"><a href="#logo设计" class="headerlink" title="logo设计"></a>logo设计</h4><ul><li>在线免费logo设计：<a href="http://yeelogo.com/#/">http://yeelogo.com/#/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的免费无广告电影网站推荐</title>
      <link href="2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/"/>
      <url>2021/02/21/hao-yong-de-mian-fei-wu-guang-gao-dian-ying-wang-zhan-tui-jian/</url>
      
        <content type="html"><![CDATA[<p>今日阳光明媚，中午坐在阳台上面感受着春日暖风拂面，不由得让人想找一部电影伴着暖阳体验一番春日周末的慢生活。相信有不少同学跟我一样，不喜欢充视频网站的会员，更不喜欢看电影之前漫长的广告。好在日常生活中碰到好用的电影网站我都会加在收藏夹中，下面整理一下分享给各位喜欢看电影的同学。</p><ul><li><p><a href="http://www.fenggoudy1.com/list-read-id-1.html">疯狗电影</a></p><p>  春节期间看《曼达洛人》的时候发现的，优点是有最新的片源，刚刚看了一下，竟然有最新大热的《你好，李焕英》，资源质量一般，虽然看视频没有广告，但是浮窗广告有点多，影响观感，适合喜欢尝鲜但是对资源质量要求不高的同学。</p><p>  资源存量指数：★★★☆☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★☆☆☆☆</p></li><li><p><a href="https://91kanju.com/vod-play/57173-2-1.html">91看剧</a></p><p>  这个网站的资源以电视剧为主，也有不少电影资源，资源比较多，但是有些资源加载时间比较长，资源质量一般，刚刚测试了一下不用翻墙也可以访问。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://www.wandouys.com/">豌豆影视</a></p><p>  这是我用得最久的免费电影网站，它片源多，新上映的电影也可以在上面找到。缺点是需要翻墙才能解析到视频网址（网址解析之后不用翻墙可以看），视频质量没有保障，喜欢高清电影的同学可能要失望了；网站有时候不稳定，看视频会卡顿。</p><p>  资源存量指数：★★★★★</p><p>  视频质量指数：★★★☆☆</p><p>  个人推荐指数：★★★☆☆</p></li><li><p><a href="https://速影tv.com/movie/5.html">速影TV</a></p><p>  这个网站个人不常用，不记得是怎么发现的了，它的片源比较多，但是资源质量不高，貌似需要翻墙才可以看。虽不常用，但是找不到片源的时候，在这上面找找也可能有意外收获。</p><p>  资源存量指数：★★★★☆</p><p>  视频质量指数：★★☆☆☆</p><p>  个人推荐指数：★★☆☆☆</p></li><li><p><a href="https://ddrk.me/the-witches/">低端电影</a></p><p>  这个网站是前段时间无意中从google中搜索到的，优点是广告少，片源都是高清的电影，还不用翻墙；缺点是资源量不大，不过许多经典电影和电视剧的资源都可以在里面找到，很不错，十分推荐。</p><p>  资源存量指数：★★☆☆☆</p><p>  视频质量指数：★★★★★</p><p>  个人推荐指数：★★★★★</p><p>  上面推荐的网站有时候可能会被封掉，最后再推荐一个存储电影资源网址的<a href="http://www.dyhz1.com/">站点</a>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
